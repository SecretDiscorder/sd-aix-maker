com.bima.bimaaix.BimaAix -> com.bima.bimaaix.BimaAix:
    android.content.BroadcastReceiver broadcastReceiver -> a
    int VERSION -> VERSION
    boolean suppressToast -> a
    android.media.AudioManager audioManager -> a
    android.content.ContentResolver contentResolver -> a
    boolean isAlarm -> b
    boolean isNotification -> c
    java.math.BigDecimal decimalResult -> a
    java.math.BigInteger integerResult -> a
    boolean isRingtone -> d
    android.media.Ringtone ringtone -> a
    boolean showUI -> e
    java.lang.String audioPathSource -> a
    java.lang.String a -> b
    android.content.Context context -> a
    android.app.Activity activity -> a
    boolean hideFromRecent -> f
    com.google.appinventor.components.runtime.ComponentContainer container -> a
    com.bima.bimaaix.WView webView -> a
    boolean followLinks -> g
    boolean prompt -> h
    java.lang.String UserAgent -> c
    com.bima.bimaaix.BimaAix$WebViewInterface wvInterface -> a
    android.webkit.JsPromptResult jsPromptResult -> a
    java.lang.String MOBILE_USER_AGENT -> d
    android.webkit.ValueCallback mFilePathCallback -> a
    android.os.Message dontSend -> a
    android.os.Message reSend -> b
    android.webkit.PermissionRequest permissionRequest -> a
    android.print.PrintJob printJob -> a
    android.webkit.CookieManager cookieManager -> a
    android.webkit.JsResult jsResult -> a
    android.webkit.JsResult jsAlert -> b
    android.webkit.HttpAuthHandler httpAuthHandler -> a
    boolean deepLinks -> i
    java.lang.String jobName -> e
    boolean isLoading -> j
    java.util.HashMap wv -> a
    boolean blockAds -> k
    java.lang.String AD_HOSTS -> f
    int iD -> a
    boolean desktopMode -> l
    int zoomPercent -> b
    boolean zoomEnabled -> m
    boolean displayZoom -> n
    android.os.Message resultObj -> c
    float deviceDensity -> a
    android.webkit.GeolocationPermissions$Callback theCallback -> a
    java.lang.String theOrigin -> g
    android.webkit.SslErrorHandler sslHandler -> a
    java.util.List customDeepLink -> a
    boolean isScrollEnabled -> o
    boolean isRepl -> isRepl
    boolean listening -> p
    java.lang.String status -> status
    java.lang.String plugged -> h
    int level -> c
    java.lang.String health -> i
    float temperature -> b
    int voltage -> d
    java.lang.String technology -> j
    boolean clickable -> q
    boolean suppressWarnings -> r
    android.app.DownloadManager downloadManager -> a
    long lastRequestId -> a
    int nVisibility -> e
    boolean isCancelled -> s
    boolean mIsFloatViewShowing -> t
    boolean mFloatViewTouchConsumedByMove -> u
    int mFloatViewLastX -> f
    int mFloatViewLastY -> g
    int mFloatViewFirstX -> h
    int mFloatViewFirstY -> i
    android.view.WindowManager mWindowManager -> a
    android.view.WindowManager$LayoutParams params -> a
    android.widget.RelativeLayout rl -> a
    android.view.ViewGroup viewParent -> a
    int indexChild -> j
    android.view.View viewHV -> a
    java.io.File externalFilesDir -> a
    int requestCode -> requestCode
    android.hardware.Camera camera -> a
    boolean hasFlash -> v
    boolean isFlashOn -> isFlashOn
    java.lang.String binaryName -> k
    java.lang.String expectedSignature -> l
    android.content.BroadcastReceiver completed -> completed
    java.lang.String expectedPackageName -> m
    android.content.BroadcastReceiver batteryReceiver -> b
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean SuppressWarnings() -> SuppressWarnings
    void SuppressWarnings(boolean) -> SuppressWarnings
    void CreateAppSpecificDirectory() -> CreateAppSpecificDirectory
    boolean IsDirectory(java.lang.String) -> IsDirectory
    boolean Exists(java.lang.String) -> Exists
    java.lang.String Length(java.lang.String) -> Length
    java.lang.Object FileList(java.lang.String,java.lang.String,boolean) -> FileList
    java.lang.Object FileListFromAssets() -> FileListFromAssets
    void FileListAsync(java.lang.String,java.lang.String,boolean) -> FileListAsync
    void AsyncFileList(java.lang.String,java.lang.String,boolean) -> a
    void AfterFileListAsync(java.lang.Object) -> AfterFileListAsync
    java.util.List getList(java.io.File,java.lang.String,boolean) -> a
    java.lang.String completeFileName(java.lang.String) -> a
    void Delete(java.lang.String) -> Delete
    void Copy(java.lang.String,java.lang.String) -> Copy
    void CopyAsync(java.lang.String,java.lang.String) -> CopyAsync
    void Move(java.lang.String,java.lang.String) -> Move
    void MoveAsync(java.lang.String,java.lang.String) -> MoveAsync
    void copyOrMove1(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void copyOrMove2(java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String) -> a
    void AsyncCopyOrMove(java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String) -> AsyncCopyOrMove
    void BackToUiThread(boolean,java.lang.String,java.lang.String) -> a
    void Copied(boolean,java.lang.String) -> Copied
    void Moved(boolean,java.lang.String) -> Moved
    long FreeMemorySize() -> FreeMemorySize
    java.lang.String GetFileName(java.lang.String) -> GetFileName
    java.lang.String getPath(android.content.Context,android.net.Uri) -> a
    boolean isGooglePhotosUri(android.net.Uri) -> a
    java.lang.String getDataColumn(android.content.Context,android.net.Uri,java.lang.String,java.lang.String[]) -> a
    java.lang.Object DirectoryList(java.lang.String) -> DirectoryList
    java.lang.String GetUri(java.lang.String) -> GetUri
    java.lang.String AvailableSize(java.lang.String) -> AvailableSize
    java.lang.Object AvailableStorageDirectories() -> AvailableStorageDirectories
    void initCalculator() -> a
    void Add(double) -> Add
    void Subtract(double) -> Subtract
    void Multiply(double) -> Multiply
    void Divide(double) -> Divide
    void performArithmeticOperation(java.lang.String,java.math.BigDecimal) -> a
    void dispatchResult(java.lang.String) -> a
    java.lang.String GetDecimalResult() -> GetDecimalResult
    long GetIntegerResult() -> GetIntegerResult
    void Power(double) -> Power
    void Factorial() -> Factorial
    java.math.BigInteger calculateFactorial(int) -> a
    void SquareRoot() -> SquareRoot
    void BinaryOperation(java.lang.String) -> BinaryOperation
    java.lang.String ToRoman(int) -> ToRoman
    java.lang.String convertToRoman(int) -> a
    void ClearCalculator() -> ClearCalculator
    void Create(java.lang.String,int,boolean,com.google.appinventor.components.runtime.AndroidViewComponent) -> Create
    void ConvertView(android.widget.TextView,int,boolean,android.graphics.Bitmap) -> a
    void ShowAlert(java.lang.String,boolean) -> ShowAlert
    void ShowAlertAtCenter(java.lang.String,boolean) -> ShowAlertAtCenter
    void Progress(int) -> Progress
    void Completed() -> Completed
    void Failed(java.lang.String) -> Failed
    boolean HasFlash() -> HasFlash
    void On() -> On
    void AsyncOn() -> AsyncOn
    void Off() -> Off
    void AsyncOff() -> AsyncOff
    void PermissionDenied(java.lang.String) -> PermissionDenied
    void Success(boolean) -> Success
    void DisableSystemKeyboard(com.google.appinventor.components.runtime.TextBoxBase) -> DisableSystemKeyboard
    void EnableSystemKeyboard(com.google.appinventor.components.runtime.TextBoxBase) -> EnableSystemKeyboard
    boolean SuppressToast() -> SuppressToast
    void SuppressToast(boolean) -> SuppressToast
    void Copy(java.lang.String) -> Copy
    java.lang.String Paste() -> Paste
    java.lang.CharSequence CoerceToText(android.content.ClipData$Item) -> a
    void DecryptText(java.lang.String) -> DecryptText
    void DecryptionError(java.lang.String) -> DecryptionError
    void DecryptionSuccess(java.lang.String) -> DecryptionSuccess
    void EncryptText(java.lang.String) -> EncryptText
    void EncryptionError(java.lang.String) -> EncryptionError
    void EncryptionKey(java.lang.String) -> EncryptionKey
    void EncryptionSuccess(java.lang.String) -> EncryptionSuccess
    void NotificationVisibility(int) -> NotificationVisibility
    java.lang.String GuessFileName(java.lang.String,java.lang.String,java.lang.String) -> GuessFileName
    java.lang.String GetUriString(long) -> GetUriString
    java.lang.String GetMimeType(long) -> GetMimeType
    void GetFileSize(java.lang.String) -> GetFileSize
    void startListeningBattery() -> b
    void stopListeningBattery() -> c
    java.lang.String getStatus(int) -> getStatus
    java.lang.String getPlugged(int) -> getPlugged
    java.lang.String getHealth(int) -> getHealth
    java.lang.String Status() -> Status
    java.lang.String Plugged() -> Plugged
    int Level() -> Level
    java.lang.String Health() -> Health
    float Temperature() -> Temperature
    int Voltage() -> Voltage
    java.lang.String Technology() -> Technology
    void BatteryChanged(java.lang.String,java.lang.String,int,java.lang.String,float,int,java.lang.String) -> BatteryChanged
    void updateBatteryInfo(android.content.Intent) -> a
    void Download(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Download
    java.lang.String getUrl(android.content.Intent) -> getUrl
    java.lang.String GetStartUrl() -> GetStartUrl
    void OnResume(java.lang.String) -> OnResume
    void onResume() -> onResume
    void onStop() -> onStop
    void onNewIntent(android.content.Intent) -> onNewIntent
    void DownloadStarted(long) -> DownloadStarted
    void GotFileSize(long) -> GotFileSize
    void DownloadCompleted() -> DownloadCompleted
    void DownloadFailed() -> DownloadFailed
    void DownloadProgressChanged(int) -> DownloadProgressChanged
    void OpenFile(int) -> OpenFile
    void Cancel() -> Cancel
    void onDestroy() -> onDestroy
    int d2p(int) -> a
    int p2d(int) -> b
    void CreateWebView(com.google.appinventor.components.runtime.HVArrangement,int) -> CreateWebView
    java.lang.Object GetWebView(int) -> GetWebView
    void SetWebView(int) -> SetWebView
    void resetWebView(android.webkit.WebView) -> a
    java.util.List GetIds() -> GetIds
    void WebViewString(java.lang.String) -> WebViewString
    boolean Visible() -> Visible
    void SetVisibility(int,boolean) -> SetVisibility
    java.lang.String WebViewString() -> WebViewString
    void ScrollBarStyle(int) -> ScrollBarStyle
    int ScrollBarStyle() -> ScrollBarStyle
    void OverScrollMode(int) -> OverScrollMode
    int OverScrollMode() -> OverScrollMode
    void LayerType(int) -> LayerType
    int LayerType() -> LayerType
    void RotationAngle(float) -> RotationAngle
    float RotationAngle() -> RotationAngle
    java.lang.String UserAgent() -> UserAgent
    void UserAgent(java.lang.String) -> UserAgent
    java.lang.String CurrentUrl() -> CurrentUrl
    java.lang.String CurrentPageTitle() -> CurrentPageTitle
    boolean FollowLinks() -> FollowLinks
    void DeepLinks(boolean) -> DeepLinks
    boolean DeepLinks() -> DeepLinks
    void FollowLinks(boolean) -> FollowLinks
    void BlockAds(boolean) -> BlockAds
    void AdHosts(java.lang.String) -> AdHosts
    void AutoplayMedia(boolean) -> AutoplayMedia
    boolean AutoplayMedia() -> AutoplayMedia
    void CacheMode(int) -> CacheMode
    int CacheMode() -> CacheMode
    void ZoomEnabled(boolean) -> ZoomEnabled
    boolean ZoomEnabled() -> ZoomEnabled
    void AutoLoadImages(boolean) -> AutoLoadImages
    boolean AutoLoadImages() -> AutoLoadImages
    void DisplayZoom(boolean) -> DisplayZoom
    boolean DisplayZoom() -> DisplayZoom
    void ZoomPercent(int) -> ZoomPercent
    int ZoomPercent() -> ZoomPercent
    void FontSize(int) -> FontSize
    int FontSize() -> FontSize
    void DesktopMode(boolean) -> DesktopMode
    boolean DesktopMode() -> DesktopMode
    void LongClickable(boolean) -> LongClickable
    boolean LongClickable() -> LongClickable
    void InitialScale(int) -> InitialScale
    void FileAccess(boolean) -> FileAccess
    boolean FileAccess() -> FileAccess
    void SupportMultipleWindows(boolean) -> SupportMultipleWindows
    void BlockNetworkLoads(boolean) -> BlockNetworkLoads
    boolean BlockNetworkLoads() -> BlockNetworkLoads
    boolean SupportMultipleWindows() -> SupportMultipleWindows
    void LoadWithOverviewMode(boolean) -> LoadWithOverviewMode
    void UseWideViewPort(boolean) -> UseWideViewPort
    boolean LoadWithOverviewMode() -> LoadWithOverviewMode
    boolean UseWideViewPort() -> UseWideViewPort
    void EnableJS(boolean) -> EnableJS
    boolean EnableJS() -> EnableJS
    void UsesLocation(boolean) -> UsesLocation
    boolean PromptForPermission() -> PromptForPermission
    void ScrollBar(boolean) -> ScrollBar
    void PromptForPermission(boolean) -> PromptForPermission
    void BackgroundColor(int) -> BackgroundColor
    void WebViewStringChanged(java.lang.String) -> WebViewStringChanged
    void StopLoading() -> StopLoading
    void Reload() -> Reload
    void LoadHtml(java.lang.String) -> LoadHtml
    boolean CanGoBack() -> CanGoBack
    boolean CanGoForward() -> CanGoForward
    void ClearCookies() -> ClearCookies
    void CreateShortcut(java.lang.String,java.lang.String,java.lang.String) -> CreateShortcut
    void CookiesRemoved(boolean) -> CookiesRemoved
    void ClearCache() -> ClearCache
    void ClearInternalHistory() -> ClearInternalHistory
    void LoadInNewWindow(int) -> LoadInNewWindow
    void ZoomIn() -> ZoomIn
    void ZoomOut() -> ZoomOut
    void PageDown(boolean) -> PageDown
    void PageUp(boolean) -> PageUp
    void ZoomBy(int) -> ZoomBy
    int CurrentId() -> CurrentId
    void GoBack() -> GoBack
    void GoForward() -> GoForward
    void RemoveWebView(int) -> RemoveWebView
    boolean CanGoBackOrForward(int) -> CanGoBackOrForward
    void GoBackOrForward(int) -> GoBackOrForward
    void GoToUrl(java.lang.String) -> GoToUrl
    void PostData(java.lang.String,java.lang.String) -> PostData
    void PauseWebView(int) -> PauseWebView
    void ResumeWebView(int) -> ResumeWebView
    int GetProgress(int) -> GetProgress
    void OnCloseWindowRequest(int) -> OnCloseWindowRequest
    void PageLoaded(int) -> PageLoaded
    void OnDownloadNeeded(int,java.lang.String,java.lang.String,java.lang.String,long) -> OnDownloadNeeded
    void OnProgressChanged(int,int) -> OnProgressChanged
    void OnConsoleMessage(java.lang.String,int,int,java.lang.String) -> OnConsoleMessage
    void EvaluateJavaScript(java.lang.String) -> EvaluateJavaScript
    java.util.List GetInternalHistory(int) -> GetInternalHistory
    void LoadWithHeaders(java.lang.String,com.google.appinventor.components.runtime.util.YailDictionary) -> LoadWithHeaders
    void SaveArchive(java.lang.String) -> SaveArchive
    void AfterArchiveSaved(boolean,java.lang.String) -> AfterArchiveSaved
    void AfterJavaScriptEvaluated(java.lang.String) -> AfterJavaScriptEvaluated
    void OnScrollChanged(int,int,int,int,int,boolean,boolean) -> OnScrollChanged
    void ClearMatches() -> ClearMatches
    void LongClicked(int,java.lang.String,java.lang.String,int) -> LongClicked
    void ScrollTo(int,int) -> ScrollTo
    int GetScrollX() -> GetScrollX
    int GetScrollY() -> GetScrollY
    void OnErrorReceived(int,java.lang.String,int,java.lang.String) -> OnErrorReceived
    void FileUploadNeeded(int,java.lang.String,boolean) -> FileUploadNeeded
    void UploadFile(java.lang.String) -> UploadFile
    int getIndex(android.webkit.WebView) -> a
    void OnFormResubmission(int) -> OnFormResubmission
    void ResubmitForm(boolean) -> ResubmitForm
    void OnNewWindowRequest(int,boolean,boolean) -> OnNewWindowRequest
    void OnShowCustomView() -> OnShowCustomView
    void OnHideCustomView() -> OnHideCustomView
    int ContentHeight() -> ContentHeight
    void GrantPermission(java.lang.String) -> GrantPermission
    void GotCertificate(boolean,java.lang.String,java.lang.String,java.lang.String) -> GotCertificate
    void GetSslCertificate() -> GetSslCertificate
    void SetCookies(java.lang.String,java.lang.String) -> SetCookies
    void OnJsAlert(int,java.lang.String,java.lang.String) -> OnJsAlert
    void OnJsConfirm(int,java.lang.String,java.lang.String) -> OnJsConfirm
    void OnJsPrompt(int,java.lang.String,java.lang.String,java.lang.String) -> OnJsPrompt
    void DismissJsAlert() -> DismissJsAlert
    void ContinueJs(java.lang.String) -> ContinueJs
    void ConfirmJs(boolean) -> ConfirmJs
    void OnReceivedHttpAuthRequest(int,java.lang.String,java.lang.String) -> OnReceivedHttpAuthRequest
    void PageStarted(int,java.lang.String) -> PageStarted
    void ProceedHttpAuthRequest(java.lang.String,java.lang.String) -> ProceedHttpAuthRequest
    void FindResultReceived(int,int,int,boolean) -> FindResultReceived
    void ClearLocation() -> ClearLocation
    void Find(java.lang.String) -> Find
    java.lang.String GetCookies(java.lang.String) -> GetCookies
    void InvokeZoomPicker() -> InvokeZoomPicker
    void FindNext(boolean) -> FindNext
    void OnPermissionRequest(java.util.List) -> OnPermissionRequest
    void GotPrintResult(java.lang.String,boolean,boolean,boolean) -> GotPrintResult
    void OnGeolocationRequested(java.lang.String) -> OnGeolocationRequested
    void AllowGeolocationAccess(boolean,boolean) -> AllowGeolocationAccess
    void OnReceivedSslError(int) -> OnReceivedSslError
    void ProceedSslError(boolean) -> ProceedSslError
    void PrintWebContent(java.lang.String) -> PrintWebContent
    void HideCustomView() -> HideCustomView
    void RestartPrinting() -> RestartPrinting
    void CancelPrinting() -> CancelPrinting
    void CancelJsRequests() -> d
    boolean DeepLinkParser(java.lang.String) -> a
    void ClearFormData(int) -> ClearFormData
    void RegisterDeepLink(java.lang.String) -> RegisterDeepLink
    void VibrationEnabled(boolean) -> VibrationEnabled
    boolean VibrationEnabled() -> VibrationEnabled
    void Scrollable(boolean) -> Scrollable
    void Swiped(int,int) -> Swiped
    void onSwipe(int,int) -> onSwipe
    void setExpectedPackageName(java.lang.String) -> setExpectedPackageName
    boolean checkPackageMod() -> checkPackageMod
    boolean isCloneMod() -> isCloneMod
    boolean IsAppInstalledAndEnabledPM(java.lang.String) -> IsAppInstalledAndEnabledPM
    boolean IsEmulator() -> IsEmulator
    boolean isRunningInEmulator() -> a
    void SetupView(com.google.appinventor.components.runtime.AndroidViewComponent,boolean,int,int) -> SetupView
    void ShowFloatingView() -> ShowFloatingView
    void OverlapView(com.google.appinventor.components.runtime.AndroidViewComponent,com.google.appinventor.components.runtime.AndroidViewComponent,com.google.appinventor.components.runtime.util.YailList,int) -> OverlapView
    void DismissViewFloating() -> DismissViewFloating
    boolean CheckDrawOverlayPermission() -> CheckDrawOverlayPermission
    void RequestDrawOverlayPermission() -> RequestDrawOverlayPermission
    int GetPositionX() -> GetPositionX
    int GetPositionY() -> GetPositionY
    void SetPosition(int,int) -> SetPosition
    void SetClickable(boolean) -> SetClickable
    boolean GetClickable() -> GetClickable
    boolean GetFloatingViewVisible() -> GetFloatingViewVisible
    void PositionMoved(int,int) -> PositionMoved
    void ClickView() -> ClickView
    void RestoreFloatingView() -> RestoreFloatingView
    void RequestFocusFloatingView() -> RequestFocusFloatingView
    void LoseFocusFloatingView() -> LoseFocusFloatingView
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    boolean checkDrawOverlayPermission(boolean) -> a
    void showFloatView() -> e
    void dismissFloatView() -> f
    void floatViewHV(int,int) -> a
    void overlapView(com.google.appinventor.components.runtime.AndroidViewComponent,com.google.appinventor.components.runtime.AndroidViewComponent,com.google.appinventor.components.runtime.util.YailList,int) -> a
    boolean IsRooted() -> IsRooted
    boolean IsDeveloperModeEnabled() -> IsDeveloperModeEnabled
    boolean CheckMyAppSignature() -> CheckMyAppSignature
    void HideNavigationBarHP() -> HideNavigationBarHP
    void HideStatusBarHP() -> HideStatusBarHP
    void SetExpectedSignature(java.lang.String) -> SetExpectedSignature
    java.lang.String bytesToHex(byte[]) -> a
    boolean IsPackageInstalledPM(java.lang.String) -> IsPackageInstalledPM
    boolean IsAppInstalledPM(java.lang.String) -> IsAppInstalledPM
    java.lang.String GetAPKSignature() -> GetAPKSignature
    void AllowScreenshotsUser(boolean) -> AllowScreenshotsUser
    void RunApp(java.lang.String) -> RunApp
    void CloseAppOnRecentPressed() -> CloseAppOnRecentPressed
    float GetWindowBrightness() -> GetWindowBrightness
    boolean IsConnectedNetwork() -> IsConnectedNetwork
    java.lang.String Mode() -> Mode
    void SetWindowBrightness(float) -> SetWindowBrightness
    void StartLockTask() -> StartLockTask
    void OnProgressChanged(int) -> OnProgressChanged
    int getSdkVersion() -> getSdkVersion
    void StopLockTask() -> StopLockTask
    void addAppToRecent() -> addAppToRecent
    boolean isKioskModeActive() -> isKioskModeActive
    void onBackPressed() -> onBackPressed
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void removeAppFromRecent() -> removeAppFromRecent
    void setHideFromRecent(boolean) -> setHideFromRecent
    void unregisterRecentNavbarReceiver() -> unregisterRecentNavbarReceiver
    int Brightness() -> Brightness
    void PlayAudioPath(java.lang.String) -> PlayAudioPath
    java.lang.String AudioPathSource() -> AudioPathSource
    void SetAudioPathSource(java.lang.String) -> SetAudioPathSource
    boolean ShowUI() -> ShowUI
    void ShowUI(boolean) -> ShowUI
    int VolumeMusic() -> VolumeMusic
    int VolumeRing() -> VolumeRing
    int VolumeAlarm() -> VolumeAlarm
    int getVolume(int) -> c
    void VolumeMusic(int) -> VolumeMusic
    void VolumeRing(int) -> VolumeRing
    void VolumeAlarm(int) -> VolumeAlarm
    void setVolume(int,int) -> b
    java.lang.String RingtoneGet(java.lang.String) -> RingtoneGet
    void RingtonePlay(java.lang.String) -> RingtonePlay
    void RingtoneStop() -> RingtoneStop
    void setRingtone(java.lang.String) -> b
    java.lang.String BrightnessMode() -> BrightnessMode
    float FontScale() -> FontScale
    void lambda$Create$1(java.lang.String,android.widget.TextView,int,boolean) -> a
    void lambda$null$0(android.widget.TextView,int,boolean,android.graphics.Bitmap) -> b
    long access$000(com.bima.bimaaix.BimaAix) -> a
    void access$200(com.bima.bimaaix.BimaAix,java.lang.String,java.lang.String,boolean) -> a
    com.google.appinventor.components.runtime.Form access$300(com.bima.bimaaix.BimaAix) -> a
    android.app.DownloadManager access$400(com.bima.bimaaix.BimaAix) -> a
    boolean access$500(com.bima.bimaaix.BimaAix) -> a
    com.google.appinventor.components.runtime.Form access$600(com.bima.bimaaix.BimaAix) -> b
    boolean access$502(com.bima.bimaaix.BimaAix,boolean) -> a
    com.google.appinventor.components.runtime.Form access$700(com.bima.bimaaix.BimaAix) -> c
    int access$1000(com.bima.bimaaix.BimaAix,android.webkit.WebView) -> a
    boolean access$1100(com.bima.bimaaix.BimaAix) -> b
    com.bima.bimaaix.WView access$1200(com.bima.bimaaix.BimaAix) -> a
    int access$1300(com.bima.bimaaix.BimaAix,int) -> a
    boolean access$1400(com.bima.bimaaix.BimaAix) -> c
    boolean access$1500(com.bima.bimaaix.BimaAix) -> d
    boolean access$1600(com.bima.bimaaix.BimaAix,java.lang.String) -> a
    boolean access$1700(com.bima.bimaaix.BimaAix) -> e
    java.util.HashMap access$2200(com.bima.bimaaix.BimaAix) -> a
    boolean access$2300(com.bima.bimaaix.BimaAix) -> f
    boolean access$2302(com.bima.bimaaix.BimaAix,boolean) -> b
    android.webkit.SslErrorHandler access$2402(com.bima.bimaaix.BimaAix,android.webkit.SslErrorHandler) -> a
    android.os.Message access$2502(com.bima.bimaaix.BimaAix,android.os.Message) -> a
    android.os.Message access$2602(com.bima.bimaaix.BimaAix,android.os.Message) -> b
    android.webkit.HttpAuthHandler access$2702(com.bima.bimaaix.BimaAix,android.webkit.HttpAuthHandler) -> a
    com.google.appinventor.components.runtime.Form access$2800(com.bima.bimaaix.BimaAix) -> d
    boolean access$2900(com.bima.bimaaix.BimaAix) -> g
    android.webkit.GeolocationPermissions$Callback access$3002(com.bima.bimaaix.BimaAix,android.webkit.GeolocationPermissions$Callback) -> a
    java.lang.String access$3102(com.bima.bimaaix.BimaAix,java.lang.String) -> a
    android.app.Activity access$3200(com.bima.bimaaix.BimaAix) -> a
    android.webkit.ValueCallback access$3302(com.bima.bimaaix.BimaAix,android.webkit.ValueCallback) -> a
    android.os.Message access$3402(com.bima.bimaaix.BimaAix,android.os.Message) -> c
    android.webkit.PermissionRequest access$3502(com.bima.bimaaix.BimaAix,android.webkit.PermissionRequest) -> a
    android.webkit.JsPromptResult access$3602(com.bima.bimaaix.BimaAix,android.webkit.JsPromptResult) -> a
    android.webkit.JsResult access$3702(com.bima.bimaaix.BimaAix,android.webkit.JsResult) -> a
    android.webkit.JsResult access$3802(com.bima.bimaaix.BimaAix,android.webkit.JsResult) -> b
    android.webkit.PermissionRequest access$3500(com.bima.bimaaix.BimaAix) -> a
    java.lang.String access$3900(com.bima.bimaaix.BimaAix) -> a
    android.print.PrintJob access$4000(com.bima.bimaaix.BimaAix) -> a
    java.lang.String access$4100(com.bima.bimaaix.BimaAix) -> b
    android.widget.RelativeLayout access$4200(com.bima.bimaaix.BimaAix) -> a
    boolean access$4300() -> b
    android.view.WindowManager access$4400(com.bima.bimaaix.BimaAix) -> a
    boolean access$4302(boolean) -> b
    android.view.View access$4500(com.bima.bimaaix.BimaAix) -> a
    int access$4600(com.bima.bimaaix.BimaAix) -> a
    android.view.ViewGroup access$4700(com.bima.bimaaix.BimaAix) -> a
    android.widget.RelativeLayout access$4202(com.bima.bimaaix.BimaAix,android.widget.RelativeLayout) -> a
    android.view.WindowManager$LayoutParams access$4800(com.bima.bimaaix.BimaAix) -> a
    android.view.WindowManager access$4402(com.bima.bimaaix.BimaAix,android.view.WindowManager) -> a
    int access$4900(com.bima.bimaaix.BimaAix) -> b
    int access$5000(com.bima.bimaaix.BimaAix) -> c
    int access$5100(com.bima.bimaaix.BimaAix) -> d
    int access$5200(com.bima.bimaaix.BimaAix) -> e
    int access$4902(com.bima.bimaaix.BimaAix,int) -> b
    int access$5102(com.bima.bimaaix.BimaAix,int) -> c
    int access$5002(com.bima.bimaaix.BimaAix,int) -> d
    int access$5202(com.bima.bimaaix.BimaAix,int) -> e
    boolean access$5302(com.bima.bimaaix.BimaAix,boolean) -> c
    boolean access$5400(com.bima.bimaaix.BimaAix) -> h
    boolean access$5300(com.bima.bimaaix.BimaAix) -> i
    void access$5500(com.bima.bimaaix.BimaAix,android.content.Intent) -> a
    void <clinit>() -> <clinit>
com.bima.bimaaix.BimaAix$1 -> com.bima.bimaaix.a:
    com.bima.bimaaix.BimaAix this$0 -> a
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.bima.bimaaix.BimaAix$10 -> com.bima.bimaaix.b:
    com.bima.bimaaix.BimaAix this$0 -> b
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.bima.bimaaix.BimaAix$10$1 -> com.bima.bimaaix.c:
    com.bima.bimaaix.BimaAix$10 this$1 -> a
    void <init>(com.bima.bimaaix.BimaAix$10) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$11 -> com.bima.bimaaix.d:
    com.bima.bimaaix.BimaAix this$0 -> c
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$12 -> com.bima.bimaaix.e:
    java.lang.String val$url -> n
    com.bima.bimaaix.BimaAix this$0 -> d
    void <init>(com.bima.bimaaix.BimaAix,java.lang.String) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$12$1 -> com.bima.bimaaix.f:
    long[] val$size -> a
    com.bima.bimaaix.BimaAix$12 this$1 -> a
    void <init>(com.bima.bimaaix.BimaAix$12,long[]) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$13 -> com.bima.bimaaix.g:
    com.bima.bimaaix.BimaAix this$0 -> e
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$13$1 -> com.bima.bimaaix.h:
    int val$progress -> k
    com.bima.bimaaix.BimaAix$13 this$1 -> a
    void <init>(com.bima.bimaaix.BimaAix$13,int) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$13$2 -> com.bima.bimaaix.i:
    com.bima.bimaaix.BimaAix$13 this$1 -> b
    void <init>(com.bima.bimaaix.BimaAix$13) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$14 -> com.bima.bimaaix.j:
    android.webkit.WebView val$web -> a
    com.bima.bimaaix.BimaAix this$0 -> f
    void <init>(com.bima.bimaaix.BimaAix,android.webkit.WebView) -> <init>
    void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long) -> onDownloadStart
com.bima.bimaaix.BimaAix$15 -> com.bima.bimaaix.k:
    android.webkit.WebView val$web -> b
    com.bima.bimaaix.BimaAix this$0 -> g
    void <init>(com.bima.bimaaix.BimaAix,android.webkit.WebView) -> <init>
    void onFindResultReceived(int,int,boolean) -> onFindResultReceived
com.bima.bimaaix.BimaAix$16 -> com.bima.bimaaix.l:
    com.bima.bimaaix.BimaAix this$0 -> h
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.bima.bimaaix.BimaAix$17 -> com.bima.bimaaix.m:
    android.webkit.WebView val$web -> c
    com.bima.bimaaix.BimaAix this$0 -> i
    void <init>(com.bima.bimaaix.BimaAix,android.webkit.WebView) -> <init>
    boolean onLongClick(android.view.View) -> onLongClick
com.bima.bimaaix.BimaAix$18 -> com.bima.bimaaix.n:
    android.webkit.WebView val$web -> d
    com.bima.bimaaix.BimaAix this$0 -> j
    void <init>(com.bima.bimaaix.BimaAix,android.webkit.WebView) -> <init>
    void onScrollChange(android.view.View,int,int,int,int) -> onScrollChange
com.bima.bimaaix.BimaAix$19 -> com.bima.bimaaix.o:
    com.bima.bimaaix.BimaAix this$0 -> k
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onReceiveValue(java.lang.Boolean) -> a
    void onReceiveValue(java.lang.Object) -> onReceiveValue
com.bima.bimaaix.BimaAix$2 -> com.bima.bimaaix.p:
    java.lang.String val$directoryName -> o
    java.lang.String val$extension -> p
    boolean val$includeSubdirectories -> w
    com.bima.bimaaix.BimaAix this$0 -> l
    void <init>(com.bima.bimaaix.BimaAix,java.lang.String,java.lang.String,boolean) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$20 -> com.bima.bimaaix.q:
    com.bima.bimaaix.BimaAix this$0 -> m
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onReceiveValue(java.lang.String) -> c
    void onReceiveValue(java.lang.Object) -> onReceiveValue
com.bima.bimaaix.BimaAix$21 -> com.bima.bimaaix.r:
    com.bima.bimaaix.BimaAix this$0 -> n
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onReceiveValue(java.lang.String) -> c
    void onReceiveValue(java.lang.Object) -> onReceiveValue
com.bima.bimaaix.BimaAix$22 -> com.bima.bimaaix.s:
    int val$x -> l
    int val$y -> m
    com.bima.bimaaix.BimaAix this$0 -> o
    void <init>(com.bima.bimaaix.BimaAix,int,int) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$23 -> com.bima.bimaaix.t:
    java.lang.String val$permissions -> q
    com.bima.bimaaix.BimaAix this$0 -> p
    void <init>(com.bima.bimaaix.BimaAix,java.lang.String) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$24 -> com.bima.bimaaix.u:
    com.bima.bimaaix.BimaAix this$0 -> q
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$25 -> com.bima.bimaaix.v:
    com.bima.bimaaix.BimaAix this$0 -> r
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$26 -> com.bima.bimaaix.w:
    com.bima.bimaaix.BimaAix this$0 -> s
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$27 -> com.bima.bimaaix.x:
    com.bima.bimaaix.BimaAix this$0 -> t
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$28 -> com.bima.bimaaix.y:
    com.bima.bimaaix.BimaAix this$0 -> u
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$29 -> com.bima.bimaaix.z:
    com.bima.bimaaix.BimaAix this$0 -> v
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onClick(android.view.View) -> onClick
com.bima.bimaaix.BimaAix$3 -> com.bima.bimaaix.A:
    java.util.List val$result -> b
    com.bima.bimaaix.BimaAix this$0 -> w
    void <init>(com.bima.bimaaix.BimaAix,java.util.List) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$30 -> com.bima.bimaaix.B:
    com.bima.bimaaix.BimaAix this$0 -> x
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.bima.bimaaix.BimaAix$31 -> com.bima.bimaaix.C:
    com.bima.bimaaix.BimaAix this$0 -> y
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.bima.bimaaix.BimaAix$32 -> com.bima.bimaaix.D:
    com.bima.bimaaix.BimaAix this$0 -> z
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.bima.bimaaix.BimaAix$33 -> com.bima.bimaaix.E:
    com.bima.bimaaix.BimaAix this$0 -> A
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.bima.bimaaix.BimaAix$4 -> com.bima.bimaaix.F:
    java.lang.String val$completeFromFileName -> r
    java.lang.String val$completeToFileName -> s
    java.lang.Boolean val$copyFileFromAssetsResult -> a
    java.lang.String val$action -> t
    com.bima.bimaaix.BimaAix this$0 -> B
    void <init>(com.bima.bimaaix.BimaAix,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$5 -> com.bima.bimaaix.G:
    boolean val$successful -> x
    java.lang.String val$response -> u
    com.bima.bimaaix.BimaAix this$0 -> C
    void <init>(com.bima.bimaaix.BimaAix,boolean,java.lang.String) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$6 -> com.bima.bimaaix.H:
    boolean val$successful -> y
    java.lang.String val$response -> v
    com.bima.bimaaix.BimaAix this$0 -> D
    void <init>(com.bima.bimaaix.BimaAix,boolean,java.lang.String) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$7 -> com.bima.bimaaix.I:
    android.widget.TextView val$textView -> a
    com.bima.bimaaix.BimaAix this$0 -> E
    void <init>(com.bima.bimaaix.BimaAix,android.widget.TextView) -> <init>
    void onProgress(int) -> onProgress
    void onResponse(android.text.Spannable) -> onResponse
com.bima.bimaaix.BimaAix$8 -> com.bima.bimaaix.J:
    com.bima.bimaaix.BimaAix this$0 -> F
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.bima.bimaaix.BimaAix$8$1 -> com.bima.bimaaix.K:
    com.bima.bimaaix.BimaAix$8 this$1 -> a
    void <init>(com.bima.bimaaix.BimaAix$8) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$9 -> com.bima.bimaaix.L:
    com.bima.bimaaix.BimaAix this$0 -> G
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void run() -> run
com.bima.bimaaix.BimaAix$AdBlocker -> com.bima.bimaaix.M:
    com.bima.bimaaix.BimaAix this$0 -> H
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    java.lang.String getHost(java.lang.String) -> b
    boolean isAd(java.lang.String) -> b
    boolean isAdHost(java.lang.String) -> c
    android.webkit.WebResourceResponse createEmptyResource() -> a
    void <init>(com.bima.bimaaix.BimaAix,com.bima.bimaaix.BimaAix$1) -> <init>
    boolean access$1900(com.bima.bimaaix.BimaAix$AdBlocker,java.lang.String) -> a
    android.webkit.WebResourceResponse access$2000(com.bima.bimaaix.BimaAix$AdBlocker) -> a
    boolean access$2100(com.bima.bimaaix.BimaAix$AdBlocker,java.lang.String) -> b
com.bima.bimaaix.BimaAix$ChromeClient -> com.bima.bimaaix.N:
    android.view.View mCustomView -> b
    android.webkit.WebChromeClient$CustomViewCallback mCustomViewCallback -> a
    int mOriginalOrientation -> n
    int mOriginalSystemUiVisibility -> o
    int FULL_SCREEN_SETTING -> p
    com.bima.bimaaix.BimaAix this$0 -> I
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback) -> onGeolocationPermissionsShowPrompt
    void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback) -> onShowCustomView
    void updateControls() -> g
    void onHideCustomView() -> onHideCustomView
    boolean onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback,android.webkit.WebChromeClient$FileChooserParams) -> onShowFileChooser
    boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message) -> onCreateWindow
    void onCloseWindow(android.webkit.WebView) -> onCloseWindow
    void onProgressChanged(android.webkit.WebView,int) -> onProgressChanged
    boolean onConsoleMessage(android.webkit.ConsoleMessage) -> onConsoleMessage
    void onPermissionRequest(android.webkit.PermissionRequest) -> onPermissionRequest
    boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult) -> onJsPrompt
    boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsAlert
    boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsConfirm
    void <init>(com.bima.bimaaix.BimaAix,com.bima.bimaaix.BimaAix$1) -> <init>
com.bima.bimaaix.BimaAix$ChromeClient$1 -> com.bima.bimaaix.O:
    com.bima.bimaaix.BimaAix$ChromeClient this$1 -> a
    void <init>(com.bima.bimaaix.BimaAix$ChromeClient) -> <init>
    void onSystemUiVisibilityChange(int) -> onSystemUiVisibilityChange
com.bima.bimaaix.BimaAix$MyBroadcastReceiver -> com.bima.bimaaix.P:
    com.bima.bimaaix.BimaAix this$0 -> J
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.bima.bimaaix.BimaAix,com.bima.bimaaix.BimaAix$1) -> <init>
com.bima.bimaaix.BimaAix$PrintDocumentAdapterWrapper -> com.bima.bimaaix.BimaAix$PrintDocumentAdapterWrapper:
    android.print.PrintDocumentAdapter delegate -> a
    com.bima.bimaaix.BimaAix this$0 -> K
    void <init>(com.bima.bimaaix.BimaAix,android.print.PrintDocumentAdapter) -> <init>
    void onLayout(android.print.PrintAttributes,android.print.PrintAttributes,android.os.CancellationSignal,android.print.PrintDocumentAdapter$LayoutResultCallback,android.os.Bundle) -> onLayout
    void onWrite(android.print.PageRange[],android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter$WriteResultCallback) -> onWrite
    void onFinish() -> onFinish
com.bima.bimaaix.BimaAix$StorageUtil -> com.bima.bimaaix.BimaAix$StorageUtil:
    java.util.regex.Pattern DIR_SEPERATOR -> a
    com.bima.bimaaix.BimaAix this$0 -> L
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    java.lang.String[] getStorageDirectories(android.content.Context) -> getStorageDirectories
    java.lang.String[] getPhysicalPaths() -> a
com.bima.bimaaix.BimaAix$WebClient -> com.bima.bimaaix.Q:
    com.bima.bimaaix.BimaAix this$0 -> M
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest) -> shouldOverrideUrlLoading
    android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String) -> shouldInterceptRequest
    android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest) -> shouldInterceptRequest
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message) -> onFormResubmission
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse) -> onReceivedHttpError
    void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError) -> onReceivedError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String) -> onReceivedHttpAuthRequest
    android.webkit.WebResourceResponse handleAppRequest(java.lang.String) -> handleAppRequest
    void <init>(com.bima.bimaaix.BimaAix,com.bima.bimaaix.BimaAix$1) -> <init>
com.bima.bimaaix.BimaAix$WebViewInterface -> com.bima.bimaaix.BimaAix$WebViewInterface:
    java.lang.String webViewString -> w
    com.bima.bimaaix.BimaAix this$0 -> N
    void <init>(com.bima.bimaaix.BimaAix) -> <init>
    java.lang.String getWebViewString() -> getWebViewString
    void setWebViewString(java.lang.String) -> setWebViewString
    void setWebViewStringFromBlocks(java.lang.String) -> setWebViewStringFromBlocks
com.bima.bimaaix.BimaAix$WebViewInterface$1 -> com.bima.bimaaix.R:
    java.lang.String val$newString -> x
    com.bima.bimaaix.BimaAix$WebViewInterface this$1 -> b
    void <init>(com.bima.bimaaix.BimaAix$WebViewInterface,java.lang.String) -> <init>
    void run() -> run
com.bima.bimaaix.Img2Ascii -> com.bima.bimaaix.Img2Ascii:
    java.lang.String[] chars -> a
    android.graphics.Bitmap rgbImage -> a
    java.lang.Boolean color -> b
    int quality -> q
    int qualityColor -> r
    android.text.Spannable response -> a
    com.bima.bimaaix.Img2Ascii$Listener listener -> a
    void <init>() -> <init>
    com.bima.bimaaix.Img2Ascii bitmap(android.graphics.Bitmap) -> bitmap
    com.bima.bimaaix.Img2Ascii quality(int) -> quality
    com.bima.bimaaix.Img2Ascii color(java.lang.Boolean) -> color
    void convert(com.bima.bimaaix.Img2Ascii$Listener) -> convert
    java.lang.Boolean access$100(com.bima.bimaaix.Img2Ascii) -> a
    int access$202(com.bima.bimaaix.Img2Ascii,int) -> a
    int access$200(com.bima.bimaaix.Img2Ascii) -> a
    int access$300(com.bima.bimaaix.Img2Ascii) -> b
    android.graphics.Bitmap access$400(com.bima.bimaaix.Img2Ascii) -> a
    java.lang.String[] access$500(com.bima.bimaaix.Img2Ascii) -> a
    android.text.Spannable access$602(com.bima.bimaaix.Img2Ascii,android.text.Spannable) -> a
    com.bima.bimaaix.Img2Ascii$Listener access$700(com.bima.bimaaix.Img2Ascii) -> a
    android.text.Spannable access$600(com.bima.bimaaix.Img2Ascii) -> a
com.bima.bimaaix.Img2Ascii$1 -> com.bima.bimaaix.S:
com.bima.bimaaix.Img2Ascii$InstaApi -> com.bima.bimaaix.T:
    com.bima.bimaaix.Img2Ascii this$0 -> a
    void <init>(com.bima.bimaaix.Img2Ascii) -> <init>
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.String[]) -> a
    void onProgressUpdate(java.lang.Integer[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(com.bima.bimaaix.Img2Ascii,com.bima.bimaaix.Img2Ascii$1) -> <init>
com.bima.bimaaix.Img2Ascii$Listener -> com.bima.bimaaix.Img2Ascii$Listener:
    void onProgress(int) -> onProgress
    void onResponse(android.text.Spannable) -> onResponse
com.bima.bimaaix.Ori -> com.bima.bimaaix.Ori:
    void <init>() -> <init>
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
com.bima.bimaaix.WView -> com.bima.bimaaix.WView:
    android.view.GestureDetector gd -> a
    void <init>(int,android.content.Context,com.bima.bimaaix.WView$SwipeCallback) -> <init>
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.bima.bimaaix.WView$1 -> com.bima.bimaaix.U:
    com.bima.bimaaix.WView$SwipeCallback val$callback -> a
    int val$id -> s
    com.bima.bimaaix.WView this$0 -> b
    void <init>(com.bima.bimaaix.WView,com.bima.bimaaix.WView$SwipeCallback,int) -> <init>
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
com.bima.bimaaix.WView$SwipeCallback -> com.bima.bimaaix.WView$SwipeCallback:
    void onSwipe(int,int) -> onSwipe
com.bima.bimaaix.fixer -> com.bima.bimaaix.fixer:
    boolean check -> z
    void <init>() -> <init>
    void OriFix(android.content.Context) -> OriFix
    void <clinit>() -> <clinit>
com.bima.bimaaix.fixer$1 -> com.bima.bimaaix.V:
    void <init>() -> <init>
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityResumed(android.app.Activity) -> onActivityResumed
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivityStopped(android.app.Activity) -> onActivityStopped
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
com.google.appinventor.components.BuildConfig -> com.google.appinventor.components.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String LIBRARY_PACKAGE_NAME -> LIBRARY_PACKAGE_NAME
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    void <init>() -> <init>
com.google.appinventor.components.runtime.AccelerometerSensor -> com.google.appinventor.components.runtime.AccelerometerSensor:
    java.util.Queue X_CACHE -> a
    java.util.Queue Y_CACHE -> b
    java.util.Queue Z_CACHE -> c
    float xAccel -> c
    float yAccel -> d
    float zAccel -> e
    int accuracy -> t
    int sensitivity -> u
    int deviceDefaultOrientation -> v
    android.hardware.SensorManager sensorManager -> a
    android.view.WindowManager windowManager -> b
    android.content.res.Resources resources -> a
    boolean enabled -> enabled
    int minimumInterval -> w
    long timeLastShook -> b
    android.hardware.Sensor accelerometerSensor -> a
    boolean legacyMode -> A
    android.os.Handler androidUIHandler -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    int MinimumInterval() -> MinimumInterval
    void MinimumInterval(int) -> MinimumInterval
    int Sensitivity() -> Sensitivity
    void Sensitivity(int) -> Sensitivity
    void AccelerationChanged(float,float,float) -> AccelerationChanged
    int getDeviceDefaultOrientation() -> getDeviceDefaultOrientation
    void Shaking() -> Shaking
    boolean Available() -> Available
    boolean Enabled() -> Enabled
    void startListening() -> startListening
    void stopListening() -> stopListening
    void Enabled(boolean) -> Enabled
    float XAccel() -> XAccel
    float YAccel() -> YAccel
    float ZAccel() -> ZAccel
    void addToSensorCache(java.util.Queue,float) -> a
    boolean isShaking(java.util.Queue,float) -> a
    void LegacyMode(boolean) -> LegacyMode
    boolean LegacyMode() -> LegacyMode
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onResume() -> onResume
    void onPause() -> onPause
    void onDelete() -> onDelete
    int access$002(com.google.appinventor.components.runtime.AccelerometerSensor,int) -> a
    int access$000(com.google.appinventor.components.runtime.AccelerometerSensor) -> a
com.google.appinventor.components.runtime.AccelerometerSensor$1 -> com.google.appinventor.components.runtime.a:
    com.google.appinventor.components.runtime.AccelerometerSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.AccelerometerSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.ActivityResultListener -> com.google.appinventor.components.runtime.ActivityResultListener:
    void resultReturned(int,int,android.content.Intent) -> resultReturned
com.google.appinventor.components.runtime.ActivityStarter -> com.google.appinventor.components.runtime.ActivityStarter:
    java.lang.String action -> y
    java.lang.String dataUri -> z
    java.lang.String dataType -> A
    java.lang.String activityPackage -> B
    java.lang.String activityClass -> C
    java.lang.String extraKey -> D
    java.lang.String extraValue -> E
    java.lang.String resultName -> F
    android.content.Intent resultIntent -> a
    java.lang.String result -> G
    int requestCode -> requestCode
    com.google.appinventor.components.runtime.util.YailList extras -> a
    com.google.appinventor.components.runtime.ComponentContainer container -> b
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String Action() -> Action
    void Action(java.lang.String) -> Action
    java.lang.String ExtraKey() -> ExtraKey
    void ExtraKey(java.lang.String) -> ExtraKey
    java.lang.String ExtraValue() -> ExtraValue
    void ExtraValue(java.lang.String) -> ExtraValue
    java.lang.String ResultName() -> ResultName
    void ResultName(java.lang.String) -> ResultName
    java.lang.String Result() -> Result
    java.lang.String DataUri() -> DataUri
    void DataUri(java.lang.String) -> DataUri
    java.lang.String DataType() -> DataType
    void DataType(java.lang.String) -> DataType
    java.lang.String ActivityPackage() -> ActivityPackage
    void ActivityPackage(java.lang.String) -> ActivityPackage
    java.lang.String ActivityClass() -> ActivityClass
    void ActivityClass(java.lang.String) -> ActivityClass
    void AfterActivity(java.lang.String) -> AfterActivity
    void ActivityCanceled() -> ActivityCanceled
    java.lang.String ResultType() -> ResultType
    java.lang.String ResultUri() -> ResultUri
    void Extras(com.google.appinventor.components.runtime.util.YailList) -> Extras
    com.google.appinventor.components.runtime.util.YailList Extras() -> Extras
    java.lang.String ResolveActivity() -> ResolveActivity
    void StartActivity() -> StartActivity
    android.content.Intent buildActivityIntent() -> a
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void ActivityError(java.lang.String) -> ActivityError
    void onDelete() -> onDelete
com.google.appinventor.components.runtime.AlarmHandler -> com.google.appinventor.components.runtime.AlarmHandler:
    void alarm() -> alarm
com.google.appinventor.components.runtime.AndroidNonvisibleComponent -> com.google.appinventor.components.runtime.AndroidNonvisibleComponent:
    com.google.appinventor.components.runtime.Form form -> form
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    com.google.appinventor.components.runtime.HandlesEventDispatching getDispatchDelegate() -> getDispatchDelegate
com.google.appinventor.components.runtime.AndroidViewComponent -> com.google.appinventor.components.runtime.AndroidViewComponent:
    com.google.appinventor.components.runtime.ComponentContainer container -> container
    int percentWidthHolder -> x
    int percentHeightHolder -> y
    int lastSetWidth -> z
    int lastSetHeight -> A
    int column -> B
    int row -> C
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.view.View getView() -> getView
    boolean Visible() -> Visible
    void Visible(boolean) -> Visible
    int Width() -> Width
    void Width(int) -> Width
    void WidthPercent(int) -> WidthPercent
    void setLastWidth(int) -> setLastWidth
    int getSetWidth() -> getSetWidth
    void setLastHeight(int) -> setLastHeight
    int getSetHeight() -> getSetHeight
    void CopyWidth(com.google.appinventor.components.runtime.AndroidViewComponent) -> CopyWidth
    int Height() -> Height
    void Height(int) -> Height
    void HeightPercent(int) -> HeightPercent
    void CopyHeight(com.google.appinventor.components.runtime.AndroidViewComponent) -> CopyHeight
    int Column() -> Column
    void Column(int) -> Column
    int Row() -> Row
    void Row(int) -> Row
    com.google.appinventor.components.runtime.HandlesEventDispatching getDispatchDelegate() -> getDispatchDelegate
com.google.appinventor.components.runtime.AppInventorCompatActivity -> com.google.appinventor.components.runtime.AppInventorCompatActivity:
    java.lang.String LOG_TAG -> H
    int DEFAULT_PRIMARY_COLOR -> D
    boolean classicMode -> B
    boolean actionBarEnabled -> C
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme currentTheme -> a
    int primaryColor -> E
    androidx.appcompat.app.AppCompatDelegate appCompatDelegate -> a
    android.widget.LinearLayout frameWithTitle -> a
    android.widget.TextView titleBar -> b
    boolean didSetClassicModeFromYail -> D
    com.google.appinventor.components.runtime.util.theme.ThemeHelper themeHelper -> themeHelper
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    boolean isAppCompatMode() -> isAppCompatMode
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onPostResume() -> onPostResume
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    void onSupportActionModeStarted(androidx.appcompat.view.ActionMode) -> onSupportActionModeStarted
    void onSupportActionModeFinished(androidx.appcompat.view.ActionMode) -> onSupportActionModeFinished
    androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback) -> onWindowStartingSupportActionMode
    void setContentView(android.view.View) -> setContentView
    androidx.appcompat.app.ActionBar getSupportActionBar() -> getSupportActionBar
    boolean isEmulator() -> isEmulator
    boolean isActionBarEnabled() -> isActionBarEnabled
    void setActionBarEnabled(boolean) -> setActionBarEnabled
    boolean isClassicMode() -> isClassicMode
    void setClassicMode(boolean) -> setClassicMode
    int getPrimaryColor() -> getPrimaryColor
    void setPrimaryColor(int) -> setPrimaryColor
    boolean isRepl() -> isRepl
    void hideTitleBar() -> hideTitleBar
    void maybeShowTitleBar() -> maybeShowTitleBar
    void styleTitleBar() -> styleTitleBar
    void setAppInventorTheme(com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme) -> setAppInventorTheme
    void applyTheme() -> h
    boolean shouldCreateTitleBar() -> c
    void setClassicModeFromYail(boolean) -> setClassicModeFromYail
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.AppInventorCompatActivity$1 -> com.google.appinventor.components.runtime.b:
    int[] $SwitchMap$com$google$appinventor$components$runtime$AppInventorCompatActivity$Theme -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme -> com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme:
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme PACKAGED -> PACKAGED
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme CLASSIC -> CLASSIC
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme DEVICE_DEFAULT -> DEVICE_DEFAULT
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme BLACK_TITLE_TEXT -> BLACK_TITLE_TEXT
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme DARK -> DARK
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme[] $VALUES -> a
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme[] values() -> values
    com.google.appinventor.components.runtime.AppInventorCompatActivity$Theme valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Ball -> com.google.appinventor.components.runtime.Ball:
    int radius -> F
    int paintColor -> G
    android.graphics.Paint paint -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onDraw(android.graphics.Canvas) -> onDraw
    int Height() -> Height
    void Height(int) -> Height
    void HeightPercent(int) -> HeightPercent
    int Width() -> Width
    void Width(int) -> Width
    void WidthPercent(int) -> WidthPercent
    boolean containsPoint(double,double) -> containsPoint
    void Radius(int) -> Radius
    int Radius() -> Radius
    int PaintColor() -> PaintColor
    void PaintColor(int) -> PaintColor
    void OriginAtCenter(boolean) -> OriginAtCenter
    double X() -> X
    double Y() -> Y
    void MoveTo(double,double) -> MoveTo
com.google.appinventor.components.runtime.BarcodeScanner -> com.google.appinventor.components.runtime.BarcodeScanner:
    java.lang.String result -> G
    boolean useExternalScanner -> E
    com.google.appinventor.components.runtime.ComponentContainer container -> c
    boolean havePermission -> F
    int requestCode -> requestCode
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String Result() -> Result
    void DoScan() -> DoScan
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void AfterScan(java.lang.String) -> AfterScan
    boolean UseExternalScanner() -> UseExternalScanner
    void UseExternalScanner(boolean) -> UseExternalScanner
    boolean access$002(com.google.appinventor.components.runtime.BarcodeScanner,boolean) -> a
com.google.appinventor.components.runtime.BarcodeScanner$1 -> com.google.appinventor.components.runtime.c:
    com.google.appinventor.components.runtime.BarcodeScanner this$0 -> a
    void <init>(com.google.appinventor.components.runtime.BarcodeScanner) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Barometer -> com.google.appinventor.components.runtime.Barometer:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onValueChanged(float) -> onValueChanged
    void AirPressureChanged(float) -> AirPressureChanged
    float AirPressure() -> AirPressure
com.google.appinventor.components.runtime.BluetoothClient -> com.google.appinventor.components.runtime.BluetoothClient:
    java.util.List attachedComponents -> c
    java.util.Set acceptableDeviceClasses -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean DisconnectOnError() -> DisconnectOnError
    void DisconnectOnError(boolean) -> DisconnectOnError
    boolean attachComponent(com.google.appinventor.components.runtime.Component,java.util.Set) -> a
    void detachComponent(com.google.appinventor.components.runtime.Component) -> a
    boolean IsDevicePaired(java.lang.String) -> IsDevicePaired
    java.util.List AddressesAndNames() -> AddressesAndNames
    boolean isDeviceClassAcceptable(java.lang.Object) -> a
    boolean Connect(java.lang.String) -> Connect
    boolean ConnectWithUUID(java.lang.String,java.lang.String) -> ConnectWithUUID
    boolean connect(java.lang.String,java.lang.String,java.lang.String) -> a
    void connect(java.lang.Object,java.util.UUID) -> a
com.google.appinventor.components.runtime.BluetoothConnectionBase -> com.google.appinventor.components.runtime.BluetoothConnectionBase:
    java.lang.String logTag -> logTag
    java.util.List bluetoothConnectionListeners -> d
    java.nio.ByteOrder byteOrder -> a
    java.lang.String encoding -> I
    byte delimiter -> a
    boolean disconnectOnError -> disconnectOnError
    boolean secure -> secure
    java.lang.Object connectedBluetoothSocket -> a
    java.io.InputStream inputStream -> a
    java.io.OutputStream outputStream -> a
    int sdkLevel -> H
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,java.lang.String) -> <init>
    void <init>(com.google.appinventor.components.runtime.Form,java.lang.String,int) -> <init>
    void <init>(java.io.OutputStream,java.io.InputStream) -> <init>
    void addBluetoothConnectionListener(com.google.appinventor.components.runtime.BluetoothConnectionListener) -> a
    void removeBluetoothConnectionListener(com.google.appinventor.components.runtime.BluetoothConnectionListener) -> b
    void fireAfterConnectEvent() -> i
    void fireBeforeDisconnectEvent() -> j
    void Initialize() -> Initialize
    void BluetoothError(java.lang.String,java.lang.String) -> BluetoothError
    void bluetoothError(java.lang.String,int,java.lang.Object[]) -> bluetoothError
    boolean Available() -> Available
    boolean Enabled() -> Enabled
    void setConnection(java.lang.Object) -> setConnection
    void Disconnect() -> Disconnect
    boolean IsConnected() -> IsConnected
    boolean DisconnectOnError() -> DisconnectOnError
    boolean Secure() -> Secure
    void Secure(boolean) -> Secure
    boolean HighByteFirst() -> HighByteFirst
    void HighByteFirst(boolean) -> HighByteFirst
    void CharacterEncoding(java.lang.String) -> CharacterEncoding
    java.lang.String CharacterEncoding() -> CharacterEncoding
    void DelimiterByte(int) -> DelimiterByte
    int DelimiterByte() -> DelimiterByte
    void SendText(java.lang.String) -> SendText
    void Send1ByteNumber(java.lang.String) -> Send1ByteNumber
    void Send2ByteNumber(java.lang.String) -> Send2ByteNumber
    void Send4ByteNumber(java.lang.String) -> Send4ByteNumber
    void SendBytes(com.google.appinventor.components.runtime.util.YailList) -> SendBytes
    void write(java.lang.String,byte) -> write
    void write(java.lang.String,byte[]) -> write
    int BytesAvailableToReceive() -> BytesAvailableToReceive
    java.lang.String ReceiveText(int) -> ReceiveText
    int ReceiveSigned1ByteNumber() -> ReceiveSigned1ByteNumber
    int ReceiveUnsigned1ByteNumber() -> ReceiveUnsigned1ByteNumber
    int ReceiveSigned2ByteNumber() -> ReceiveSigned2ByteNumber
    int ReceiveUnsigned2ByteNumber() -> ReceiveUnsigned2ByteNumber
    long ReceiveSigned4ByteNumber() -> ReceiveSigned4ByteNumber
    long ReceiveUnsigned4ByteNumber() -> ReceiveUnsigned4ByteNumber
    java.util.List ReceiveSignedBytes(int) -> ReceiveSignedBytes
    java.util.List ReceiveUnsignedBytes(int) -> ReceiveUnsignedBytes
    byte[] read(java.lang.String,int) -> read
    void onDestroy() -> onDestroy
    void onDelete() -> onDelete
    void prepareToDie() -> k
com.google.appinventor.components.runtime.BluetoothConnectionListener -> com.google.appinventor.components.runtime.d:
    void afterConnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> afterConnect
    void beforeDisconnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> beforeDisconnect
com.google.appinventor.components.runtime.BluetoothServer -> com.google.appinventor.components.runtime.BluetoothServer:
    android.os.Handler androidUIHandler -> b
    java.util.concurrent.atomic.AtomicReference arBluetoothServerSocket -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void AcceptConnection(java.lang.String) -> AcceptConnection
    void AcceptConnectionWithUUID(java.lang.String,java.lang.String) -> AcceptConnectionWithUUID
    void accept(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean IsAccepting() -> IsAccepting
    void StopAccepting() -> StopAccepting
    void ConnectionAccepted() -> ConnectionAccepted
    java.util.concurrent.atomic.AtomicReference access$000(com.google.appinventor.components.runtime.BluetoothServer) -> a
    android.os.Handler access$100(com.google.appinventor.components.runtime.BluetoothServer) -> a
com.google.appinventor.components.runtime.BluetoothServer$1 -> com.google.appinventor.components.runtime.e:
    java.lang.String val$functionName -> J
    com.google.appinventor.components.runtime.BluetoothServer this$0 -> a
    void <init>(com.google.appinventor.components.runtime.BluetoothServer,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.BluetoothServer$1$1 -> com.google.appinventor.components.runtime.f:
    com.google.appinventor.components.runtime.BluetoothServer$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.BluetoothServer$1) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.BluetoothServer$1$2 -> com.google.appinventor.components.runtime.g:
    java.lang.Object val$bluetoothSocket -> b
    com.google.appinventor.components.runtime.BluetoothServer$1 this$1 -> b
    void <init>(com.google.appinventor.components.runtime.BluetoothServer$1,java.lang.Object) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.BufferedSingleValueSensor -> com.google.appinventor.components.runtime.BufferedSingleValueSensor:
    com.google.appinventor.components.runtime.BufferedSingleValueSensor$AveragingBuffer buffer -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,int,int) -> <init>
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    float getAverageValue() -> getAverageValue
com.google.appinventor.components.runtime.BufferedSingleValueSensor$1 -> com.google.appinventor.components.runtime.h:
com.google.appinventor.components.runtime.BufferedSingleValueSensor$AveragingBuffer -> com.google.appinventor.components.runtime.i:
    java.lang.Float[] data -> a
    int next -> I
    com.google.appinventor.components.runtime.BufferedSingleValueSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.BufferedSingleValueSensor,int) -> <init>
    void insert(java.lang.Float) -> a
    float getAverage() -> a
    void <init>(com.google.appinventor.components.runtime.BufferedSingleValueSensor,int,com.google.appinventor.components.runtime.BufferedSingleValueSensor$1) -> <init>
    void access$100(com.google.appinventor.components.runtime.BufferedSingleValueSensor$AveragingBuffer,java.lang.Float) -> a
    float access$200(com.google.appinventor.components.runtime.BufferedSingleValueSensor$AveragingBuffer) -> a
com.google.appinventor.components.runtime.Button -> com.google.appinventor.components.runtime.Button:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void click() -> click
    void Click() -> Click
    boolean longClick() -> longClick
    boolean LongClick() -> LongClick
com.google.appinventor.components.runtime.ButtonBase -> com.google.appinventor.components.runtime.ButtonBase:
    android.widget.Button view -> a
    float[] ROUNDED_CORNERS_ARRAY -> a
    int textAlignment -> J
    int backgroundColor -> K
    int fontTypeface -> L
    boolean bold -> G
    boolean showFeedback -> H
    boolean italic -> I
    int textColor -> M
    int shape -> N
    java.lang.String imagePath -> K
    android.graphics.drawable.Drawable defaultButtonDrawable -> a
    android.graphics.drawable.Drawable myBackgroundDrawable -> b
    android.content.res.ColorStateList defaultColorStateList -> a
    android.graphics.drawable.Drawable backgroundImageDrawable -> c
    int defaultButtonMinWidth -> O
    int defaultButtonMinHeight -> P
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    android.view.View getView() -> getView
    void TouchDown() -> TouchDown
    void TouchUp() -> TouchUp
    void GotFocus() -> GotFocus
    void LostFocus() -> LostFocus
    int TextAlignment() -> TextAlignment
    void TextAlignment(int) -> TextAlignment
    int Shape() -> Shape
    void Shape(int) -> Shape
    java.lang.String Image() -> Image
    void Image(java.lang.String) -> Image
    int BackgroundColor() -> BackgroundColor
    void BackgroundColor(int) -> BackgroundColor
    void updateAppearance() -> l
    android.graphics.drawable.Drawable getSafeBackgroundDrawable() -> a
    android.content.res.ColorStateList createRippleState() -> a
    void setShape() -> m
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    boolean FontBold() -> FontBold
    void FontBold(boolean) -> FontBold
    void ShowFeedback(boolean) -> ShowFeedback
    boolean ShowFeedback() -> ShowFeedback
    boolean FontItalic() -> FontItalic
    void FontItalic(boolean) -> FontItalic
    float FontSize() -> FontSize
    void FontSize(float) -> FontSize
    int FontTypeface() -> FontTypeface
    void FontTypeface(int) -> FontTypeface
    java.lang.String Text() -> Text
    void Text(java.lang.String) -> Text
    int TextColor() -> TextColor
    void TextColor(int) -> TextColor
    void click() -> click
    boolean longClick() -> longClick
    void onClick(android.view.View) -> onClick
    void onFocusChange(android.view.View,boolean) -> onFocusChange
    boolean onLongClick(android.view.View) -> onLongClick
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Camcorder -> com.google.appinventor.components.runtime.Camcorder:
    com.google.appinventor.components.runtime.ComponentContainer container -> d
    int requestCode -> requestCode
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void RecordVideo() -> RecordVideo
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void AfterRecording(java.lang.String) -> AfterRecording
    boolean access$002(com.google.appinventor.components.runtime.Camcorder,boolean) -> a
com.google.appinventor.components.runtime.Camcorder$1 -> com.google.appinventor.components.runtime.j:
    com.google.appinventor.components.runtime.Camcorder val$me -> a
    com.google.appinventor.components.runtime.Camcorder this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Camcorder,com.google.appinventor.components.runtime.Camcorder) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Camcorder$1$1 -> com.google.appinventor.components.runtime.k:
    com.google.appinventor.components.runtime.Camcorder$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Camcorder$1) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Camera -> com.google.appinventor.components.runtime.Camera:
    com.google.appinventor.components.runtime.ComponentContainer container -> e
    android.net.Uri imageFile -> a
    int requestCode -> requestCode
    boolean useFront -> J
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean UseFront() -> UseFront
    void UseFront(boolean) -> UseFront
    void TakePicture() -> TakePicture
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void scanFileToAdd(java.io.File) -> a
    void deleteFile(android.net.Uri) -> a
    void AfterPicture(java.lang.String) -> AfterPicture
    boolean access$002(com.google.appinventor.components.runtime.Camera,boolean) -> a
com.google.appinventor.components.runtime.Camera$1 -> com.google.appinventor.components.runtime.l:
    com.google.appinventor.components.runtime.Camera val$me -> a
    com.google.appinventor.components.runtime.Camera this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Camera,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[],com.google.appinventor.components.runtime.Camera) -> <init>
    void onGranted() -> onGranted
com.google.appinventor.components.runtime.Canvas -> com.google.appinventor.components.runtime.Canvas:
    android.app.Activity context -> b
    com.google.appinventor.components.runtime.Canvas$CanvasView view -> a
    boolean drawn -> K
    int paintColor -> G
    android.graphics.Paint paint -> b
    int backgroundColor -> K
    java.lang.String backgroundImagePath -> L
    int textAlignment -> J
    boolean extendMovesOutsideCanvas -> L
    java.util.List sprites -> e
    com.google.appinventor.components.runtime.Canvas$MotionEventParser motionEventParser -> a
    android.view.GestureDetector mGestureDetector -> b
    java.util.Set extensionGestureDetectors -> b
    com.google.appinventor.components.runtime.Form form -> form
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Initialize() -> Initialize
    android.view.View getView() -> getView
    android.app.Activity getContext() -> getContext
    void registerCustomGestureDetector(com.google.appinventor.components.runtime.Canvas$ExtensionGestureDetector) -> registerCustomGestureDetector
    void removeCustomGestureDetector(java.lang.Object) -> removeCustomGestureDetector
    boolean ready() -> ready
    void addSprite(com.google.appinventor.components.runtime.Sprite) -> a
    void removeSprite(com.google.appinventor.components.runtime.Sprite) -> b
    void changeSpriteLayer(com.google.appinventor.components.runtime.Sprite) -> c
    android.app.Activity $context() -> $context
    com.google.appinventor.components.runtime.Form $form() -> $form
    void $add(com.google.appinventor.components.runtime.AndroidViewComponent) -> $add
    void setChildWidth(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildWidth
    void setChildHeight(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildHeight
    void registerChange(com.google.appinventor.components.runtime.Sprite) -> d
    void findSpriteCollisions(com.google.appinventor.components.runtime.Sprite) -> findSpriteCollisions
    void Width(int) -> Width
    void Height(int) -> Height
    int BackgroundColor() -> BackgroundColor
    void BackgroundColor(int) -> BackgroundColor
    java.lang.String BackgroundImage() -> BackgroundImage
    void BackgroundImage(java.lang.String) -> BackgroundImage
    void BackgroundImageinBase64(java.lang.String) -> BackgroundImageinBase64
    int PaintColor() -> PaintColor
    void PaintColor(int) -> PaintColor
    void changePaint(android.graphics.Paint,int) -> changePaint
    float FontSize() -> FontSize
    void FontSize(float) -> FontSize
    float LineWidth() -> LineWidth
    void LineWidth(float) -> LineWidth
    int TextAlignment() -> TextAlignment
    void TextAlignment(int) -> TextAlignment
    boolean ExtendMovesOutsideCanvas() -> ExtendMovesOutsideCanvas
    void ExtendMovesOutsideCanvas(boolean) -> ExtendMovesOutsideCanvas
    void Touched(float,float,boolean) -> Touched
    void TouchDown(float,float) -> TouchDown
    void TouchUp(float,float) -> TouchUp
    void Flung(float,float,float,float,float,float,boolean) -> Flung
    void Dragged(float,float,float,float,float,float,boolean) -> Dragged
    void Clear() -> Clear
    void DrawPoint(int,int) -> DrawPoint
    void DrawCircle(int,int,float,boolean) -> DrawCircle
    void DrawLine(int,int,int,int) -> DrawLine
    void DrawShape(com.google.appinventor.components.runtime.util.YailList,boolean) -> DrawShape
    android.graphics.Path parsePath(float[][]) -> a
    float[][] parsePointList(com.google.appinventor.components.runtime.util.YailList) -> a
    void DrawArc(int,int,int,int,float,float,boolean,boolean) -> DrawArc
    void DrawText(java.lang.String,int,int) -> DrawText
    void DrawTextAtAngle(java.lang.String,int,int,float) -> DrawTextAtAngle
    int GetBackgroundPixelColor(int,int) -> GetBackgroundPixelColor
    void SetBackgroundPixelColor(int,int,int) -> SetBackgroundPixelColor
    int GetPixelColor(int,int) -> GetPixelColor
    java.lang.String Save() -> Save
    java.lang.String SaveAs(java.lang.String) -> SaveAs
    java.lang.String saveFile(java.io.File,android.graphics.Bitmap$CompressFormat,java.lang.String) -> a
    java.util.List access$000(com.google.appinventor.components.runtime.Canvas) -> a
    boolean access$100(com.google.appinventor.components.runtime.Canvas) -> a
    boolean access$202(com.google.appinventor.components.runtime.Canvas,boolean) -> a
    com.google.appinventor.components.runtime.Canvas$MotionEventParser access$300(com.google.appinventor.components.runtime.Canvas) -> a
    android.view.GestureDetector access$400(com.google.appinventor.components.runtime.Canvas) -> a
    java.util.Set access$500(com.google.appinventor.components.runtime.Canvas) -> a
    java.lang.String access$602(com.google.appinventor.components.runtime.Canvas,java.lang.String) -> a
    java.lang.String access$600(com.google.appinventor.components.runtime.Canvas) -> a
    int access$700(com.google.appinventor.components.runtime.Canvas) -> a
    int access$702(com.google.appinventor.components.runtime.Canvas,int) -> a
    android.graphics.Paint access$800(com.google.appinventor.components.runtime.Canvas) -> a
    boolean access$902(com.google.appinventor.components.runtime.Canvas,boolean) -> b
com.google.appinventor.components.runtime.Canvas$1 -> com.google.appinventor.components.runtime.m:
    com.google.appinventor.components.runtime.Canvas val$me -> a
    com.google.appinventor.components.runtime.Canvas this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Canvas,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[],com.google.appinventor.components.runtime.Canvas) -> <init>
    void onGranted() -> onGranted
com.google.appinventor.components.runtime.Canvas$CanvasView -> com.google.appinventor.components.runtime.n:
    android.graphics.Canvas canvas -> a
    android.graphics.Bitmap bitmap -> b
    android.graphics.drawable.BitmapDrawable backgroundDrawable -> a
    android.graphics.Bitmap scaledBackgroundBitmap -> c
    android.graphics.Bitmap completeCache -> d
    com.google.appinventor.components.runtime.Canvas this$0 -> c
    void <init>(com.google.appinventor.components.runtime.Canvas,android.content.Context) -> <init>
    android.graphics.Bitmap buildCache() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onMeasure(int,int) -> onMeasure
    int getSize(int,int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setBackgroundImage(java.lang.String) -> d
    void setBackgroundImageBase64(java.lang.String) -> e
    void setBackground() -> n
    void clearDrawingLayer() -> o
    void setBackgroundColor(int) -> setBackgroundColor
    void drawTextAtAngle(java.lang.String,int,int,float) -> a
    int getBackgroundPixelColor(int,int) -> b
    int getPixelColor(int,int) -> c
    void access$1000(com.google.appinventor.components.runtime.Canvas$CanvasView) -> a
    android.graphics.Canvas access$1100(com.google.appinventor.components.runtime.Canvas$CanvasView) -> a
    void access$1200(com.google.appinventor.components.runtime.Canvas$CanvasView,java.lang.String,int,int,float) -> a
    int access$1300(com.google.appinventor.components.runtime.Canvas$CanvasView,int,int) -> a
    int access$1400(com.google.appinventor.components.runtime.Canvas$CanvasView,int,int) -> b
    android.graphics.Bitmap access$1500(com.google.appinventor.components.runtime.Canvas$CanvasView) -> a
    android.graphics.Bitmap access$1600(com.google.appinventor.components.runtime.Canvas$CanvasView) -> b
com.google.appinventor.components.runtime.Canvas$ExtensionGestureDetector -> com.google.appinventor.components.runtime.Canvas$ExtensionGestureDetector:
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.google.appinventor.components.runtime.Canvas$FlingGestureListener -> com.google.appinventor.components.runtime.o:
    com.google.appinventor.components.runtime.Canvas this$0 -> d
    void <init>(com.google.appinventor.components.runtime.Canvas) -> <init>
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.google.appinventor.components.runtime.Canvas$MotionEventParser -> com.google.appinventor.components.runtime.p:
    java.util.List draggedSprites -> f
    float startX -> f
    float startY -> g
    float lastX -> h
    float lastY -> i
    boolean isDrag -> M
    boolean drag -> N
    com.google.appinventor.components.runtime.Canvas this$0 -> e
    void <init>(com.google.appinventor.components.runtime.Canvas) -> <init>
    void parse(android.view.MotionEvent) -> a
com.google.appinventor.components.runtime.CheckBox -> com.google.appinventor.components.runtime.CheckBox:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean Checked() -> Checked
    void Checked(boolean) -> Checked
com.google.appinventor.components.runtime.Circle -> com.google.appinventor.components.runtime.Circle:
    org.osmdroid.util.GeoPoint center -> a
    double latitude -> a
    double longitude -> b
    double radius -> c
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor distanceComputation -> a
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> <init>
    java.lang.String Type() -> Type
    void Radius(double) -> Radius
    double Radius() -> Radius
    void Latitude(double) -> Latitude
    double Latitude() -> Latitude
    void Longitude(double) -> Longitude
    double Longitude() -> Longitude
    void SetLocation(double,double) -> SetLocation
    java.lang.Object accept(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor,java.lang.Object[]) -> accept
    org.locationtech.jts.geom.Geometry computeGeometry() -> computeGeometry
    void updateCenter(double,double) -> updateCenter
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Circle$1 -> com.google.appinventor.components.runtime.q:
    void <init>() -> <init>
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.Clock -> com.google.appinventor.components.runtime.Clock:
    com.google.appinventor.components.runtime.util.TimerInternal timerInternal -> a
    boolean timerAlwaysFires -> O
    boolean onScreen -> P
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void <init>() -> <init>
    void Timer() -> Timer
    int TimerInterval() -> TimerInterval
    void TimerInterval(int) -> TimerInterval
    boolean TimerEnabled() -> TimerEnabled
    void TimerEnabled(boolean) -> TimerEnabled
    boolean TimerAlwaysFires() -> TimerAlwaysFires
    void TimerAlwaysFires(boolean) -> TimerAlwaysFires
    void alarm() -> alarm
    long SystemTime() -> SystemTime
    java.util.Calendar Now() -> Now
    java.util.Calendar MakeInstant(java.lang.String) -> MakeInstant
    java.util.Calendar MakeDate(int,int,int) -> MakeDate
    java.util.Calendar MakeTime(int,int,int) -> MakeTime
    java.util.Calendar MakeInstantFromParts(int,int,int,int,int,int) -> MakeInstantFromParts
    java.util.Calendar MakeInstantFromMillis(long) -> MakeInstantFromMillis
    long GetMillis(java.util.Calendar) -> GetMillis
    java.util.Calendar AddDuration(java.util.Calendar,long) -> AddDuration
    java.util.Calendar AddSeconds(java.util.Calendar,int) -> AddSeconds
    java.util.Calendar AddMinutes(java.util.Calendar,int) -> AddMinutes
    java.util.Calendar AddHours(java.util.Calendar,int) -> AddHours
    java.util.Calendar AddDays(java.util.Calendar,int) -> AddDays
    java.util.Calendar AddWeeks(java.util.Calendar,int) -> AddWeeks
    java.util.Calendar AddMonths(java.util.Calendar,int) -> AddMonths
    java.util.Calendar AddYears(java.util.Calendar,int) -> AddYears
    long Duration(java.util.Calendar,java.util.Calendar) -> Duration
    long DurationToSeconds(long) -> DurationToSeconds
    long DurationToMinutes(long) -> DurationToMinutes
    long DurationToHours(long) -> DurationToHours
    long DurationToDays(long) -> DurationToDays
    long DurationToWeeks(long) -> DurationToWeeks
    int Second(java.util.Calendar) -> Second
    int Minute(java.util.Calendar) -> Minute
    int Hour(java.util.Calendar) -> Hour
    int DayOfMonth(java.util.Calendar) -> DayOfMonth
    int Weekday(java.util.Calendar) -> Weekday
    java.lang.String WeekdayName(java.util.Calendar) -> WeekdayName
    int Month(java.util.Calendar) -> Month
    java.lang.String MonthName(java.util.Calendar) -> MonthName
    int Year(java.util.Calendar) -> Year
    java.lang.String FormatDateTime(java.util.Calendar,java.lang.String) -> FormatDateTime
    java.lang.String FormatDate(java.util.Calendar,java.lang.String) -> FormatDate
    java.lang.String FormatTime(java.util.Calendar) -> FormatTime
    void onStop() -> onStop
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onDelete() -> onDelete
com.google.appinventor.components.runtime.CloudDB -> com.google.appinventor.components.runtime.CloudDB:
    boolean importProject -> Q
    java.lang.String projectID -> M
    java.lang.String token -> N
    boolean isPublic -> R
    boolean dead -> S
    java.lang.String defaultRedisServer -> O
    boolean useDefault -> T
    android.os.Handler androidUIHandler -> a
    android.app.Activity activity -> c
    redis.clients.jedis.Jedis INSTANCE -> a
    java.lang.String redisServer -> P
    int redisPort -> Q
    boolean useSSL -> U
    boolean shutdown -> V
    javax.net.ssl.SSLSocketFactory SslSockFactory -> a
    com.google.appinventor.components.runtime.util.CloudDBJedisListener currentListener -> a
    boolean listenerRunning -> W
    java.util.concurrent.ExecutorService background -> a
    java.util.List storeQueue -> g
    android.net.ConnectivityManager cm -> a
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Initialize() -> Initialize
    void stopListener() -> p
    void onClear() -> onClear
    void onDestroy() -> onDestroy
    void startListener() -> q
    void RedisServer(java.lang.String) -> RedisServer
    java.lang.String RedisServer() -> RedisServer
    void DefaultRedisServer(java.lang.String) -> DefaultRedisServer
    void RedisPort(int) -> RedisPort
    int RedisPort() -> RedisPort
    java.lang.String ProjectID() -> ProjectID
    void ProjectID(java.lang.String) -> ProjectID
    void Token(java.lang.String) -> Token
    java.lang.String Token() -> Token
    void UseSSL(boolean) -> UseSSL
    boolean UseSSL() -> UseSSL
    void StoreValue(java.lang.String,java.lang.Object) -> StoreValue
    void GetValue(java.lang.String,java.lang.Object) -> GetValue
    boolean CloudConnected() -> CloudConnected
    void FirstRemoved(java.lang.Object) -> FirstRemoved
    void RemoveFirstFromList(java.lang.String) -> RemoveFirstFromList
    void AppendValueToList(java.lang.String,java.lang.Object) -> AppendValueToList
    void GotValue(java.lang.String,java.lang.Object) -> GotValue
    void ClearTag(java.lang.String) -> ClearTag
    void GetTagList() -> GetTagList
    void TagList(java.util.List) -> TagList
    void DataChanged(java.lang.String,java.lang.Object) -> DataChanged
    void CloudDBError(java.lang.String) -> CloudDBError
    void checkProjectIDNotBlank() -> r
    com.google.appinventor.components.runtime.Form getForm() -> getForm
    redis.clients.jedis.Jedis getJedis(boolean) -> getJedis
    redis.clients.jedis.Jedis getJedis() -> getJedis
    void flushJedis(boolean) -> a
    com.google.appinventor.components.runtime.util.YailList readFile(java.lang.String) -> a
    java.lang.String getFileExtension(java.lang.String) -> c
    java.util.concurrent.ExecutorService getBackground() -> getBackground
    java.lang.Object jEval(java.lang.String,java.lang.String,int,java.lang.String[]) -> jEval
    void ensureSslSockFactory() -> s
    java.security.cert.X509Certificate[] getSystemCertificates() -> a
    com.google.appinventor.components.runtime.util.CloudDBJedisListener access$002(com.google.appinventor.components.runtime.CloudDB,com.google.appinventor.components.runtime.util.CloudDBJedisListener) -> a
    com.google.appinventor.components.runtime.util.CloudDBJedisListener access$000(com.google.appinventor.components.runtime.CloudDB) -> a
    java.lang.String access$100(com.google.appinventor.components.runtime.CloudDB) -> a
    boolean access$202(com.google.appinventor.components.runtime.CloudDB,boolean) -> a
    boolean access$300(com.google.appinventor.components.runtime.CloudDB) -> a
    boolean access$400(com.google.appinventor.components.runtime.CloudDB) -> b
    void access$500(com.google.appinventor.components.runtime.CloudDB) -> a
    boolean access$602(com.google.appinventor.components.runtime.CloudDB,boolean) -> b
    java.util.List access$700(com.google.appinventor.components.runtime.CloudDB) -> a
    void access$800(com.google.appinventor.components.runtime.CloudDB,boolean) -> a
    android.os.Handler access$900(com.google.appinventor.components.runtime.CloudDB) -> a
    java.util.concurrent.ExecutorService access$1000(com.google.appinventor.components.runtime.CloudDB) -> a
    java.util.concurrent.ExecutorService access$1002(com.google.appinventor.components.runtime.CloudDB,java.util.concurrent.ExecutorService) -> a
com.google.appinventor.components.runtime.CloudDB$1 -> com.google.appinventor.components.runtime.r:
    com.google.appinventor.components.runtime.CloudDB this$0 -> a
    void <init>(com.google.appinventor.components.runtime.CloudDB) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$10 -> com.google.appinventor.components.runtime.s:
    com.google.appinventor.components.runtime.CloudDB this$0 -> b
    void <init>(com.google.appinventor.components.runtime.CloudDB) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$10$1 -> com.google.appinventor.components.runtime.t:
    java.util.List val$listValue -> h
    com.google.appinventor.components.runtime.CloudDB$10 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.CloudDB$10,java.util.List) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$11 -> com.google.appinventor.components.runtime.u:
    java.lang.String val$tag -> Q
    java.lang.Object val$finalTagValue -> c
    com.google.appinventor.components.runtime.CloudDB this$0 -> c
    void <init>(com.google.appinventor.components.runtime.CloudDB,java.lang.String,java.lang.Object) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$12 -> com.google.appinventor.components.runtime.v:
    java.lang.String val$message -> R
    com.google.appinventor.components.runtime.CloudDB this$0 -> d
    void <init>(com.google.appinventor.components.runtime.CloudDB,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$13 -> com.google.appinventor.components.runtime.w:
    com.google.appinventor.components.runtime.CloudDB this$0 -> e
    void <init>(com.google.appinventor.components.runtime.CloudDB) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$2 -> com.google.appinventor.components.runtime.x:
    com.google.appinventor.components.runtime.CloudDB val$me -> f
    java.lang.String val$tag -> S
    java.lang.Object val$valueToStore -> d
    com.google.appinventor.components.runtime.CloudDB this$0 -> g
    void <init>(com.google.appinventor.components.runtime.CloudDB,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[],com.google.appinventor.components.runtime.CloudDB,java.lang.String,java.lang.Object) -> <init>
    void onGranted() -> onGranted
com.google.appinventor.components.runtime.CloudDB$3 -> com.google.appinventor.components.runtime.y:
    com.google.appinventor.components.runtime.CloudDB this$0 -> h
    void <init>(com.google.appinventor.components.runtime.CloudDB) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$4 -> com.google.appinventor.components.runtime.z:
    com.google.appinventor.components.runtime.CloudDB val$me -> i
    java.lang.String val$tag -> T
    java.lang.Object val$valueIfTagNotThere -> e
    com.google.appinventor.components.runtime.CloudDB this$0 -> j
    void <init>(com.google.appinventor.components.runtime.CloudDB,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[],com.google.appinventor.components.runtime.CloudDB,java.lang.String,java.lang.Object) -> <init>
    void onGranted() -> onGranted
com.google.appinventor.components.runtime.CloudDB$5 -> com.google.appinventor.components.runtime.A:
    java.lang.String val$tag -> U
    java.util.concurrent.atomic.AtomicReference val$value -> b
    java.lang.Object val$valueIfTagNotThere -> f
    com.google.appinventor.components.runtime.CloudDB this$0 -> k
    void <init>(com.google.appinventor.components.runtime.CloudDB,java.lang.String,java.util.concurrent.atomic.AtomicReference,java.lang.Object) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$5$1 -> com.google.appinventor.components.runtime.B:
    com.google.appinventor.components.runtime.CloudDB$5 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.CloudDB$5) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$6 -> com.google.appinventor.components.runtime.C:
    java.lang.Object val$sValue -> g
    com.google.appinventor.components.runtime.CloudDB this$0 -> l
    void <init>(com.google.appinventor.components.runtime.CloudDB,java.lang.Object) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$7 -> com.google.appinventor.components.runtime.D:
    java.lang.String val$key -> V
    com.google.appinventor.components.runtime.CloudDB this$0 -> m
    void <init>(com.google.appinventor.components.runtime.CloudDB,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$8 -> com.google.appinventor.components.runtime.E:
    java.lang.String val$key -> W
    java.lang.String val$item -> X
    com.google.appinventor.components.runtime.CloudDB this$0 -> n
    void <init>(com.google.appinventor.components.runtime.CloudDB,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$9 -> com.google.appinventor.components.runtime.F:
    java.lang.String val$tag -> Y
    com.google.appinventor.components.runtime.CloudDB this$0 -> o
    void <init>(com.google.appinventor.components.runtime.CloudDB,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.CloudDB$storedValue -> com.google.appinventor.components.runtime.G:
    java.lang.String tag -> Z
    org.json.JSONArray valueList -> a
    void <init>(java.lang.String,org.json.JSONArray) -> <init>
    java.lang.String getTag() -> a
    org.json.JSONArray getValueList() -> a
com.google.appinventor.components.runtime.Component -> com.google.appinventor.components.runtime.Component:
    java.lang.String ASSET_DIRECTORY -> ASSET_DIRECTORY
    int ALIGNMENT_NORMAL -> ALIGNMENT_NORMAL
    int ALIGNMENT_CENTER -> ALIGNMENT_CENTER
    int ALIGNMENT_OPPOSITE -> ALIGNMENT_OPPOSITE
    int ACCELEROMETER_SENSITIVITY_WEAK -> ACCELEROMETER_SENSITIVITY_WEAK
    int ACCELEROMETER_SENSITIVITY_MODERATE -> ACCELEROMETER_SENSITIVITY_MODERATE
    int ACCELEROMETER_SENSITIVITY_STRONG -> ACCELEROMETER_SENSITIVITY_STRONG
    int BUTTON_SHAPE_DEFAULT -> BUTTON_SHAPE_DEFAULT
    int BUTTON_SHAPE_ROUNDED -> BUTTON_SHAPE_ROUNDED
    int BUTTON_SHAPE_RECT -> BUTTON_SHAPE_RECT
    int BUTTON_SHAPE_OVAL -> BUTTON_SHAPE_OVAL
    int COLOR_NONE -> COLOR_NONE
    int COLOR_BLACK -> COLOR_BLACK
    int COLOR_BLUE -> COLOR_BLUE
    int COLOR_CYAN -> COLOR_CYAN
    int COLOR_DKGRAY -> COLOR_DKGRAY
    int COLOR_GRAY -> COLOR_GRAY
    int COLOR_GREEN -> COLOR_GREEN
    int COLOR_LTGRAY -> COLOR_LTGRAY
    int COLOR_MAGENTA -> COLOR_MAGENTA
    int COLOR_ORANGE -> COLOR_ORANGE
    int COLOR_PINK -> COLOR_PINK
    int COLOR_RED -> COLOR_RED
    int COLOR_WHITE -> COLOR_WHITE
    int COLOR_YELLOW -> COLOR_YELLOW
    int COLOR_DEFAULT -> COLOR_DEFAULT
    java.lang.String DEFAULT_VALUE_COLOR_NONE -> DEFAULT_VALUE_COLOR_NONE
    java.lang.String DEFAULT_VALUE_COLOR_BLACK -> DEFAULT_VALUE_COLOR_BLACK
    java.lang.String DEFAULT_VALUE_COLOR_BLUE -> DEFAULT_VALUE_COLOR_BLUE
    java.lang.String DEFAULT_VALUE_COLOR_CYAN -> DEFAULT_VALUE_COLOR_CYAN
    java.lang.String DEFAULT_VALUE_COLOR_DKGRAY -> DEFAULT_VALUE_COLOR_DKGRAY
    java.lang.String DEFAULT_VALUE_COLOR_GRAY -> DEFAULT_VALUE_COLOR_GRAY
    java.lang.String DEFAULT_VALUE_COLOR_GREEN -> DEFAULT_VALUE_COLOR_GREEN
    java.lang.String DEFAULT_VALUE_COLOR_LTGRAY -> DEFAULT_VALUE_COLOR_LTGRAY
    java.lang.String DEFAULT_VALUE_COLOR_MAGENTA -> DEFAULT_VALUE_COLOR_MAGENTA
    java.lang.String DEFAULT_VALUE_COLOR_ORANGE -> DEFAULT_VALUE_COLOR_ORANGE
    java.lang.String DEFAULT_VALUE_COLOR_PINK -> DEFAULT_VALUE_COLOR_PINK
    java.lang.String DEFAULT_VALUE_COLOR_RED -> DEFAULT_VALUE_COLOR_RED
    java.lang.String DEFAULT_VALUE_COLOR_WHITE -> DEFAULT_VALUE_COLOR_WHITE
    java.lang.String DEFAULT_VALUE_COLOR_YELLOW -> DEFAULT_VALUE_COLOR_YELLOW
    java.lang.String DEFAULT_VALUE_COLOR_DEFAULT -> DEFAULT_VALUE_COLOR_DEFAULT
    float FONT_DEFAULT_SIZE -> FONT_DEFAULT_SIZE
    int LAYOUT_ORIENTATION_HORIZONTAL -> LAYOUT_ORIENTATION_HORIZONTAL
    int LAYOUT_ORIENTATION_VERTICAL -> LAYOUT_ORIENTATION_VERTICAL
    int SCALING_SCALE_PROPORTIONALLY -> SCALING_SCALE_PROPORTIONALLY
    int SCALING_SCALE_TO_FIT -> SCALING_SCALE_TO_FIT
    int TYPEFACE_DEFAULT -> TYPEFACE_DEFAULT
    int TYPEFACE_SANSSERIF -> TYPEFACE_SANSSERIF
    int TYPEFACE_SERIF -> TYPEFACE_SERIF
    int TYPEFACE_MONOSPACE -> TYPEFACE_MONOSPACE
    int LENGTH_PREFERRED -> LENGTH_PREFERRED
    int LENGTH_FILL_PARENT -> LENGTH_FILL_PARENT
    int LENGTH_UNKNOWN -> LENGTH_UNKNOWN
    int LENGTH_PERCENT_TAG -> LENGTH_PERCENT_TAG
    int TOAST_LENGTH_SHORT -> TOAST_LENGTH_SHORT
    int TOAST_LENGTH_LONG -> TOAST_LENGTH_LONG
    int DIRECTION_NORTH -> DIRECTION_NORTH
    int DIRECTION_NORTHEAST -> DIRECTION_NORTHEAST
    int DIRECTION_EAST -> DIRECTION_EAST
    int DIRECTION_SOUTHEAST -> DIRECTION_SOUTHEAST
    int DIRECTION_SOUTH -> DIRECTION_SOUTH
    int DIRECTION_SOUTHWEST -> DIRECTION_SOUTHWEST
    int DIRECTION_WEST -> DIRECTION_WEST
    int DIRECTION_NORTHWEST -> DIRECTION_NORTHWEST
    int DIRECTION_NONE -> DIRECTION_NONE
    int DIRECTION_MIN -> DIRECTION_MIN
    int DIRECTION_MAX -> DIRECTION_MAX
    float SLIDER_MIN_VALUE -> SLIDER_MIN_VALUE
    float SLIDER_MAX_VALUE -> SLIDER_MAX_VALUE
    float SLIDER_THUMB_VALUE -> SLIDER_THUMB_VALUE
    java.lang.String DEFAULT_VALUE_TEXT_TO_SPEECH_COUNTRY -> DEFAULT_VALUE_TEXT_TO_SPEECH_COUNTRY
    java.lang.String DEFAULT_VALUE_TEXT_TO_SPEECH_LANGUAGE -> DEFAULT_VALUE_TEXT_TO_SPEECH_LANGUAGE
    com.google.appinventor.components.runtime.HandlesEventDispatching getDispatchDelegate() -> getDispatchDelegate
com.google.appinventor.components.runtime.ComponentContainer -> com.google.appinventor.components.runtime.ComponentContainer:
    android.app.Activity $context() -> $context
    com.google.appinventor.components.runtime.Form $form() -> $form
    void $add(com.google.appinventor.components.runtime.AndroidViewComponent) -> $add
    void setChildWidth(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildWidth
    void setChildHeight(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildHeight
    int Width() -> Width
    int Height() -> Height
com.google.appinventor.components.runtime.ContactPicker -> com.google.appinventor.components.runtime.ContactPicker:
    java.lang.String[] CONTACT_PROJECTION -> b
    java.lang.String[] DATA_PROJECTION -> c
    java.lang.String[] PROJECTION -> d
    android.app.Activity activityContext -> activityContext
    android.net.Uri intentUri -> b
    java.lang.String contactName -> contactName
    java.lang.String emailAddress -> emailAddress
    java.lang.String contactUri -> contactUri
    java.lang.String contactPictureUri -> contactPictureUri
    java.lang.String phoneNumber -> phoneNumber
    java.util.List emailAddressList -> emailAddressList
    java.util.List phoneNumberList -> phoneNumberList
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,android.net.Uri) -> <init>
    void click() -> click
    java.lang.String Picture() -> Picture
    java.lang.String ContactName() -> ContactName
    java.lang.String EmailAddress() -> EmailAddress
    java.lang.String ContactUri() -> ContactUri
    java.util.List EmailAddressList() -> EmailAddressList
    java.lang.String PhoneNumber() -> PhoneNumber
    java.util.List PhoneNumberList() -> PhoneNumberList
    void ViewContact(java.lang.String) -> ViewContact
    android.content.Intent getIntent() -> getIntent
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void preHoneycombGetContactInfo(android.database.Cursor,android.net.Uri) -> preHoneycombGetContactInfo
    java.lang.String postHoneycombGetContactNameAndPicture(android.database.Cursor) -> postHoneycombGetContactNameAndPicture
    void postHoneycombGetContactEmailAndPhone(android.database.Cursor) -> postHoneycombGetContactEmailAndPhone
    boolean checkContactUri(android.net.Uri,java.lang.String) -> checkContactUri
    void puntContactSelection(int) -> puntContactSelection
    java.lang.String getEmailAddress(java.lang.String) -> getEmailAddress
    java.lang.String guardCursorGetString(android.database.Cursor,int) -> guardCursorGetString
    java.lang.String ensureNotNull(java.lang.String) -> ensureNotNull
    java.util.List ensureNotNull(java.util.List) -> ensureNotNull
    boolean access$002(com.google.appinventor.components.runtime.ContactPicker,boolean) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.ContactPicker$1 -> com.google.appinventor.components.runtime.H:
    com.google.appinventor.components.runtime.ContactPicker this$0 -> a
    void <init>(com.google.appinventor.components.runtime.ContactPicker) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.DatePicker -> com.google.appinventor.components.runtime.DatePicker:
    android.app.DatePickerDialog date -> a
    int year -> R
    int month -> S
    int javaMonth -> T
    int day -> U
    java.util.Calendar instant -> a
    java.lang.String[] localizedMonths -> e
    boolean customDate -> X
    com.google.appinventor.components.runtime.Form form -> form
    android.os.Handler androidUIHandler -> a
    android.app.DatePickerDialog$OnDateSetListener datePickerListener -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    int Year() -> Year
    int Month() -> Month
    java.lang.String MonthInText() -> MonthInText
    int Day() -> Day
    java.util.Calendar Instant() -> Instant
    void SetDateToDisplay(int,int,int) -> SetDateToDisplay
    void SetDateToDisplayFromInstant(java.util.Calendar) -> SetDateToDisplayFromInstant
    void LaunchPicker() -> LaunchPicker
    void click() -> click
    void AfterDateSet() -> AfterDateSet
    int access$002(com.google.appinventor.components.runtime.DatePicker,int) -> a
    int access$102(com.google.appinventor.components.runtime.DatePicker,int) -> b
    int access$202(com.google.appinventor.components.runtime.DatePicker,int) -> c
    int access$100(com.google.appinventor.components.runtime.DatePicker) -> a
    int access$302(com.google.appinventor.components.runtime.DatePicker,int) -> d
    int access$000(com.google.appinventor.components.runtime.DatePicker) -> b
    int access$300(com.google.appinventor.components.runtime.DatePicker) -> c
    android.app.DatePickerDialog access$400(com.google.appinventor.components.runtime.DatePicker) -> a
    java.util.Calendar access$502(com.google.appinventor.components.runtime.DatePicker,java.util.Calendar) -> a
    int access$200(com.google.appinventor.components.runtime.DatePicker) -> d
    android.os.Handler access$600(com.google.appinventor.components.runtime.DatePicker) -> a
com.google.appinventor.components.runtime.DatePicker$1 -> com.google.appinventor.components.runtime.I:
    com.google.appinventor.components.runtime.DatePicker this$0 -> a
    void <init>(com.google.appinventor.components.runtime.DatePicker) -> <init>
    void onDateSet(android.widget.DatePicker,int,int,int) -> onDateSet
com.google.appinventor.components.runtime.DatePicker$1$1 -> com.google.appinventor.components.runtime.J:
    com.google.appinventor.components.runtime.DatePicker$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.DatePicker$1) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Deleteable -> com.google.appinventor.components.runtime.Deleteable:
    void onDelete() -> onDelete
com.google.appinventor.components.runtime.EmailAddressAdapter -> com.google.appinventor.components.runtime.EmailAddressAdapter:
    int PRE_HONEYCOMB_NAME_INDEX -> PRE_HONEYCOMB_NAME_INDEX
    int PRE_HONEYCOMB_DATA_INDEX -> PRE_HONEYCOMB_DATA_INDEX
    java.lang.String SORT_ORDER -> aa
    android.content.ContentResolver contentResolver -> a
    android.content.Context context -> a
    java.lang.String[] PRE_HONEYCOMB_PROJECTION -> f
    java.lang.String[] POST_HONEYCOMB_PROJECTION -> g
    void <init>(android.content.Context) -> <init>
    java.lang.String convertToString(android.database.Cursor) -> convertToString
    java.lang.String makeDisplayString(android.database.Cursor) -> a
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> runQueryOnBackgroundThread
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.EmailPicker -> com.google.appinventor.components.runtime.EmailPicker:
    com.google.appinventor.components.runtime.EmailAddressAdapter addressAdapter -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Initialize() -> Initialize
    void GotFocus() -> GotFocus
    com.google.appinventor.components.runtime.EmailAddressAdapter access$000(com.google.appinventor.components.runtime.EmailPicker) -> a
com.google.appinventor.components.runtime.EmailPicker$1 -> com.google.appinventor.components.runtime.K:
    com.google.appinventor.components.runtime.EmailPicker this$0 -> a
    void <init>(com.google.appinventor.components.runtime.EmailPicker) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Ev3ColorSensor -> com.google.appinventor.components.runtime.Ev3ColorSensor:
    int mode -> V
    java.lang.String modeString -> ab
    android.os.Handler eventHandler -> c
    java.lang.Runnable sensorValueChecker -> a
    int bottomOfRange -> W
    int topOfRange -> X
    int previousLightLevel -> Y
    int previousColor -> Z
    boolean belowRangeEventEnabled -> Y
    boolean withinRangeEventEnabled -> Z
    boolean aboveRangeEventEnabled -> aa
    boolean colorChangedEventEnabled -> ab
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    int GetLightLevel() -> GetLightLevel
    int GetColorCode() -> GetColorCode
    java.lang.String GetColorName() -> GetColorName
    int BottomOfRange() -> BottomOfRange
    void BottomOfRange(int) -> BottomOfRange
    int TopOfRange() -> TopOfRange
    void TopOfRange(int) -> TopOfRange
    boolean BelowRangeEventEnabled() -> BelowRangeEventEnabled
    void BelowRangeEventEnabled(boolean) -> BelowRangeEventEnabled
    void BelowRange() -> BelowRange
    boolean WithinRangeEventEnabled() -> WithinRangeEventEnabled
    void WithinRangeEventEnabled(boolean) -> WithinRangeEventEnabled
    void WithinRange() -> WithinRange
    boolean AboveRangeEventEnabled() -> AboveRangeEventEnabled
    void AboveRangeEventEnabled(boolean) -> AboveRangeEventEnabled
    void AboveRange() -> AboveRange
    boolean ColorChangedEventEnabled() -> ColorChangedEventEnabled
    void ColorChangedEventEnabled(boolean) -> ColorChangedEventEnabled
    void ColorChanged(int,java.lang.String) -> ColorChanged
    int getSensorValue(java.lang.String) -> a
    java.lang.String toColorName(java.lang.String,int) -> a
    void Mode(java.lang.String) -> Mode
    java.lang.String Mode() -> Mode
    void SetColorMode() -> SetColorMode
    void SetReflectedMode() -> SetReflectedMode
    void SetAmbientMode() -> SetAmbientMode
    void setMode(java.lang.String) -> f
    void onDelete() -> onDelete
    int access$000(com.google.appinventor.components.runtime.Ev3ColorSensor) -> a
    int access$100(com.google.appinventor.components.runtime.Ev3ColorSensor,java.lang.String) -> a
    int access$200(com.google.appinventor.components.runtime.Ev3ColorSensor) -> b
    int access$202(com.google.appinventor.components.runtime.Ev3ColorSensor,int) -> a
    android.os.Handler access$300(com.google.appinventor.components.runtime.Ev3ColorSensor) -> a
    boolean access$400(com.google.appinventor.components.runtime.Ev3ColorSensor) -> a
    java.lang.String access$500(com.google.appinventor.components.runtime.Ev3ColorSensor,java.lang.String,int) -> a
    int access$600(com.google.appinventor.components.runtime.Ev3ColorSensor) -> c
    int access$602(com.google.appinventor.components.runtime.Ev3ColorSensor,int) -> b
    int access$700(com.google.appinventor.components.runtime.Ev3ColorSensor) -> d
    boolean access$800(com.google.appinventor.components.runtime.Ev3ColorSensor) -> b
    int access$900(com.google.appinventor.components.runtime.Ev3ColorSensor) -> e
    boolean access$1000(com.google.appinventor.components.runtime.Ev3ColorSensor) -> c
    boolean access$1100(com.google.appinventor.components.runtime.Ev3ColorSensor) -> d
com.google.appinventor.components.runtime.Ev3ColorSensor$1 -> com.google.appinventor.components.runtime.L:
    com.google.appinventor.components.runtime.Ev3ColorSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Ev3ColorSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Ev3Commands -> com.google.appinventor.components.runtime.Ev3Commands:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void KeepAlive(int) -> KeepAlive
    double GetBatteryVoltage() -> GetBatteryVoltage
    double GetBatteryCurrent() -> GetBatteryCurrent
    java.lang.String GetOSVersion() -> GetOSVersion
    java.lang.String GetOSBuild() -> GetOSBuild
    java.lang.String GetFirmwareVersion() -> GetFirmwareVersion
    java.lang.String GetFirmwareBuild() -> GetFirmwareBuild
    java.lang.String GetHardwareVersion() -> GetHardwareVersion
com.google.appinventor.components.runtime.Ev3GyroSensor -> com.google.appinventor.components.runtime.Ev3GyroSensor:
    android.os.Handler eventHandler -> c
    java.lang.Runnable sensorValueChecker -> b
    int mode -> V
    java.lang.String modeString -> ab
    double previousValue -> d
    boolean sensorValueChangedEventEnabled -> ac
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    double GetSensorValue() -> GetSensorValue
    void Mode(java.lang.String) -> Mode
    java.lang.String Mode() -> Mode
    void SetAngleMode() -> SetAngleMode
    void SetRateMode() -> SetRateMode
    boolean SensorValueChangedEventEnabled() -> SensorValueChangedEventEnabled
    void SensorValueChangedEventEnabled(boolean) -> SensorValueChangedEventEnabled
    void SensorValueChanged(double) -> SensorValueChanged
    double getSensorValue(java.lang.String) -> a
    void setMode(java.lang.String) -> f
    void onDelete() -> onDelete
    double access$000(com.google.appinventor.components.runtime.Ev3GyroSensor,java.lang.String) -> a
    double access$100(com.google.appinventor.components.runtime.Ev3GyroSensor) -> a
    double access$102(com.google.appinventor.components.runtime.Ev3GyroSensor,double) -> a
    android.os.Handler access$200(com.google.appinventor.components.runtime.Ev3GyroSensor) -> a
    int access$300(com.google.appinventor.components.runtime.Ev3GyroSensor) -> a
com.google.appinventor.components.runtime.Ev3GyroSensor$1 -> com.google.appinventor.components.runtime.M:
    com.google.appinventor.components.runtime.Ev3GyroSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Ev3GyroSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Ev3Motors -> com.google.appinventor.components.runtime.Ev3Motors:
    int motorPortBitField -> aa
    double wheelDiameter -> e
    boolean directionReversed -> ad
    boolean regulationEnabled -> ae
    boolean stopBeforeDisconnect -> af
    boolean tachoCountChangedEventEnabled -> ag
    java.lang.Runnable sensorValueChecker -> c
    android.os.Handler eventHandler -> c
    int previousValue -> ab
    boolean ifReset -> ah
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String MotorPorts() -> MotorPorts
    void MotorPorts(java.lang.String) -> MotorPorts
    void WheelDiameter(double) -> WheelDiameter
    double WheelDiameter() -> WheelDiameter
    void ReverseDirection(boolean) -> ReverseDirection
    boolean ReverseDirection() -> ReverseDirection
    void EnableSpeedRegulation(boolean) -> EnableSpeedRegulation
    boolean EnableSpeedRegulation() -> EnableSpeedRegulation
    boolean StopBeforeDisconnect() -> StopBeforeDisconnect
    void StopBeforeDisconnect(boolean) -> StopBeforeDisconnect
    boolean TachoCountChangedEventEnabled() -> TachoCountChangedEventEnabled
    void TachoCountChangedEventEnabled(boolean) -> TachoCountChangedEventEnabled
    void RotateIndefinitely(int) -> RotateIndefinitely
    void RotateInTachoCounts(int,int,boolean) -> RotateInTachoCounts
    void RotateInDuration(int,int,boolean) -> RotateInDuration
    void RotateInDistance(int,double,boolean) -> RotateInDistance
    void RotateSyncIndefinitely(int,int) -> RotateSyncIndefinitely
    void RotateSyncInDistance(int,int,int,boolean) -> RotateSyncInDistance
    void RotateSyncInDuration(int,int,int,boolean) -> RotateSyncInDuration
    void RotateSyncInTachoCounts(int,int,int,boolean) -> RotateSyncInTachoCounts
    void Stop(boolean) -> Stop
    void ToggleDirection() -> ToggleDirection
    void ResetTachoCount() -> ResetTachoCount
    int GetTachoCount() -> GetTachoCount
    void TachoCountChanged(int) -> TachoCountChanged
    int roundValue(int,int,int) -> a
    boolean isOneShotInteger(int) -> a
    void startOutput(java.lang.String,int,int) -> a
    void stopOutput(java.lang.String,int,int,boolean) -> a
    void outputStepPower(java.lang.String,int,int,int,int,int,int,boolean) -> a
    void outputStepSpeed(java.lang.String,int,int,int,int,int,int,boolean) -> b
    void outputStepSync(java.lang.String,int,int,int,int,int,boolean) -> a
    void outputTimePower(java.lang.String,int,int,int,int,int,int,boolean) -> c
    void outputTimeSpeed(java.lang.String,int,int,int,int,int,int,boolean) -> d
    void outputTimeSync(java.lang.String,int,int,int,int,int,boolean) -> b
    void setOutputDirection(java.lang.String,int,int,int) -> a
    void setOutputSpeed(java.lang.String,int,int,int) -> b
    void setOutputPower(java.lang.String,int,int,int) -> c
    int getOutputCount(java.lang.String,int,int) -> a
    void clearOutputCount(java.lang.String,int,int) -> b
    void beforeDisconnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> beforeDisconnect
    int access$000(com.google.appinventor.components.runtime.Ev3Motors) -> a
    int access$100(com.google.appinventor.components.runtime.Ev3Motors,java.lang.String,int,int) -> a
    boolean access$200(com.google.appinventor.components.runtime.Ev3Motors) -> a
    int access$300(com.google.appinventor.components.runtime.Ev3Motors) -> b
    boolean access$400(com.google.appinventor.components.runtime.Ev3Motors) -> b
    boolean access$202(com.google.appinventor.components.runtime.Ev3Motors,boolean) -> a
    int access$302(com.google.appinventor.components.runtime.Ev3Motors,int) -> a
    android.os.Handler access$500(com.google.appinventor.components.runtime.Ev3Motors) -> a
com.google.appinventor.components.runtime.Ev3Motors$1 -> com.google.appinventor.components.runtime.N:
    com.google.appinventor.components.runtime.Ev3Motors this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Ev3Motors) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Ev3Sound -> com.google.appinventor.components.runtime.Ev3Sound:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void PlayTone(int,int,int) -> PlayTone
    void StopSound() -> StopSound
com.google.appinventor.components.runtime.Ev3TouchSensor -> com.google.appinventor.components.runtime.Ev3TouchSensor:
    java.lang.String modeString -> ab
    int mode -> V
    android.os.Handler eventHandler -> c
    java.lang.Runnable sensorValueChecker -> d
    int savedPressedValue -> ac
    boolean pressedEventEnabled -> ai
    boolean releasedEventEnabled -> aj
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean IsPressed() -> IsPressed
    void PressedEventEnabled(boolean) -> PressedEventEnabled
    boolean PressedEventEnabled() -> PressedEventEnabled
    void Pressed() -> Pressed
    boolean ReleasedEventEnabled() -> ReleasedEventEnabled
    void ReleasedEventEnabled(boolean) -> ReleasedEventEnabled
    void Released() -> Released
    int getPressedValue(java.lang.String) -> b
    void onDelete() -> onDelete
    int access$000(com.google.appinventor.components.runtime.Ev3TouchSensor,java.lang.String) -> a
    int access$100(com.google.appinventor.components.runtime.Ev3TouchSensor) -> a
    int access$102(com.google.appinventor.components.runtime.Ev3TouchSensor,int) -> a
    android.os.Handler access$200(com.google.appinventor.components.runtime.Ev3TouchSensor) -> a
    boolean access$300(com.google.appinventor.components.runtime.Ev3TouchSensor) -> a
    boolean access$400(com.google.appinventor.components.runtime.Ev3TouchSensor) -> b
com.google.appinventor.components.runtime.Ev3TouchSensor$1 -> com.google.appinventor.components.runtime.O:
    com.google.appinventor.components.runtime.Ev3TouchSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Ev3TouchSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Ev3UI -> com.google.appinventor.components.runtime.Ev3UI:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void DrawPoint(int,int,int) -> DrawPoint
    void DrawIcon(int,int,int,int,int) -> DrawIcon
    void DrawLine(int,int,int,int,int) -> DrawLine
    void DrawRect(int,int,int,int,int,boolean) -> DrawRect
    void DrawCircle(int,int,int,int,boolean) -> DrawCircle
    void FillScreen(int) -> FillScreen
com.google.appinventor.components.runtime.Ev3UltrasonicSensor -> com.google.appinventor.components.runtime.Ev3UltrasonicSensor:
    java.lang.String modeString -> ab
    int mode -> V
    android.os.Handler eventHandler -> c
    java.lang.Runnable sensorValueChecker -> e
    double previousDistance -> f
    int bottomOfRange -> W
    int topOfRange -> X
    boolean belowRangeEventEnabled -> Y
    boolean withinRangeEventEnabled -> Z
    boolean aboveRangeEventEnabled -> aa
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    double GetDistance() -> GetDistance
    double getDistance(java.lang.String) -> b
    int BottomOfRange() -> BottomOfRange
    void BottomOfRange(int) -> BottomOfRange
    int TopOfRange() -> TopOfRange
    void TopOfRange(int) -> TopOfRange
    boolean BelowRangeEventEnabled() -> BelowRangeEventEnabled
    void BelowRangeEventEnabled(boolean) -> BelowRangeEventEnabled
    void BelowRange() -> BelowRange
    boolean WithinRangeEventEnabled() -> WithinRangeEventEnabled
    void WithinRangeEventEnabled(boolean) -> WithinRangeEventEnabled
    void WithinRange() -> WithinRange
    boolean AboveRangeEventEnabled() -> AboveRangeEventEnabled
    void AboveRangeEventEnabled(boolean) -> AboveRangeEventEnabled
    void AboveRange() -> AboveRange
    void Unit(java.lang.String) -> Unit
    java.lang.String Unit() -> Unit
    void SetCmUnit() -> SetCmUnit
    void SetInchUnit() -> SetInchUnit
    void setMode(java.lang.String) -> f
    void onDelete() -> onDelete
    double access$000(com.google.appinventor.components.runtime.Ev3UltrasonicSensor,java.lang.String) -> a
    double access$100(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> a
    double access$102(com.google.appinventor.components.runtime.Ev3UltrasonicSensor,double) -> a
    android.os.Handler access$200(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> a
    int access$300(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> a
    boolean access$400(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> a
    int access$500(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> b
    boolean access$600(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> b
    boolean access$700(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> c
com.google.appinventor.components.runtime.Ev3UltrasonicSensor$1 -> com.google.appinventor.components.runtime.P:
    com.google.appinventor.components.runtime.Ev3UltrasonicSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Ev3UltrasonicSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.EventDispatcher -> com.google.appinventor.components.runtime.EventDispatcher:
    java.util.Map mapDispatchDelegateToEventRegistry -> a
    void <init>() -> <init>
    com.google.appinventor.components.runtime.EventDispatcher$EventRegistry getEventRegistry(com.google.appinventor.components.runtime.HandlesEventDispatching) -> a
    com.google.appinventor.components.runtime.EventDispatcher$EventRegistry removeEventRegistry(com.google.appinventor.components.runtime.HandlesEventDispatching) -> b
    void registerEventForDelegation(com.google.appinventor.components.runtime.HandlesEventDispatching,java.lang.String,java.lang.String) -> registerEventForDelegation
    void unregisterEventForDelegation(com.google.appinventor.components.runtime.HandlesEventDispatching,java.lang.String,java.lang.String) -> unregisterEventForDelegation
    void unregisterAllEventsForDelegation() -> unregisterAllEventsForDelegation
    void removeDispatchDelegate(com.google.appinventor.components.runtime.HandlesEventDispatching) -> removeDispatchDelegate
    boolean dispatchEvent(com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.Object[]) -> dispatchEvent
    boolean delegateDispatchEvent(com.google.appinventor.components.runtime.HandlesEventDispatching,java.util.Set,com.google.appinventor.components.runtime.Component,java.lang.Object[]) -> a
    java.lang.String makeFullEventName(java.lang.String,java.lang.String) -> makeFullEventName
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.EventDispatcher$1 -> com.google.appinventor.components.runtime.Q:
com.google.appinventor.components.runtime.EventDispatcher$EventClosure -> com.google.appinventor.components.runtime.R:
    java.lang.String componentId -> ac
    java.lang.String eventName -> ad
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(java.lang.String,java.lang.String,com.google.appinventor.components.runtime.EventDispatcher$1) -> <init>
    java.lang.String access$200(com.google.appinventor.components.runtime.EventDispatcher$EventClosure) -> a
    java.lang.String access$300(com.google.appinventor.components.runtime.EventDispatcher$EventClosure) -> b
com.google.appinventor.components.runtime.EventDispatcher$EventRegistry -> com.google.appinventor.components.runtime.S:
    com.google.appinventor.components.runtime.HandlesEventDispatching dispatchDelegate -> a
    java.util.HashMap eventClosuresMap -> b
    void <init>(com.google.appinventor.components.runtime.HandlesEventDispatching) -> <init>
    java.util.HashMap access$000(com.google.appinventor.components.runtime.EventDispatcher$EventRegistry) -> a
com.google.appinventor.components.runtime.FeatureCollection -> com.google.appinventor.components.runtime.FeatureCollection:
    java.lang.String source -> ae
    com.google.appinventor.components.runtime.Map map -> map
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> <init>
    void FeaturesFromGeoJSON(java.lang.String) -> FeaturesFromGeoJSON
    void GotFeatures(java.lang.String,com.google.appinventor.components.runtime.util.YailList) -> GotFeatures
    void Source(java.lang.String) -> Source
    java.lang.String Source() -> Source
    boolean Visible() -> Visible
    void Visible(boolean) -> Visible
    android.view.View getView() -> getView
    com.google.appinventor.components.runtime.Map getMap() -> getMap
com.google.appinventor.components.runtime.File -> com.google.appinventor.components.runtime.File:
    boolean legacy -> ak
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void LegacyMode(boolean) -> LegacyMode
    boolean LegacyMode() -> LegacyMode
    void SaveFile(java.lang.String,java.lang.String) -> SaveFile
    void AppendToFile(java.lang.String,java.lang.String) -> AppendToFile
    void ReadFrom(java.lang.String) -> ReadFrom
    void Delete(java.lang.String) -> Delete
    void Write(java.lang.String,java.lang.String,boolean) -> b
    java.lang.String normalizeNewLines(java.lang.String) -> d
    void AsyncRead(java.io.InputStream,java.lang.String) -> a
    void GotText(java.lang.String) -> GotText
    void AfterFileSaved(java.lang.String) -> AfterFileSaved
    java.lang.String AbsoluteFileName(java.lang.String,boolean) -> a
    java.lang.String access$000(com.google.appinventor.components.runtime.File,java.lang.String,boolean) -> a
    void access$100(com.google.appinventor.components.runtime.File,java.io.InputStream,java.lang.String) -> a
com.google.appinventor.components.runtime.File$1 -> com.google.appinventor.components.runtime.T:
    java.lang.String val$fileName -> af
    boolean val$legacy -> al
    com.google.appinventor.components.runtime.File this$0 -> a
    void <init>(com.google.appinventor.components.runtime.File,java.lang.String,boolean) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.File$1$1 -> com.google.appinventor.components.runtime.U:
    java.io.InputStream val$asyncInputStream -> b
    com.google.appinventor.components.runtime.File$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.File$1,java.io.InputStream) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.File$2 -> com.google.appinventor.components.runtime.V:
    java.lang.String val$fileName -> ag
    boolean val$legacy -> am
    com.google.appinventor.components.runtime.File this$0 -> b
    void <init>(com.google.appinventor.components.runtime.File,java.lang.String,boolean) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.File$3 -> com.google.appinventor.components.runtime.W:
    java.lang.String val$filename -> ah
    boolean val$legacy -> an
    boolean val$append -> ao
    java.lang.String val$text -> ai
    com.google.appinventor.components.runtime.File this$0 -> c
    void <init>(com.google.appinventor.components.runtime.File,java.lang.String,boolean,boolean,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.File$3$1 -> com.google.appinventor.components.runtime.X:
    com.google.appinventor.components.runtime.File$3 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.File$3) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.File$4 -> com.google.appinventor.components.runtime.Y:
    java.lang.Runnable val$operation -> f
    boolean val$append -> ap
    com.google.appinventor.components.runtime.File this$0 -> d
    void <init>(com.google.appinventor.components.runtime.File,java.lang.Runnable,boolean) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.File$5 -> com.google.appinventor.components.runtime.Z:
    java.lang.String val$text -> aj
    com.google.appinventor.components.runtime.File this$0 -> e
    void <init>(com.google.appinventor.components.runtime.File,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.FirebaseDB -> com.google.appinventor.components.runtime.FirebaseDB:
    java.lang.String firebaseURL -> ak
    java.lang.String defaultURL -> al
    boolean useDefault -> T
    java.lang.String developerBucket -> am
    java.lang.String projectBucket -> an
    java.lang.String firebaseToken -> ao
    boolean isInitialized -> aq
    boolean persist -> ar
    android.os.Handler androidUIHandler -> a
    android.app.Activity activity -> d
    com.firebase.client.Firebase myFirebase -> a
    com.firebase.client.ChildEventListener childListener -> a
    com.firebase.client.Firebase$AuthStateListener authListener -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Initialize() -> Initialize
    java.lang.String FirebaseURL() -> FirebaseURL
    void FirebaseURL(java.lang.String) -> FirebaseURL
    void DeveloperBucket(java.lang.String) -> DeveloperBucket
    java.lang.String DeveloperBucket() -> DeveloperBucket
    void ProjectBucket(java.lang.String) -> ProjectBucket
    java.lang.String ProjectBucket() -> ProjectBucket
    void FirebaseToken(java.lang.String) -> FirebaseToken
    java.lang.String FirebaseToken() -> FirebaseToken
    void Persist(boolean) -> Persist
    void resetListener() -> t
    void ClearTag(java.lang.String) -> ClearTag
    void StoreValue(java.lang.String,java.lang.Object) -> StoreValue
    void GetValue(java.lang.String,java.lang.Object) -> GetValue
    void GotValue(java.lang.String,java.lang.Object) -> GotValue
    void DataChanged(java.lang.String,java.lang.Object) -> DataChanged
    void FirebaseError(java.lang.String) -> FirebaseError
    void connectFirebase() -> u
    void Unauthenticate() -> Unauthenticate
    void DefaultURL(java.lang.String) -> DefaultURL
    void RemoveFirst(java.lang.String) -> RemoveFirst
    void GetTagList() -> GetTagList
    void TagList(java.util.List) -> TagList
    void FirstRemoved(java.lang.Object) -> FirstRemoved
    void AppendValue(java.lang.String,java.lang.Object) -> AppendValue
    void firebaseTransaction(com.google.appinventor.components.runtime.FirebaseDB$Transactional,com.firebase.client.Firebase,java.lang.Runnable) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.FirebaseDB$1 -> com.google.appinventor.components.runtime.aa:
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> a
    void <init>(com.google.appinventor.components.runtime.FirebaseDB) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$2 -> com.google.appinventor.components.runtime.ab:
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> b
    void <init>(com.google.appinventor.components.runtime.FirebaseDB) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$3 -> com.google.appinventor.components.runtime.ac:
    java.lang.Object val$valueIfTagNotThere -> h
    java.lang.String val$tag -> ap
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> c
    void <init>(com.google.appinventor.components.runtime.FirebaseDB,java.lang.Object,java.lang.String) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$4 -> com.google.appinventor.components.runtime.ad:
    com.google.appinventor.components.runtime.FirebaseDB$ReturnVal val$result -> a
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> d
    void <init>(com.google.appinventor.components.runtime.FirebaseDB,java.lang.Object,java.lang.Object,com.google.appinventor.components.runtime.FirebaseDB$ReturnVal,com.google.appinventor.components.runtime.FirebaseDB$ReturnVal) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$5 -> com.google.appinventor.components.runtime.ae:
    com.google.appinventor.components.runtime.FirebaseDB$ReturnVal val$result -> b
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> e
    void <init>(com.google.appinventor.components.runtime.FirebaseDB,com.google.appinventor.components.runtime.FirebaseDB$ReturnVal) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.FirebaseDB$6 -> com.google.appinventor.components.runtime.af:
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> f
    void <init>(com.google.appinventor.components.runtime.FirebaseDB) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$7 -> com.google.appinventor.components.runtime.ag:
    com.google.appinventor.components.runtime.FirebaseDB$ReturnVal val$result -> c
    java.lang.Object val$valueToAdd -> i
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> g
    void <init>(com.google.appinventor.components.runtime.FirebaseDB,java.lang.Object,java.lang.Object,com.google.appinventor.components.runtime.FirebaseDB$ReturnVal,com.google.appinventor.components.runtime.FirebaseDB$ReturnVal,java.lang.Object) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$8 -> com.google.appinventor.components.runtime.ah:
    com.google.appinventor.components.runtime.FirebaseDB$Transactional val$toRun -> a
    com.google.appinventor.components.runtime.FirebaseDB$ReturnVal val$result -> d
    java.lang.Runnable val$whenDone -> g
    com.google.appinventor.components.runtime.FirebaseDB this$0 -> h
    void <init>(com.google.appinventor.components.runtime.FirebaseDB,com.google.appinventor.components.runtime.FirebaseDB$Transactional,com.google.appinventor.components.runtime.FirebaseDB$ReturnVal,java.lang.Runnable) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$ReturnVal -> com.google.appinventor.components.runtime.ai:
    java.lang.Object retval -> j
    void <init>() -> <init>
    java.lang.Object getRetval() -> a
    void <init>(com.google.appinventor.components.runtime.FirebaseDB$1) -> <init>
com.google.appinventor.components.runtime.FirebaseDB$Transactional -> com.google.appinventor.components.runtime.aj:
    java.lang.Object arg1 -> k
    java.lang.Object arg2 -> l
    com.google.appinventor.components.runtime.FirebaseDB$ReturnVal retv -> e
    void <init>(java.lang.Object,java.lang.Object,com.google.appinventor.components.runtime.FirebaseDB$ReturnVal) -> <init>
    com.google.appinventor.components.runtime.FirebaseDB$ReturnVal getResult() -> a
com.google.appinventor.components.runtime.Form -> com.google.appinventor.components.runtime.Form:
    java.lang.String APPINVENTOR_URL_SCHEME -> APPINVENTOR_URL_SCHEME
    java.lang.String ASSETS_PREFIX -> ASSETS_PREFIX
    int DEFAULT_PRIMARY_COLOR_DARK -> ad
    int DEFAULT_ACCENT_COLOR -> ae
    com.google.appinventor.components.runtime.Form activeForm -> activeForm
    float deviceDensity -> a
    float compatScalingFactor -> j
    boolean applicationIsBeingClosed -> as
    android.os.Handler androidUIHandler -> androidUIHandler
    java.lang.String formName -> formName
    boolean screenInitialized -> at
    int nextRequestCode -> af
    int backgroundColor -> K
    java.lang.String aboutScreen -> aq
    boolean showStatusBar -> au
    boolean showTitle -> av
    java.lang.String title -> title
    java.lang.String backgroundImagePath -> L
    android.graphics.drawable.Drawable backgroundDrawable -> d
    boolean usesDefaultBackground -> aw
    boolean usesDarkTheme -> ax
    com.google.appinventor.components.runtime.LinearLayout viewLayout -> a
    com.google.appinventor.components.runtime.util.AlignmentUtil alignmentSetter -> a
    int horizontalAlignment -> ag
    int verticalAlignment -> ah
    java.lang.String openAnimType -> ar
    java.lang.String closeAnimType -> as
    int primaryColor -> E
    int primaryColorDark -> ai
    int accentColor -> aj
    android.widget.FrameLayout frameLayout -> a
    boolean scrollable -> ay
    com.google.appinventor.components.runtime.ScaledFrameLayout scaleLayout -> a
    boolean sCompatibilityMode -> az
    boolean showListsAsJson -> aA
    java.util.Set permissions -> c
    java.util.HashMap activityResultMap -> c
    java.util.Map activityResultMultiMap -> b
    java.util.Set onStopListeners -> d
    java.util.Set onClearListeners -> e
    java.util.Set onNewIntentListeners -> f
    java.util.Set onResumeListeners -> g
    java.util.Set onOrientationChangeListeners -> h
    java.util.Set onPauseListeners -> i
    java.util.Set onDestroyListeners -> j
    java.util.Set onInitializeListeners -> k
    java.util.Set onCreateOptionsMenuListeners -> l
    java.util.Set onOptionsItemSelectedListeners -> m
    java.util.HashMap permissionHandlers -> d
    java.util.Random permissionRandom -> a
    java.lang.String startupValue -> startupValue
    long minimumToastWait -> c
    long lastToastTime -> d
    java.lang.String nextFormName -> at
    com.google.appinventor.components.runtime.util.FullScreenVideoUtil fullScreenVideoUtil -> a
    int formWidth -> ak
    int formHeight -> al
    boolean actionBarEnabled -> C
    boolean keyboardShown -> aB
    android.app.ProgressDialog progress -> a
    boolean _initialized -> aC
    int MAX_PERMISSION_NONCE -> MAX_PERMISSION_NONCE
    java.util.LinkedHashMap dimChanges -> a
    java.lang.String yandexTranslateTagline -> au
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateFinish() -> v
    void onCreateFinish2() -> w
    void populatePermissions() -> x
    void defaultPropertyValues() -> y
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onGlobalLayout() -> onGlobalLayout
    void onBackPressed() -> onBackPressed
    boolean BackPressed() -> BackPressed
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.lang.Object decodeJSONStringForForm(java.lang.String,java.lang.String) -> a
    int registerForActivityResult(com.google.appinventor.components.runtime.ActivityResultListener) -> registerForActivityResult
    void registerForActivityResult(com.google.appinventor.components.runtime.ActivityResultListener,int) -> registerForActivityResult
    void unregisterForActivityResult(com.google.appinventor.components.runtime.ActivityResultListener) -> unregisterForActivityResult
    void ReplayFormOrientation() -> z
    java.lang.Integer generateHashCode(com.google.appinventor.components.runtime.AndroidViewComponent,com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim) -> a
    void registerPercentLength(com.google.appinventor.components.runtime.AndroidViewComponent,int,com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim) -> registerPercentLength
    void unregisterPercentLength(com.google.appinventor.components.runtime.AndroidViewComponent,com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim) -> unregisterPercentLength
    int generateNewRequestCode() -> a
    void onResume() -> onResume
    void registerForOnResume(com.google.appinventor.components.runtime.OnResumeListener) -> registerForOnResume
    void registerForOnOrientationChange(com.google.appinventor.components.runtime.OnOrientationChangeListener) -> registerForOnOrientationChange
    void registerForOnInitialize(com.google.appinventor.components.runtime.util.OnInitializeListener) -> registerForOnInitialize
    void onNewIntent(android.content.Intent) -> onNewIntent
    void registerForOnNewIntent(com.google.appinventor.components.runtime.OnNewIntentListener) -> registerForOnNewIntent
    void onPause() -> onPause
    void registerForOnPause(com.google.appinventor.components.runtime.OnPauseListener) -> registerForOnPause
    void onStop() -> onStop
    void registerForOnStop(com.google.appinventor.components.runtime.OnStopListener) -> registerForOnStop
    void registerForOnClear(com.google.appinventor.components.runtime.OnClearListener) -> registerForOnClear
    void onDestroy() -> onDestroy
    void registerForOnDestroy(com.google.appinventor.components.runtime.OnDestroyListener) -> registerForOnDestroy
    void registerForOnCreateOptionsMenu(com.google.appinventor.components.runtime.OnCreateOptionsMenuListener) -> registerForOnCreateOptionsMenu
    void registerForOnOptionsItemSelected(com.google.appinventor.components.runtime.OnOptionsItemSelectedListener) -> registerForOnOptionsItemSelected
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
    void $define() -> $define
    boolean canDispatchEvent(com.google.appinventor.components.runtime.Component,java.lang.String) -> canDispatchEvent
    boolean dispatchEvent(com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String,java.lang.Object[]) -> dispatchEvent
    void dispatchGenericEvent(com.google.appinventor.components.runtime.Component,java.lang.String,boolean,java.lang.Object[]) -> dispatchGenericEvent
    void Initialize() -> Initialize
    void ScreenOrientationChanged() -> ScreenOrientationChanged
    void ErrorOccurred(com.google.appinventor.components.runtime.Component,java.lang.String,int,java.lang.String) -> ErrorOccurred
    void ErrorOccurredDialog(com.google.appinventor.components.runtime.Component,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> ErrorOccurredDialog
    void dispatchPermissionDeniedEvent(com.google.appinventor.components.runtime.Component,java.lang.String,com.google.appinventor.components.runtime.errors.PermissionException) -> dispatchPermissionDeniedEvent
    void dispatchPermissionDeniedEvent(com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String) -> dispatchPermissionDeniedEvent
    void dispatchErrorOccurredEvent(com.google.appinventor.components.runtime.Component,java.lang.String,int,java.lang.Object[]) -> dispatchErrorOccurredEvent
    void dispatchErrorOccurredEventDialog(com.google.appinventor.components.runtime.Component,java.lang.String,int,java.lang.Object[]) -> dispatchErrorOccurredEventDialog
    void runtimeFormErrorOccurredEvent(java.lang.String,int,java.lang.String) -> runtimeFormErrorOccurredEvent
    void PermissionDenied(com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String) -> PermissionDenied
    void PermissionGranted(java.lang.String) -> PermissionGranted
    void AskForPermission(java.lang.String) -> AskForPermission
    boolean Scrollable() -> Scrollable
    void Scrollable(boolean) -> Scrollable
    void recomputeLayout() -> A
    int BackgroundColor() -> BackgroundColor
    void BackgroundColor(int) -> BackgroundColor
    java.lang.String BackgroundImage() -> BackgroundImage
    void BackgroundImage(java.lang.String) -> BackgroundImage
    java.lang.String Title() -> Title
    void Title(java.lang.String) -> Title
    java.lang.String AboutScreen() -> AboutScreen
    void AboutScreen(java.lang.String) -> AboutScreen
    boolean TitleVisible() -> TitleVisible
    void TitleVisible(boolean) -> TitleVisible
    boolean ShowStatusBar() -> ShowStatusBar
    void ShowStatusBar(boolean) -> ShowStatusBar
    java.lang.String ScreenOrientation() -> ScreenOrientation
    void ScreenOrientation(java.lang.String) -> ScreenOrientation
    void ActionBar(boolean) -> ActionBar
    int AlignHorizontal() -> AlignHorizontal
    void AlignHorizontal(int) -> AlignHorizontal
    int AlignVertical() -> AlignVertical
    void AlignVertical(int) -> AlignVertical
    java.lang.String OpenScreenAnimation() -> OpenScreenAnimation
    void OpenScreenAnimation(java.lang.String) -> OpenScreenAnimation
    java.lang.String CloseScreenAnimation() -> CloseScreenAnimation
    void CloseScreenAnimation(java.lang.String) -> CloseScreenAnimation
    java.lang.String getOpenAnimType() -> getOpenAnimType
    void Icon(java.lang.String) -> Icon
    void VersionCode(int) -> VersionCode
    void VersionName(java.lang.String) -> VersionName
    void Sizing(java.lang.String) -> Sizing
    void ShowListsAsJson(boolean) -> ShowListsAsJson
    boolean ShowListsAsJson() -> ShowListsAsJson
    void AppName(java.lang.String) -> AppName
    void PrimaryColor(int) -> PrimaryColor
    int PrimaryColor() -> PrimaryColor
    void PrimaryColorDark(int) -> PrimaryColorDark
    int PrimaryColorDark() -> PrimaryColorDark
    void AccentColor(int) -> AccentColor
    int AccentColor() -> AccentColor
    void Theme(java.lang.String) -> Theme
    int Width() -> Width
    int Height() -> Height
    void TutorialURL(java.lang.String) -> TutorialURL
    void BlocksToolkit(java.lang.String) -> BlocksToolkit
    java.lang.String Platform() -> Platform
    java.lang.String PlatformVersion() -> PlatformVersion
    void switchForm(java.lang.String) -> switchForm
    void switchFormWithStartValue(java.lang.String,java.lang.Object) -> switchFormWithStartValue
    void startNewForm(java.lang.String,java.lang.Object) -> startNewForm
    java.lang.String jsonEncodeForForm(java.lang.Object,java.lang.String) -> jsonEncodeForForm
    void OtherScreenClosed(java.lang.String,java.lang.Object) -> OtherScreenClosed
    com.google.appinventor.components.runtime.HandlesEventDispatching getDispatchDelegate() -> getDispatchDelegate
    android.app.Activity $context() -> $context
    com.google.appinventor.components.runtime.Form $form() -> $form
    void $add(com.google.appinventor.components.runtime.AndroidViewComponent) -> $add
    float deviceDensity() -> deviceDensity
    float compatScalingFactor() -> compatScalingFactor
    void setChildWidth(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildWidth
    void setChildHeight(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildHeight
    com.google.appinventor.components.runtime.Form getActiveForm() -> getActiveForm
    java.lang.String getStartText() -> getStartText
    java.lang.Object getStartValue() -> getStartValue
    void finishActivity() -> finishActivity
    void finishActivityWithResult(java.lang.Object) -> finishActivityWithResult
    void finishActivityWithTextResult(java.lang.String) -> finishActivityWithTextResult
    void closeForm(android.content.Intent) -> closeForm
    void finishApplication() -> finishApplication
    void closeApplicationFromBlocks() -> closeApplicationFromBlocks
    void closeApplicationFromMenu() -> B
    void closeApplication() -> C
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void addExitButtonToMenu(android.view.Menu) -> addExitButtonToMenu
    void addAboutInfoToMenu(android.view.Menu) -> addAboutInfoToMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void showExitApplicationNotification() -> D
    void setYandexTranslateTagline() -> E
    void showAboutApplicationNotification() -> F
    void clear() -> clear
    void deleteComponent(java.lang.Object) -> deleteComponent
    void dontGrabTouchEventsForComponent() -> dontGrabTouchEventsForComponent
    boolean toastAllowed() -> toastAllowed
    void callInitialize(java.lang.Object) -> callInitialize
    android.os.Bundle fullScreenVideoAction(int,com.google.appinventor.components.runtime.VideoPlayer,java.lang.Object) -> fullScreenVideoAction
    void setBackground(android.view.View) -> a
    boolean getCompatibilityMode() -> getCompatibilityMode
    void HideKeyboard() -> HideKeyboard
    void updateTitle() -> updateTitle
    void maybeShowTitleBar() -> maybeShowTitleBar
    boolean isDarkTheme() -> isDarkTheme
    boolean isDeniedPermission(java.lang.String) -> isDeniedPermission
    void assertPermission(java.lang.String) -> assertPermission
    void askPermission(java.lang.String,com.google.appinventor.components.runtime.PermissionResultHandler) -> askPermission
    void askPermission(com.google.appinventor.components.runtime.util.BulkPermissionRequest) -> askPermission
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    boolean doesAppDeclarePermission(java.lang.String) -> doesAppDeclarePermission
    java.lang.String getAssetPath(java.lang.String) -> getAssetPath
    java.io.InputStream openAsset(java.lang.String) -> openAsset
    java.lang.String getAssetPathForExtension(com.google.appinventor.components.runtime.Component,java.lang.String) -> getAssetPathForExtension
    java.io.InputStream openAssetForExtension(com.google.appinventor.components.runtime.Component,java.lang.String) -> openAssetForExtension
    java.io.InputStream openAssetInternal(java.lang.String) -> a
    void access$100(com.google.appinventor.components.runtime.Form) -> a
    android.widget.FrameLayout access$200(com.google.appinventor.components.runtime.Form) -> a
    void access$300(com.google.appinventor.components.runtime.Form) -> b
    boolean access$400() -> d
    boolean access$502(com.google.appinventor.components.runtime.Form,boolean) -> a
    java.util.Set access$600(com.google.appinventor.components.runtime.Form) -> a
    void access$700(com.google.appinventor.components.runtime.Form) -> c
    void access$800(com.google.appinventor.components.runtime.Form) -> d
    void access$900(com.google.appinventor.components.runtime.Form) -> e
    java.util.Random access$1000(com.google.appinventor.components.runtime.Form) -> a
    java.util.HashMap access$1100(com.google.appinventor.components.runtime.Form) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Form$1 -> com.google.appinventor.components.runtime.ak:
    com.google.appinventor.components.runtime.Form this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Form$1$1 -> com.google.appinventor.components.runtime.al:
    com.google.appinventor.components.runtime.Form$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Form$1) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$10 -> com.google.appinventor.components.runtime.am:
    com.google.appinventor.components.runtime.AndroidViewComponent val$component -> a
    int val$fHeight -> am
    com.google.appinventor.components.runtime.Form this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.AndroidViewComponent,int) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$11 -> com.google.appinventor.components.runtime.an:
    com.google.appinventor.components.runtime.Form this$0 -> c
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
com.google.appinventor.components.runtime.Form$12 -> com.google.appinventor.components.runtime.ao:
    com.google.appinventor.components.runtime.Form this$0 -> d
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
com.google.appinventor.components.runtime.Form$13 -> com.google.appinventor.components.runtime.ap:
    com.google.appinventor.components.runtime.Form this$0 -> e
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$14 -> com.google.appinventor.components.runtime.aq:
    com.google.appinventor.components.runtime.Form this$0 -> f
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$15 -> com.google.appinventor.components.runtime.ar:
    java.lang.String val$permission -> av
    com.google.appinventor.components.runtime.PermissionResultHandler val$responseRequestor -> a
    com.google.appinventor.components.runtime.Form val$form -> g
    com.google.appinventor.components.runtime.Form this$0 -> h
    void <init>(com.google.appinventor.components.runtime.Form,java.lang.String,com.google.appinventor.components.runtime.PermissionResultHandler,com.google.appinventor.components.runtime.Form) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$16 -> com.google.appinventor.components.runtime.as:
    java.util.List val$permissionsToAsk -> i
    com.google.appinventor.components.runtime.util.BulkPermissionRequest val$request -> a
    com.google.appinventor.components.runtime.Form this$0 -> i
    void <init>(com.google.appinventor.components.runtime.Form,java.util.List,com.google.appinventor.components.runtime.util.BulkPermissionRequest) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$16$1 -> com.google.appinventor.components.runtime.at:
    java.util.List deniedPermissions -> j
    java.util.Iterator val$it -> a
    com.google.appinventor.components.runtime.Form$16 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Form$16,java.util.Iterator) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Form$2 -> com.google.appinventor.components.runtime.au:
    int val$newOrientation -> an
    com.google.appinventor.components.runtime.Form this$0 -> j
    void <init>(com.google.appinventor.components.runtime.Form,int) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$2$1 -> com.google.appinventor.components.runtime.av:
    android.widget.FrameLayout val$savedLayout -> b
    com.google.appinventor.components.runtime.Form$2 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Form$2,android.widget.FrameLayout) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$3 -> com.google.appinventor.components.runtime.aw:
    com.google.appinventor.components.runtime.Form this$0 -> k
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$4 -> com.google.appinventor.components.runtime.ax:
    com.google.appinventor.components.runtime.Component val$component -> a
    java.lang.String val$functionName -> aw
    java.lang.String val$permissionName -> ax
    com.google.appinventor.components.runtime.Form this$0 -> l
    void <init>(com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$5 -> com.google.appinventor.components.runtime.ay:
    int val$errorNumber -> ao
    java.lang.Object[] val$messageArgs -> a
    com.google.appinventor.components.runtime.Component val$component -> b
    java.lang.String val$functionName -> ay
    com.google.appinventor.components.runtime.Form this$0 -> m
    void <init>(com.google.appinventor.components.runtime.Form,int,java.lang.Object[],com.google.appinventor.components.runtime.Component,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$6 -> com.google.appinventor.components.runtime.az:
    int val$errorNumber -> ap
    java.lang.Object[] val$messageArgs -> b
    com.google.appinventor.components.runtime.Component val$component -> c
    java.lang.String val$functionName -> az
    com.google.appinventor.components.runtime.Form this$0 -> n
    void <init>(com.google.appinventor.components.runtime.Form,int,java.lang.Object[],com.google.appinventor.components.runtime.Component,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$7 -> com.google.appinventor.components.runtime.aA:
    com.google.appinventor.components.runtime.Form this$0 -> o
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Form$8 -> com.google.appinventor.components.runtime.aB:
    com.google.appinventor.components.runtime.Form this$0 -> p
    void <init>(com.google.appinventor.components.runtime.Form) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$9 -> com.google.appinventor.components.runtime.aC:
    com.google.appinventor.components.runtime.AndroidViewComponent val$component -> b
    int val$fWidth -> aq
    com.google.appinventor.components.runtime.Form this$0 -> q
    void <init>(com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.AndroidViewComponent,int) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Form$MultiDexInstaller -> com.google.appinventor.components.runtime.aD:
    com.google.appinventor.components.runtime.Form ourForm -> r
    void <init>() -> <init>
    java.lang.Boolean doInBackground(com.google.appinventor.components.runtime.Form[]) -> a
    void onPostExecute(java.lang.Boolean) -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void <init>(com.google.appinventor.components.runtime.Form$1) -> <init>
com.google.appinventor.components.runtime.Form$PercentStorageRecord -> com.google.appinventor.components.runtime.Form$PercentStorageRecord:
    com.google.appinventor.components.runtime.AndroidViewComponent component -> c
    int length -> ar
    com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim dim -> a
    void <init>(com.google.appinventor.components.runtime.AndroidViewComponent,int,com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim) -> <init>
com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim -> com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim:
    com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim HEIGHT -> HEIGHT
    com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim WIDTH -> WIDTH
    com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim[] $VALUES -> a
    com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim[] values() -> values
    com.google.appinventor.components.runtime.Form$PercentStorageRecord$Dim valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.GyroscopeSensor -> com.google.appinventor.components.runtime.GyroscopeSensor:
    boolean enabled -> enabled
    float xAngularVelocity -> k
    float yAngularVelocity -> l
    float zAngularVelocity -> m
    android.hardware.SensorManager sensorManager -> b
    android.hardware.Sensor gyroSensor -> b
    boolean listening -> p
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void startListening() -> startListening
    void stopListening() -> stopListening
    void GyroscopeChanged(float,float,float,long) -> GyroscopeChanged
    boolean Available() -> Available
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    float XAngularVelocity() -> XAngularVelocity
    float YAngularVelocity() -> YAngularVelocity
    float ZAngularVelocity() -> ZAngularVelocity
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onDelete() -> onDelete
    void onPause() -> onPause
    void onResume() -> onResume
com.google.appinventor.components.runtime.HVArrangement -> com.google.appinventor.components.runtime.HVArrangement:
    android.app.Activity context -> e
    int orientation -> as
    com.google.appinventor.components.runtime.LinearLayout viewLayout -> b
    android.view.ViewGroup frameContainer -> b
    boolean scrollable -> ay
    com.google.appinventor.components.runtime.util.AlignmentUtil alignmentSetter -> a
    int horizontalAlignment -> ag
    int verticalAlignment -> ah
    int backgroundColor -> K
    android.graphics.drawable.Drawable backgroundImageDrawable -> c
    java.lang.String imagePath -> K
    android.graphics.drawable.Drawable defaultButtonDrawable -> a
    android.os.Handler androidUIHandler -> d
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,int,boolean) -> <init>
    android.app.Activity $context() -> $context
    com.google.appinventor.components.runtime.Form $form() -> $form
    void $add(com.google.appinventor.components.runtime.AndroidViewComponent) -> $add
    void setChildWidth(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildWidth
    void setChildWidth(com.google.appinventor.components.runtime.AndroidViewComponent,int,int) -> setChildWidth
    void setChildHeight(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildHeight
    android.view.View getView() -> getView
    int AlignHorizontal() -> AlignHorizontal
    void AlignHorizontal(int) -> AlignHorizontal
    int AlignVertical() -> AlignVertical
    void AlignVertical(int) -> AlignVertical
    int BackgroundColor() -> BackgroundColor
    void BackgroundColor(int) -> BackgroundColor
    java.lang.String Image() -> Image
    void Image(java.lang.String) -> Image
    void updateAppearance() -> l
com.google.appinventor.components.runtime.HVArrangement$1 -> com.google.appinventor.components.runtime.aE:
    com.google.appinventor.components.runtime.AndroidViewComponent val$component -> d
    int val$fWidth -> at
    int val$trycount -> au
    com.google.appinventor.components.runtime.HVArrangement this$0 -> a
    void <init>(com.google.appinventor.components.runtime.HVArrangement,com.google.appinventor.components.runtime.AndroidViewComponent,int,int) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.HVArrangement$2 -> com.google.appinventor.components.runtime.aF:
    com.google.appinventor.components.runtime.AndroidViewComponent val$component -> e
    int val$fHeight -> av
    com.google.appinventor.components.runtime.HVArrangement this$0 -> b
    void <init>(com.google.appinventor.components.runtime.HVArrangement,com.google.appinventor.components.runtime.AndroidViewComponent,int) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.HandlesEventDispatching -> com.google.appinventor.components.runtime.HandlesEventDispatching:
    boolean canDispatchEvent(com.google.appinventor.components.runtime.Component,java.lang.String) -> canDispatchEvent
    boolean dispatchEvent(com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String,java.lang.Object[]) -> dispatchEvent
    void dispatchErrorOccurredEvent(com.google.appinventor.components.runtime.Component,java.lang.String,int,java.lang.Object[]) -> dispatchErrorOccurredEvent
    void dispatchGenericEvent(com.google.appinventor.components.runtime.Component,java.lang.String,boolean,java.lang.Object[]) -> dispatchGenericEvent
com.google.appinventor.components.runtime.HorizontalArrangement -> com.google.appinventor.components.runtime.HorizontalArrangement:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
com.google.appinventor.components.runtime.HorizontalScrollArrangement -> com.google.appinventor.components.runtime.HorizontalScrollArrangement:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
com.google.appinventor.components.runtime.Hygrometer -> com.google.appinventor.components.runtime.Hygrometer:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onValueChanged(float) -> onValueChanged
    void HumidityChanged(float) -> HumidityChanged
    float Humidity() -> Humidity
com.google.appinventor.components.runtime.Image -> com.google.appinventor.components.runtime.Image:
    android.widget.ImageView view -> a
    java.lang.String picturePath -> aA
    double rotationAngle -> g
    int scalingMode -> aw
    boolean clickable -> q
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.view.View getView() -> getView
    void Click() -> Click
    void Clickable(boolean) -> Clickable
    boolean Clickable() -> Clickable
    java.lang.String Picture() -> Picture
    void Picture(java.lang.String) -> Picture
    void RotationAngle(double) -> RotationAngle
    double RotationAngle() -> RotationAngle
    void ScalePictureToFit(boolean) -> ScalePictureToFit
    void Animation(java.lang.String) -> Animation
    void Scaling(int) -> Scaling
    int Scaling() -> Scaling
com.google.appinventor.components.runtime.Image$1 -> com.google.appinventor.components.runtime.aG:
    com.google.appinventor.components.runtime.Image this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Image,android.content.Context) -> <init>
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
com.google.appinventor.components.runtime.Image$2 -> com.google.appinventor.components.runtime.aH:
    com.google.appinventor.components.runtime.Image this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Image) -> <init>
    void onClick(android.view.View) -> onClick
com.google.appinventor.components.runtime.Image$3 -> com.google.appinventor.components.runtime.aI:
    java.lang.String val$path -> aB
    com.google.appinventor.components.runtime.Image this$0 -> c
    void <init>(com.google.appinventor.components.runtime.Image,java.lang.String) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.ImagePicker -> com.google.appinventor.components.runtime.ImagePicker:
    int maxSavedFiles -> ax
    java.lang.String selectionURI -> aC
    java.lang.String selectionSavedImage -> aD
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String Selection() -> Selection
    android.content.Intent getIntent() -> getIntent
    void click() -> click
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void saveSelectedImageToExternalStorage(java.lang.String) -> g
    void copyToExternalStorageAndDeleteSource(java.io.File,java.lang.String) -> a
    void trimDirectory(int,java.io.File) -> a
    boolean access$002(com.google.appinventor.components.runtime.ImagePicker,boolean) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.ImagePicker$1 -> com.google.appinventor.components.runtime.aJ:
    com.google.appinventor.components.runtime.ImagePicker this$0 -> a
    void <init>(com.google.appinventor.components.runtime.ImagePicker) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.ImagePicker$2 -> com.google.appinventor.components.runtime.aK:
    com.google.appinventor.components.runtime.ImagePicker this$0 -> b
    void <init>(com.google.appinventor.components.runtime.ImagePicker) -> <init>
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.appinventor.components.runtime.ImageSprite -> com.google.appinventor.components.runtime.ImageSprite:
    com.google.appinventor.components.runtime.Form form -> s
    android.graphics.drawable.BitmapDrawable drawable -> b
    int widthHint -> ay
    int heightHint -> az
    java.lang.String picturePath -> aA
    boolean rotates -> aD
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onDraw(android.graphics.Canvas) -> onDraw
    java.lang.String Picture() -> Picture
    void Picture(java.lang.String) -> Picture
    int Height() -> Height
    void Height(int) -> Height
    void HeightPercent(int) -> HeightPercent
    int Width() -> Width
    void Width(int) -> Width
    void WidthPercent(int) -> WidthPercent
    boolean Rotates() -> Rotates
    void Rotates(boolean) -> Rotates
    double X() -> X
    double Y() -> Y
    void MoveTo(double,double) -> MoveTo
com.google.appinventor.components.runtime.IntentBasedSpeechRecognizer -> com.google.appinventor.components.runtime.IntentBasedSpeechRecognizer:
    java.lang.String result -> G
    com.google.appinventor.components.runtime.ComponentContainer container -> a
    android.content.Intent recognizerIntent -> b
    int requestCode -> requestCode
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,android.content.Intent) -> <init>
    void start() -> start
    void stop() -> stop
    void resultReturned(int,int,android.content.Intent) -> resultReturned
com.google.appinventor.components.runtime.Label -> com.google.appinventor.components.runtime.Label:
    int defaultLabelMarginInDp -> aA
    android.widget.TextView view -> c
    android.widget.LinearLayout$LayoutParams linearLayoutParams -> a
    int textAlignment -> J
    int backgroundColor -> K
    int fontTypeface -> L
    boolean bold -> G
    boolean italic -> I
    boolean hasMargins -> aE
    int textColor -> M
    boolean htmlFormat -> aF
    java.lang.String htmlContent -> aE
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    int dpToPx(android.view.View,int) -> a
    android.view.View getView() -> getView
    int TextAlignment() -> TextAlignment
    void TextAlignment(int) -> TextAlignment
    int BackgroundColor() -> BackgroundColor
    void BackgroundColor(int) -> BackgroundColor
    boolean FontBold() -> FontBold
    void FontBold(boolean) -> FontBold
    boolean FontItalic() -> FontItalic
    void FontItalic(boolean) -> FontItalic
    boolean HasMargins() -> HasMargins
    void HasMargins(boolean) -> HasMargins
    void setLabelMargins(boolean) -> b
    float FontSize() -> FontSize
    void FontSize(float) -> FontSize
    int FontTypeface() -> FontTypeface
    void FontTypeface(int) -> FontTypeface
    java.lang.String Text() -> Text
    void Text(java.lang.String) -> Text
    java.lang.String HTMLContent() -> HTMLContent
    boolean HTMLFormat() -> HTMLFormat
    void HTMLFormat(boolean) -> HTMLFormat
    int TextColor() -> TextColor
    void TextColor(int) -> TextColor
com.google.appinventor.components.runtime.Layout -> com.google.appinventor.components.runtime.Layout:
    android.view.ViewGroup getLayoutManager() -> getLayoutManager
    void add(com.google.appinventor.components.runtime.AndroidViewComponent) -> add
com.google.appinventor.components.runtime.LegoMindstormsEv3Base -> com.google.appinventor.components.runtime.LegoMindstormsEv3Base:
    int commandCount -> commandCount
    java.lang.String logTag -> logTag
    com.google.appinventor.components.runtime.BluetoothClient bluetooth -> bluetooth
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,java.lang.String) -> <init>
    void <init>() -> <init>
    com.google.appinventor.components.runtime.BluetoothClient BluetoothClient() -> BluetoothClient
    void BluetoothClient(com.google.appinventor.components.runtime.BluetoothClient) -> BluetoothClient
    boolean isBluetoothConnected(java.lang.String) -> isBluetoothConnected
    byte[] sendCommand(java.lang.String,byte[],boolean) -> sendCommand
    int sensorPortLetterToPortNumber(java.lang.String) -> sensorPortLetterToPortNumber
    java.lang.String portNumberToSensorPortLetter(int) -> portNumberToSensorPortLetter
    int motorPortLettersToBitField(java.lang.String) -> motorPortLettersToBitField
    java.lang.String bitFieldToMotorPortLetters(int) -> bitFieldToMotorPortLetters
    void afterConnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> afterConnect
    void beforeDisconnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> beforeDisconnect
    void onDelete() -> onDelete
com.google.appinventor.components.runtime.LegoMindstormsEv3Sensor -> com.google.appinventor.components.runtime.LegoMindstormsEv3Sensor:
    java.lang.String DEFAULT_SENSOR_PORT -> DEFAULT_SENSOR_PORT
    int sensorPortNumber -> sensorPortNumber
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,java.lang.String) -> <init>
    java.lang.String SensorPort() -> SensorPort
    void SensorPort(java.lang.String) -> SensorPort
    void setSensorPort(java.lang.String,java.lang.String) -> setSensorPort
    int readInputPercentage(java.lang.String,int,int,int,int) -> readInputPercentage
    double readInputSI(java.lang.String,int,int,int,int) -> readInputSI
com.google.appinventor.components.runtime.LegoMindstormsNxtBase -> com.google.appinventor.components.runtime.LegoMindstormsNxtBase:
    java.util.Map ERROR_MESSAGES -> c
    java.lang.String logTag -> logTag
    com.google.appinventor.components.runtime.BluetoothClient bluetooth -> bluetooth
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,java.lang.String) -> <init>
    void <init>() -> <init>
    void Initialize() -> Initialize
    com.google.appinventor.components.runtime.BluetoothClient BluetoothClient() -> BluetoothClient
    void BluetoothClient(com.google.appinventor.components.runtime.BluetoothClient) -> BluetoothClient
    void setOutputState(java.lang.String,int,int,int,int,int,int,long) -> setOutputState
    void setInputMode(java.lang.String,int,int,int) -> setInputMode
    byte[] getInputValues(java.lang.String,int) -> getInputValues
    void resetInputScaledValue(java.lang.String,int) -> resetInputScaledValue
    int lsGetStatus(java.lang.String,int) -> lsGetStatus
    void lsWrite(java.lang.String,int,byte[],int) -> lsWrite
    byte[] lsRead(java.lang.String,int) -> lsRead
    boolean checkBluetooth(java.lang.String) -> checkBluetooth
    byte[] sendCommandAndReceiveReturnPackage(java.lang.String,byte[]) -> sendCommandAndReceiveReturnPackage
    void sendCommand(java.lang.String,byte[]) -> sendCommand
    byte[] receiveReturnPackage(java.lang.String) -> a
    boolean evaluateStatus(java.lang.String,byte[],byte) -> evaluateStatus
    int getStatus(java.lang.String,byte[],byte) -> getStatus
    void handleError(java.lang.String,int) -> a
    void copyBooleanValueToBytes(boolean,byte[],int) -> copyBooleanValueToBytes
    void copySBYTEValueToBytes(int,byte[],int) -> copySBYTEValueToBytes
    void copyUBYTEValueToBytes(int,byte[],int) -> copyUBYTEValueToBytes
    void copySWORDValueToBytes(int,byte[],int) -> copySWORDValueToBytes
    void copyUWORDValueToBytes(int,byte[],int) -> copyUWORDValueToBytes
    void copySLONGValueToBytes(int,byte[],int) -> copySLONGValueToBytes
    void copyULONGValueToBytes(long,byte[],int) -> copyULONGValueToBytes
    void copyStringValueToBytes(java.lang.String,byte[],int,int) -> copyStringValueToBytes
    boolean getBooleanValueFromBytes(byte[],int) -> getBooleanValueFromBytes
    int getSBYTEValueFromBytes(byte[],int) -> getSBYTEValueFromBytes
    int getUBYTEValueFromBytes(byte[],int) -> getUBYTEValueFromBytes
    int getSWORDValueFromBytes(byte[],int) -> getSWORDValueFromBytes
    int getUWORDValueFromBytes(byte[],int) -> getUWORDValueFromBytes
    int getSLONGValueFromBytes(byte[],int) -> getSLONGValueFromBytes
    long getULONGValueFromBytes(byte[],int) -> getULONGValueFromBytes
    java.lang.String getStringValueFromBytes(byte[],int) -> getStringValueFromBytes
    java.lang.String getStringValueFromBytes(byte[],int,int) -> getStringValueFromBytes
    int convertMotorPortLetterToNumber(java.lang.String) -> convertMotorPortLetterToNumber
    int convertMotorPortLetterToNumber(char) -> convertMotorPortLetterToNumber
    int convertSensorPortLetterToNumber(java.lang.String) -> convertSensorPortLetterToNumber
    int convertSensorPortLetterToNumber(char) -> convertSensorPortLetterToNumber
    int sanitizePower(int) -> sanitizePower
    int sanitizeTurnRatio(int) -> sanitizeTurnRatio
    void afterConnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> afterConnect
    void beforeDisconnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> beforeDisconnect
    void onDelete() -> onDelete
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.LegoMindstormsNxtSensor -> com.google.appinventor.components.runtime.LegoMindstormsNxtSensor:
    java.lang.String sensorPortLetter -> aF
    int port -> port
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,java.lang.String) -> <init>
    java.lang.String SensorPort() -> SensorPort
    void SensorPort(java.lang.String) -> SensorPort
    void setSensorPort(java.lang.String) -> setSensorPort
    void afterConnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> afterConnect
    void initializeSensor(java.lang.String) -> initializeSensor
com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue -> com.google.appinventor.components.runtime.aL:
    boolean valid -> aG
    java.lang.Object value -> m
    void <init>(boolean,java.lang.Object) -> <init>
com.google.appinventor.components.runtime.LightSensor -> com.google.appinventor.components.runtime.LightSensor:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onValueChanged(float) -> onValueChanged
    void LightChanged(float) -> LightChanged
    float Lux() -> Lux
    float AverageLux() -> AverageLux
com.google.appinventor.components.runtime.LineString -> com.google.appinventor.components.runtime.LineString:
    java.lang.String TAG -> aG
    java.util.List points -> k
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor distanceComputation -> b
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> <init>
    java.lang.String Type() -> Type
    com.google.appinventor.components.runtime.util.YailList Points() -> Points
    void Points(com.google.appinventor.components.runtime.util.YailList) -> Points
    void PointsFromString(java.lang.String) -> PointsFromString
    void StrokeWidth(int) -> StrokeWidth
    java.util.List getPoints() -> getPoints
    java.lang.Object accept(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor,java.lang.Object[]) -> accept
    org.locationtech.jts.geom.Geometry computeGeometry() -> computeGeometry
    void updatePoints(java.util.List) -> updatePoints
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.LineString$1 -> com.google.appinventor.components.runtime.aM:
    void <init>() -> <init>
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.LinearLayout -> com.google.appinventor.components.runtime.LinearLayout:
    android.widget.LinearLayout layoutManager -> b
    void <init>(android.content.Context,int) -> <init>
    void <init>(android.content.Context,int,java.lang.Integer,java.lang.Integer) -> <init>
    android.view.ViewGroup getLayoutManager() -> getLayoutManager
    void add(com.google.appinventor.components.runtime.AndroidViewComponent) -> add
    void setHorizontalGravity(int) -> setHorizontalGravity
    void setVerticalGravity(int) -> setVerticalGravity
    void setBaselineAligned(boolean) -> setBaselineAligned
com.google.appinventor.components.runtime.LinearLayout$1 -> com.google.appinventor.components.runtime.aN:
    java.lang.Integer val$preferredEmptyWidth -> a
    java.lang.Integer val$preferredEmptyHeight -> b
    com.google.appinventor.components.runtime.LinearLayout this$0 -> c
    void <init>(com.google.appinventor.components.runtime.LinearLayout,android.content.Context,java.lang.Integer,java.lang.Integer) -> <init>
    void onMeasure(int,int) -> onMeasure
    int getSize(int,int) -> a
com.google.appinventor.components.runtime.ListPicker -> com.google.appinventor.components.runtime.ListPicker:
    java.lang.String LIST_ACTIVITY_CLASS -> aH
    java.lang.String LIST_ACTIVITY_ARG_NAME -> aI
    java.lang.String LIST_ACTIVITY_RESULT_NAME -> aJ
    java.lang.String LIST_ACTIVITY_RESULT_INDEX -> aK
    java.lang.String LIST_ACTIVITY_ANIM_TYPE -> aL
    java.lang.String LIST_ACTIVITY_SHOW_SEARCH_BAR -> aM
    java.lang.String LIST_ACTIVITY_TITLE -> aN
    java.lang.String LIST_ACTIVITY_ORIENTATION_TYPE -> aO
    java.lang.String LIST_ACTIVITY_ITEM_TEXT_COLOR -> aP
    java.lang.String LIST_ACTIVITY_BACKGROUND_COLOR -> aQ
    com.google.appinventor.components.runtime.util.YailList items -> b
    java.lang.String selection -> aR
    int selectionIndex -> aB
    boolean showFilter -> aH
    java.lang.String title -> title
    boolean resumedFromListFlag -> aI
    int itemTextColor -> aC
    int itemBackgroundColor -> aD
    int DEFAULT_ITEM_TEXT_COLOR -> DEFAULT_ITEM_TEXT_COLOR
    int DEFAULT_ITEM_BACKGROUND_COLOR -> DEFAULT_ITEM_BACKGROUND_COLOR
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onResume() -> onResume
    java.lang.String Selection() -> Selection
    void Selection(java.lang.String) -> Selection
    void ShowFilterBar(boolean) -> ShowFilterBar
    boolean ShowFilterBar() -> ShowFilterBar
    void ItemTextColor(int) -> ItemTextColor
    int ItemTextColor() -> ItemTextColor
    void ItemBackgroundColor(int) -> ItemBackgroundColor
    int ItemBackgroundColor() -> ItemBackgroundColor
    int SelectionIndex() -> SelectionIndex
    void SelectionIndex(int) -> SelectionIndex
    com.google.appinventor.components.runtime.util.YailList Elements() -> Elements
    void Elements(com.google.appinventor.components.runtime.util.YailList) -> Elements
    void ElementsFromString(java.lang.String) -> ElementsFromString
    java.lang.String Title() -> Title
    void Title(java.lang.String) -> Title
    android.content.Intent getIntent() -> getIntent
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void onDelete() -> onDelete
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.ListPickerActivity -> com.google.appinventor.components.runtime.ListPickerActivity:
    java.lang.String closeAnim -> aS
    android.widget.ListView listView -> a
    com.google.appinventor.components.runtime.ListPickerActivity$MyAdapter adapter -> a
    android.widget.EditText txtSearchBox -> a
    int itemColor -> aE
    int backgroundColor -> K
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onBackPressed() -> onBackPressed
com.google.appinventor.components.runtime.ListPickerActivity$1 -> com.google.appinventor.components.runtime.aO:
    com.google.appinventor.components.runtime.ListPickerActivity this$0 -> a
    void <init>(com.google.appinventor.components.runtime.ListPickerActivity) -> <init>
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.google.appinventor.components.runtime.ListPickerActivity$MyAdapter -> com.google.appinventor.components.runtime.aP:
    android.content.Context mContext -> b
    void <init>(android.content.Context,java.lang.String[]) -> <init>
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.google.appinventor.components.runtime.ListView -> com.google.appinventor.components.runtime.ListView:
    android.widget.ListView view -> b
    android.widget.EditText txtSearchBox -> a
    com.google.appinventor.components.runtime.ComponentContainer container -> container
    android.widget.LinearLayout listViewLayout -> c
    android.widget.ArrayAdapter adapter -> a
    android.widget.ArrayAdapter adapterCopy -> b
    com.google.appinventor.components.runtime.util.YailList items -> b
    int selectionIndex -> aB
    java.lang.String selection -> aR
    boolean showFilter -> aH
    int backgroundColor -> K
    int textColor -> M
    int selectionColor -> aF
    android.graphics.drawable.Drawable UNSELECTED_DRAWABLE -> e
    android.graphics.drawable.Drawable selectionDrawable -> f
    android.view.View lastSelected -> c
    int textSize -> aG
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.view.View getView() -> getView
    void Height(int) -> Height
    void Width(int) -> Width
    void ShowFilterBar(boolean) -> ShowFilterBar
    boolean ShowFilterBar() -> ShowFilterBar
    void Elements(com.google.appinventor.components.runtime.util.YailList) -> Elements
    com.google.appinventor.components.runtime.util.YailList Elements() -> Elements
    void ElementsFromString(java.lang.String) -> ElementsFromString
    void setAdapterData() -> setAdapterData
    android.text.Spannable[] itemsToColoredText() -> itemsToColoredText
    int SelectionIndex() -> SelectionIndex
    void SelectionIndex(int) -> SelectionIndex
    java.lang.String Selection() -> Selection
    void Selection(java.lang.String) -> Selection
    void updateSelectionIndex() -> G
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    void AfterPicking() -> AfterPicking
    void setBackgroundColor(int) -> setBackgroundColor
    int BackgroundColor() -> BackgroundColor
    void BackgroundColor(int) -> BackgroundColor
    int SelectionColor() -> SelectionColor
    void SelectionColor(int) -> SelectionColor
    int TextColor() -> TextColor
    void TextColor(int) -> TextColor
    int TextSize() -> TextSize
    void TextSize(int) -> TextSize
    android.widget.ArrayAdapter access$000(com.google.appinventor.components.runtime.ListView) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.ListView$1 -> com.google.appinventor.components.runtime.aQ:
    com.google.appinventor.components.runtime.ListView this$0 -> a
    void <init>(com.google.appinventor.components.runtime.ListView) -> <init>
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.google.appinventor.components.runtime.LocationSensor -> com.google.appinventor.components.runtime.LocationSensor:
    int UNKNOWN_VALUE -> UNKNOWN_VALUE
    android.location.Criteria locationCriteria -> a
    android.os.Handler handler -> e
    android.location.LocationManager locationManager -> a
    java.util.Set listeners -> n
    boolean providerLocked -> aJ
    java.lang.String providerName -> aT
    boolean initialized -> initialized
    int timeInterval -> aH
    int distanceInterval -> aI
    com.google.appinventor.components.runtime.LocationSensor$MyLocationListener myLocationListener -> a
    android.location.LocationProvider locationProvider -> a
    boolean listening -> p
    java.util.List allProviders -> l
    android.location.Location lastLocation -> a
    double longitude -> b
    double latitude -> a
    double altitude -> h
    float speed -> speed
    boolean hasLocationData -> aK
    boolean hasAltitude -> aL
    android.os.Handler androidUIHandler -> f
    android.location.Geocoder geocoder -> a
    boolean enabled -> enabled
    boolean havePermission -> F
    java.lang.String LOG_TAG -> aU
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,boolean) -> <init>
    void Initialize() -> Initialize
    void LocationChanged(double,double,double,float) -> LocationChanged
    void StatusChanged(java.lang.String,java.lang.String) -> StatusChanged
    java.lang.String ProviderName() -> ProviderName
    void ProviderName(java.lang.String) -> ProviderName
    boolean ProviderLocked() -> ProviderLocked
    void ProviderLocked(boolean) -> ProviderLocked
    void TimeInterval(int) -> TimeInterval
    int TimeInterval() -> TimeInterval
    void DistanceInterval(int) -> DistanceInterval
    int DistanceInterval() -> DistanceInterval
    boolean HasLongitudeLatitude() -> HasLongitudeLatitude
    boolean HasAltitude() -> HasAltitude
    boolean HasAccuracy() -> HasAccuracy
    double Longitude() -> Longitude
    double Latitude() -> Latitude
    double Altitude() -> Altitude
    double Accuracy() -> Accuracy
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    java.lang.String CurrentAddress() -> CurrentAddress
    double LatitudeFromAddress(java.lang.String) -> LatitudeFromAddress
    double LongitudeFromAddress(java.lang.String) -> LongitudeFromAddress
    java.util.List AvailableProviders() -> AvailableProviders
    void RefreshProvider(java.lang.String) -> RefreshProvider
    boolean startProvider(java.lang.String) -> d
    void stopListening() -> stopListening
    void onResume() -> onResume
    void onStop() -> onStop
    void onDelete() -> onDelete
    void addListener(com.google.appinventor.components.runtime.LocationSensor$LocationSensorListener) -> addListener
    void removeListener(com.google.appinventor.components.runtime.LocationSensor$LocationSensorListener) -> removeListener
    boolean empty(java.lang.String) -> e
    android.location.Location access$002(com.google.appinventor.components.runtime.LocationSensor,android.location.Location) -> a
    double access$102(com.google.appinventor.components.runtime.LocationSensor,double) -> a
    double access$202(com.google.appinventor.components.runtime.LocationSensor,double) -> b
    float access$302(com.google.appinventor.components.runtime.LocationSensor,float) -> a
    boolean access$402(com.google.appinventor.components.runtime.LocationSensor,boolean) -> a
    double access$502(com.google.appinventor.components.runtime.LocationSensor,double) -> c
    double access$100(com.google.appinventor.components.runtime.LocationSensor) -> a
    double access$200(com.google.appinventor.components.runtime.LocationSensor) -> b
    boolean access$602(com.google.appinventor.components.runtime.LocationSensor,boolean) -> b
    double access$500(com.google.appinventor.components.runtime.LocationSensor) -> c
    float access$300(com.google.appinventor.components.runtime.LocationSensor) -> a
    java.util.Set access$700(com.google.appinventor.components.runtime.LocationSensor) -> a
    android.os.Handler access$800(com.google.appinventor.components.runtime.LocationSensor) -> a
    void access$900(com.google.appinventor.components.runtime.LocationSensor) -> a
    boolean access$1000(com.google.appinventor.components.runtime.LocationSensor) -> a
    java.lang.String access$1100(com.google.appinventor.components.runtime.LocationSensor) -> a
    java.util.List access$1200(com.google.appinventor.components.runtime.LocationSensor) -> a
    boolean access$1402(com.google.appinventor.components.runtime.LocationSensor,boolean) -> c
    java.lang.String access$1500() -> b
    boolean access$1002(com.google.appinventor.components.runtime.LocationSensor,boolean) -> d
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.LocationSensor$1 -> com.google.appinventor.components.runtime.aR:
    com.google.appinventor.components.runtime.LocationSensor val$me -> a
    java.lang.String val$caller -> aV
    com.google.appinventor.components.runtime.LocationSensor this$0 -> b
    void <init>(com.google.appinventor.components.runtime.LocationSensor,com.google.appinventor.components.runtime.LocationSensor,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.LocationSensor$1$1 -> com.google.appinventor.components.runtime.aS:
    com.google.appinventor.components.runtime.LocationSensor$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.LocationSensor$1) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.LocationSensor$LocationSensorListener -> com.google.appinventor.components.runtime.LocationSensor$LocationSensorListener:
    void onTimeIntervalChanged(int) -> onTimeIntervalChanged
    void onDistanceIntervalChanged(int) -> onDistanceIntervalChanged
    void setSource(com.google.appinventor.components.runtime.LocationSensor) -> setSource
com.google.appinventor.components.runtime.LocationSensor$MyLocationListener -> com.google.appinventor.components.runtime.aT:
    com.google.appinventor.components.runtime.LocationSensor this$0 -> c
    void <init>(com.google.appinventor.components.runtime.LocationSensor) -> <init>
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void <init>(com.google.appinventor.components.runtime.LocationSensor,com.google.appinventor.components.runtime.LocationSensor$1) -> <init>
com.google.appinventor.components.runtime.LocationSensor$MyLocationListener$1 -> com.google.appinventor.components.runtime.aU:
    double val$argLatitude -> i
    double val$argLongitude -> j
    double val$argAltitude -> k
    float val$argSpeed -> n
    android.location.Location val$location -> b
    com.google.appinventor.components.runtime.LocationSensor$MyLocationListener this$1 -> b
    void <init>(com.google.appinventor.components.runtime.LocationSensor$MyLocationListener,double,double,double,float,android.location.Location) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.MagneticFieldSensor -> com.google.appinventor.components.runtime.MagneticFieldSensor:
    double absoluteStrength -> l
    boolean enabled -> enabled
    boolean listening -> p
    android.hardware.Sensor magneticSensor -> c
    android.hardware.SensorManager sensorManager -> c
    float xStrength -> o
    float yStrength -> p
    float zStrength -> q
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean Available() -> Available
    float MaximumRange() -> MaximumRange
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    void MagneticChanged(float,float,float,double) -> MagneticChanged
    double AbsoluteStrength() -> AbsoluteStrength
    float XStrength() -> XStrength
    float YStrength() -> YStrength
    float ZStrength() -> ZStrength
    void onResume() -> onResume
    void onStop() -> onStop
    void onDelete() -> onDelete
    void onPause() -> onPause
    void startListening() -> startListening
    void stopListening() -> stopListening
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
com.google.appinventor.components.runtime.Map -> com.google.appinventor.components.runtime.Map:
    java.lang.String TAG -> aW
    com.google.appinventor.components.runtime.util.MapFactory$MapController mapController -> a
    com.google.appinventor.components.runtime.LocationSensor sensor -> d
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.view.View getView() -> getView
    void CenterFromString(java.lang.String) -> CenterFromString
    double Latitude() -> Latitude
    double Longitude() -> Longitude
    void ZoomLevel(int) -> ZoomLevel
    int ZoomLevel() -> ZoomLevel
    void EnableZoom(boolean) -> EnableZoom
    boolean EnableZoom() -> EnableZoom
    void Rotation(float) -> Rotation
    float Rotation() -> Rotation
    void MapType(int) -> MapType
    int MapType() -> MapType
    void ShowCompass(boolean) -> ShowCompass
    boolean ShowCompass() -> ShowCompass
    void ShowZoom(boolean) -> ShowZoom
    boolean ShowZoom() -> ShowZoom
    void ShowUser(boolean) -> ShowUser
    boolean ShowUser() -> ShowUser
    void EnableRotation(boolean) -> EnableRotation
    boolean EnableRotation() -> EnableRotation
    void EnablePan(boolean) -> EnablePan
    boolean EnablePan() -> EnablePan
    void BoundingBox(com.google.appinventor.components.runtime.util.YailList) -> BoundingBox
    com.google.appinventor.components.runtime.util.YailList BoundingBox() -> BoundingBox
    com.google.appinventor.components.runtime.util.YailList Features() -> Features
    void LocationSensor(com.google.appinventor.components.runtime.LocationSensor) -> LocationSensor
    com.google.appinventor.components.runtime.LocationSensor LocationSensor() -> LocationSensor
    void ShowScale(boolean) -> ShowScale
    boolean ShowScale() -> ShowScale
    void ScaleUnits(int) -> ScaleUnits
    int ScaleUnits() -> ScaleUnits
    double UserLatitude() -> UserLatitude
    double UserLongitude() -> UserLongitude
    void PanTo(double,double,int) -> PanTo
    com.google.appinventor.components.runtime.Marker CreateMarker(double,double) -> CreateMarker
    void Save(java.lang.String) -> Save
    void Ready() -> Ready
    void BoundsChange() -> BoundsChange
    void ZoomChange() -> ZoomChange
    void InvalidPoint(java.lang.String) -> InvalidPoint
    void TapAtPoint(double,double) -> TapAtPoint
    void DoubleTapAtPoint(double,double) -> DoubleTapAtPoint
    void LongPressAtPoint(double,double) -> LongPressAtPoint
    com.google.appinventor.components.runtime.util.MapFactory$MapController getController() -> getController
    void onReady(com.google.appinventor.components.runtime.util.MapFactory$MapController) -> onReady
    void onBoundsChanged() -> onBoundsChanged
    void onZoom() -> onZoom
    void onSingleTap(double,double) -> onSingleTap
    void onDoubleTap(double,double) -> onDoubleTap
    void onLongPress(double,double) -> onLongPress
    void onFeatureClick(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureClick
    void onFeatureLongPress(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureLongPress
    void onFeatureStartDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureStartDrag
    void onFeatureDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureDrag
    void onFeatureStopDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureStopDrag
    com.google.appinventor.components.runtime.Map getMap() -> getMap
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> addFeature
    void removeFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> removeFeature
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Map$1 -> com.google.appinventor.components.runtime.aV:
    java.util.List val$featuresToSave -> m
    java.lang.String val$path -> aX
    com.google.appinventor.components.runtime.Map this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Map,java.util.List,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$1$1 -> com.google.appinventor.components.runtime.aW:
    com.google.appinventor.components.runtime.Form val$form -> t
    java.io.IOException val$e -> a
    com.google.appinventor.components.runtime.Map$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Map$1,com.google.appinventor.components.runtime.Form,java.io.IOException) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$10 -> com.google.appinventor.components.runtime.aX:
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature val$feature -> a
    com.google.appinventor.components.runtime.Map this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Map,com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$11 -> com.google.appinventor.components.runtime.aY:
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature val$feature -> b
    com.google.appinventor.components.runtime.Map this$0 -> c
    void <init>(com.google.appinventor.components.runtime.Map,com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$12 -> com.google.appinventor.components.runtime.aZ:
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature val$feature -> c
    com.google.appinventor.components.runtime.Map this$0 -> d
    void <init>(com.google.appinventor.components.runtime.Map,com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$13 -> com.google.appinventor.components.runtime.ba:
    int[] $SwitchMap$com$google$appinventor$components$runtime$util$MapFactory$MapScaleUnits -> b
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Map$2 -> com.google.appinventor.components.runtime.bb:
    com.google.appinventor.components.runtime.Map this$0 -> e
    void <init>(com.google.appinventor.components.runtime.Map) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$3 -> com.google.appinventor.components.runtime.bc:
    com.google.appinventor.components.runtime.Map this$0 -> f
    void <init>(com.google.appinventor.components.runtime.Map) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$4 -> com.google.appinventor.components.runtime.bd:
    com.google.appinventor.components.runtime.Map this$0 -> g
    void <init>(com.google.appinventor.components.runtime.Map) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$5 -> com.google.appinventor.components.runtime.be:
    double val$latitude -> m
    double val$longitude -> n
    com.google.appinventor.components.runtime.Map this$0 -> h
    void <init>(com.google.appinventor.components.runtime.Map,double,double) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$6 -> com.google.appinventor.components.runtime.bf:
    double val$latitude -> o
    double val$longitude -> p
    com.google.appinventor.components.runtime.Map this$0 -> i
    void <init>(com.google.appinventor.components.runtime.Map,double,double) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$7 -> com.google.appinventor.components.runtime.bg:
    double val$latitude -> q
    double val$longitude -> r
    com.google.appinventor.components.runtime.Map this$0 -> j
    void <init>(com.google.appinventor.components.runtime.Map,double,double) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$8 -> com.google.appinventor.components.runtime.bh:
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature val$feature -> d
    com.google.appinventor.components.runtime.Map this$0 -> k
    void <init>(com.google.appinventor.components.runtime.Map,com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Map$9 -> com.google.appinventor.components.runtime.bi:
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature val$feature -> e
    com.google.appinventor.components.runtime.Map this$0 -> l
    void <init>(com.google.appinventor.components.runtime.Map,com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.MapFeatureBase -> com.google.appinventor.components.runtime.MapFeatureBase:
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer container -> container
    com.google.appinventor.components.runtime.Map map -> map
    boolean visible -> visible
    int strokeColor -> aJ
    float strokeOpacity -> r
    int strokeWidth -> aK
    java.lang.String title -> title
    java.lang.String description -> aY
    boolean draggable -> aM
    boolean infobox -> aN
    org.osmdroid.util.GeoPoint centroid -> b
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor distanceComputation -> c
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor distanceToPoint -> d
    org.locationtech.jts.geom.Geometry geometry -> a
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor) -> <init>
    void setMap(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> setMap
    void removeFromMap() -> removeFromMap
    void Visible(boolean) -> Visible
    boolean Visible() -> Visible
    void StrokeColor(int) -> StrokeColor
    int StrokeColor() -> StrokeColor
    void StrokeOpacity(float) -> StrokeOpacity
    float StrokeOpacity() -> StrokeOpacity
    void StrokeWidth(int) -> StrokeWidth
    int StrokeWidth() -> StrokeWidth
    void Draggable(boolean) -> Draggable
    boolean Draggable() -> Draggable
    void Title(java.lang.String) -> Title
    java.lang.String Title() -> Title
    void Description(java.lang.String) -> Description
    java.lang.String Description() -> Description
    void EnableInfobox(boolean) -> EnableInfobox
    boolean EnableInfobox() -> EnableInfobox
    void ShowInfobox() -> ShowInfobox
    void HideInfobox() -> HideInfobox
    com.google.appinventor.components.runtime.util.YailList Centroid() -> Centroid
    double DistanceToPoint(double,double,boolean) -> DistanceToPoint
    double DistanceToFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,boolean) -> DistanceToFeature
    void Click() -> Click
    void LongClick() -> LongClick
    void StartDrag() -> StartDrag
    void Drag() -> Drag
    void StopDrag() -> StopDrag
    com.google.appinventor.components.runtime.HandlesEventDispatching getDispatchDelegate() -> getDispatchDelegate
    org.osmdroid.api.IGeoPoint getCentroid() -> getCentroid
    org.locationtech.jts.geom.Geometry getGeometry() -> getGeometry
    void clearGeometry() -> clearGeometry
    org.locationtech.jts.geom.Geometry computeGeometry() -> computeGeometry
com.google.appinventor.components.runtime.MapFeatureBase$1 -> com.google.appinventor.components.runtime.bj:
    com.google.appinventor.components.runtime.MapFeatureBase this$0 -> a
    void <init>(com.google.appinventor.components.runtime.MapFeatureBase) -> <init>
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.MapFeatureBaseWithFill -> com.google.appinventor.components.runtime.MapFeatureBaseWithFill:
    int fillColor -> aL
    float fillOpacity -> s
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor) -> <init>
    void FillColor(int) -> FillColor
    int FillColor() -> FillColor
    void FillOpacity(float) -> FillOpacity
    float FillOpacity() -> FillOpacity
com.google.appinventor.components.runtime.MapFeatureContainerBase -> com.google.appinventor.components.runtime.MapFeatureContainerBase:
    java.lang.String TAG -> aZ
    java.util.List features -> features
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor featureAdder -> e
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Features(com.google.appinventor.components.runtime.util.YailList) -> Features
    com.google.appinventor.components.runtime.util.YailList Features() -> Features
    void FeatureClick(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureClick
    void FeatureLongClick(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureLongClick
    void FeatureStartDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureStartDrag
    void FeatureDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureDrag
    void FeatureStopDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureStopDrag
    void LoadFromURL(java.lang.String) -> LoadFromURL
    java.lang.Object FeatureFromDescription(com.google.appinventor.components.runtime.util.YailList) -> FeatureFromDescription
    void GotFeatures(java.lang.String,com.google.appinventor.components.runtime.util.YailList) -> GotFeatures
    void LoadError(java.lang.String,int,java.lang.String) -> LoadError
    android.app.Activity $context() -> $context
    com.google.appinventor.components.runtime.Form $form() -> $form
    void $add(com.google.appinventor.components.runtime.AndroidViewComponent) -> $add
    void setChildWidth(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildWidth
    void setChildHeight(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildHeight
    void removeFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> removeFeature
    java.util.Iterator iterator() -> iterator
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> addFeature
    void performGet(java.lang.String) -> h
    java.lang.String loadUrl(java.lang.String) -> e
    void processGeoJSON(java.lang.String,java.lang.String) -> processGeoJSON
    void access$000(com.google.appinventor.components.runtime.MapFeatureContainerBase,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.MapFeatureContainerBase$1 -> com.google.appinventor.components.runtime.bk:
    com.google.appinventor.components.runtime.MapFeatureContainerBase this$0 -> a
    void <init>(com.google.appinventor.components.runtime.MapFeatureContainerBase) -> <init>
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.MapFeatureContainerBase$2 -> com.google.appinventor.components.runtime.bl:
    java.lang.String val$url -> ba
    com.google.appinventor.components.runtime.MapFeatureContainerBase this$0 -> b
    void <init>(com.google.appinventor.components.runtime.MapFeatureContainerBase,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.MapFeatureContainerBase$3 -> com.google.appinventor.components.runtime.bm:
    java.lang.String val$url -> bb
    int val$responseCode -> aM
    java.lang.String val$responseMessage -> bc
    com.google.appinventor.components.runtime.MapFeatureContainerBase this$0 -> c
    void <init>(com.google.appinventor.components.runtime.MapFeatureContainerBase,java.lang.String,int,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.MapFeatureContainerBase$4 -> com.google.appinventor.components.runtime.bn:
    java.lang.String val$url -> bd
    com.google.appinventor.components.runtime.MapFeatureContainerBase this$0 -> d
    void <init>(com.google.appinventor.components.runtime.MapFeatureContainerBase,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.MapFeatureContainerBase$5 -> com.google.appinventor.components.runtime.bo:
    java.lang.String val$url -> be
    com.google.appinventor.components.runtime.MapFeatureContainerBase this$0 -> e
    void <init>(com.google.appinventor.components.runtime.MapFeatureContainerBase,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.MapFeatureContainerBase$6 -> com.google.appinventor.components.runtime.bp:
    java.lang.String val$url -> bf
    com.google.appinventor.components.runtime.MapFeatureContainerBase this$0 -> f
    void <init>(com.google.appinventor.components.runtime.MapFeatureContainerBase,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.MapFeatureContainerBase$7 -> com.google.appinventor.components.runtime.bq:
    java.lang.String val$url -> bg
    java.util.List val$yailFeatures -> n
    com.google.appinventor.components.runtime.MapFeatureContainerBase this$0 -> g
    void <init>(com.google.appinventor.components.runtime.MapFeatureContainerBase,java.lang.String,java.util.List) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Marker -> com.google.appinventor.components.runtime.Marker:
    java.lang.String TAG -> bh
    java.lang.String imagePath -> K
    int anchorHAlign -> aN
    int anchorVAlign -> aO
    org.osmdroid.util.GeoPoint location -> c
    int width -> aP
    int height -> aQ
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor distanceComputation -> f
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor bearingComputation -> g
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> <init>
    java.lang.String Type() -> Type
    void Latitude(double) -> Latitude
    double Latitude() -> Latitude
    void Longitude(double) -> Longitude
    double Longitude() -> Longitude
    void ImageAsset(java.lang.String) -> ImageAsset
    java.lang.String ImageAsset() -> ImageAsset
    void StrokeColor(int) -> StrokeColor
    void AnchorHorizontal(int) -> AnchorHorizontal
    int AnchorHorizontal() -> AnchorHorizontal
    void AnchorVertical(int) -> AnchorVertical
    int AnchorVertical() -> AnchorVertical
    void ShowShadow(boolean) -> ShowShadow
    boolean ShowShadow() -> ShowShadow
    void Width(int) -> Width
    int Width() -> Width
    void WidthPercent(int) -> WidthPercent
    void Height(int) -> Height
    int Height() -> Height
    void HeightPercent(int) -> HeightPercent
    void SetLocation(double,double) -> SetLocation
    double DistanceToPoint(double,double,boolean) -> DistanceToPoint
    double DistanceToPoint(double,double) -> DistanceToPoint
    double BearingToPoint(double,double) -> BearingToPoint
    double BearingToFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,boolean) -> BearingToFeature
    org.osmdroid.api.IGeoPoint getLocation() -> getLocation
    void updateLocation(double,double) -> updateLocation
    java.lang.Object accept(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor,java.lang.Object[]) -> accept
    org.locationtech.jts.geom.Geometry computeGeometry() -> computeGeometry
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Marker$1 -> com.google.appinventor.components.runtime.br:
    void <init>() -> <init>
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.Marker$2 -> com.google.appinventor.components.runtime.bs:
    void <init>() -> <init>
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.Navigation -> com.google.appinventor.components.runtime.Navigation:
    java.lang.String OPEN_ROUTE_SERVICE_URL -> OPEN_ROUTE_SERVICE_URL
    java.lang.String apiKey -> bi
    org.osmdroid.util.GeoPoint startLocation -> d
    org.osmdroid.util.GeoPoint endLocation -> e
    com.google.appinventor.components.runtime.Navigation$TransportMethod method -> a
    java.lang.String serviceUrl -> bj
    java.lang.String language -> bk
    com.google.appinventor.components.runtime.util.YailDictionary lastResponse -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void RequestDirections() -> RequestDirections
    void ServiceURL(java.lang.String) -> ServiceURL
    void ApiKey(java.lang.String) -> ApiKey
    void StartLatitude(double) -> StartLatitude
    double StartLatitude() -> StartLatitude
    void StartLongitude(double) -> StartLongitude
    double StartLongitude() -> StartLongitude
    void StartLocation(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> StartLocation
    void EndLatitude(double) -> EndLatitude
    double EndLatitude() -> EndLatitude
    void EndLongitude(double) -> EndLongitude
    double EndLongitude() -> EndLongitude
    java.lang.String TransportationMethod() -> TransportationMethod
    void TransportationMethod(java.lang.String) -> TransportationMethod
    void EndLocation(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> EndLocation
    void Language(java.lang.String) -> Language
    java.lang.String Language() -> Language
    com.google.appinventor.components.runtime.util.YailDictionary ResponseContent() -> ResponseContent
    void GotDirections(com.google.appinventor.components.runtime.util.YailList,com.google.appinventor.components.runtime.util.YailList,double,double) -> GotDirections
    void performRequest(org.osmdroid.util.GeoPoint,org.osmdroid.util.GeoPoint,com.google.appinventor.components.runtime.Navigation$TransportMethod) -> a
    java.lang.String getResponseContent(java.net.HttpURLConnection) -> a
    java.lang.Double[][] getCoordinates(org.osmdroid.util.GeoPoint,org.osmdroid.util.GeoPoint) -> a
    com.google.appinventor.components.runtime.util.YailList getLineStringCoords(com.google.appinventor.components.runtime.util.YailDictionary) -> a
    java.util.List getDirections(com.google.appinventor.components.runtime.util.YailDictionary) -> a
    void access$000(com.google.appinventor.components.runtime.Navigation,org.osmdroid.util.GeoPoint,org.osmdroid.util.GeoPoint,com.google.appinventor.components.runtime.Navigation$TransportMethod) -> a
    com.google.appinventor.components.runtime.util.YailDictionary access$202(com.google.appinventor.components.runtime.Navigation,com.google.appinventor.components.runtime.util.YailDictionary) -> a
com.google.appinventor.components.runtime.Navigation$1 -> com.google.appinventor.components.runtime.bt:
    org.osmdroid.util.GeoPoint val$startLocation -> f
    org.osmdroid.util.GeoPoint val$endLocation -> g
    com.google.appinventor.components.runtime.Navigation$TransportMethod val$method -> b
    com.google.appinventor.components.runtime.Navigation this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Navigation,org.osmdroid.util.GeoPoint,org.osmdroid.util.GeoPoint,com.google.appinventor.components.runtime.Navigation$TransportMethod) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Navigation$2 -> com.google.appinventor.components.runtime.bu:
    com.google.appinventor.components.runtime.util.YailDictionary val$response -> b
    com.google.appinventor.components.runtime.util.YailList val$directions -> c
    com.google.appinventor.components.runtime.util.YailList val$coordinates -> d
    double val$distance -> s
    double val$duration -> t
    com.google.appinventor.components.runtime.Navigation this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Navigation,com.google.appinventor.components.runtime.util.YailDictionary,com.google.appinventor.components.runtime.util.YailList,com.google.appinventor.components.runtime.util.YailList,double,double) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Navigation$TransportMethod -> com.google.appinventor.components.runtime.bv:
    com.google.appinventor.components.runtime.Navigation$TransportMethod DEFAULT -> c
    com.google.appinventor.components.runtime.Navigation$TransportMethod DRIVING -> d
    com.google.appinventor.components.runtime.Navigation$TransportMethod CYCLING -> e
    com.google.appinventor.components.runtime.Navigation$TransportMethod WALKING -> f
    com.google.appinventor.components.runtime.Navigation$TransportMethod WHEELCHAIR -> g
    java.lang.String method -> bl
    com.google.appinventor.components.runtime.Navigation$TransportMethod[] $VALUES -> a
    com.google.appinventor.components.runtime.Navigation$TransportMethod[] values() -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String method() -> c
    java.lang.String access$100(com.google.appinventor.components.runtime.Navigation$TransportMethod) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.NearField -> com.google.appinventor.components.runtime.NearField:
    android.app.Activity activity -> a
    android.nfc.NfcAdapter nfcAdapter -> a
    boolean readMode -> aO
    int writeType -> aR
    java.lang.String tagContent -> bm
    java.lang.String textToWrite -> bn
    int requestCode -> requestCode
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void TagRead(java.lang.String) -> TagRead
    void TagWritten() -> TagWritten
    java.lang.String LastMessage() -> LastMessage
    boolean ReadMode() -> ReadMode
    java.lang.String TextToWrite() -> TextToWrite
    int WriteType() -> WriteType
    void ReadMode(boolean) -> ReadMode
    void TextToWrite(java.lang.String) -> TextToWrite
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void resolveIntent(android.content.Intent) -> b
    void onPause() -> onPause
    void onDelete() -> onDelete
    void onStop() -> onStop
com.google.appinventor.components.runtime.Notifier -> com.google.appinventor.components.runtime.Notifier:
    android.app.Activity activity -> f
    android.os.Handler handler -> g
    android.app.ProgressDialog progressDialog -> b
    int notifierLength -> aS
    int backgroundColor -> K
    int textColor -> M
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void ShowProgressDialog(java.lang.String,java.lang.String) -> ShowProgressDialog
    void DismissProgressDialog() -> DismissProgressDialog
    void progressDialog(java.lang.String,java.lang.String) -> progressDialog
    void ShowMessageDialog(java.lang.String,java.lang.String,java.lang.String) -> ShowMessageDialog
    void oneButtonAlert(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.Runnable) -> oneButtonAlert
    void oneButtonAlert(android.app.Activity,java.lang.String,java.lang.String,java.lang.String) -> oneButtonAlert
    android.text.SpannableString stringToHTML(java.lang.String) -> a
    void ShowChooseDialog(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> ShowChooseDialog
    void twoButtonDialog(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable) -> twoButtonDialog
    void AfterChoosing(java.lang.String) -> AfterChoosing
    void ChoosingCanceled() -> ChoosingCanceled
    void ShowTextDialog(java.lang.String,java.lang.String,boolean) -> ShowTextDialog
    void ShowPasswordDialog(java.lang.String,java.lang.String,boolean) -> ShowPasswordDialog
    void textInputDialog(java.lang.String,java.lang.String,boolean,boolean) -> a
    void HideKeyboard(android.view.View) -> HideKeyboard
    void AfterTextInput(java.lang.String) -> AfterTextInput
    void TextInputCanceled() -> TextInputCanceled
    void ShowAlert(java.lang.String) -> ShowAlert
    void NotifierLength(int) -> NotifierLength
    int NotifierLength() -> NotifierLength
    void BackgroundColor(int) -> BackgroundColor
    int TextColor() -> TextColor
    void TextColor(int) -> TextColor
    void toastNow(java.lang.String) -> i
    void LogError(java.lang.String) -> LogError
    void LogWarning(java.lang.String) -> LogWarning
    void LogInfo(java.lang.String) -> LogInfo
    android.app.Activity access$000(com.google.appinventor.components.runtime.Notifier) -> a
    void access$100(com.google.appinventor.components.runtime.Notifier,java.lang.String) -> a
com.google.appinventor.components.runtime.Notifier$1 -> com.google.appinventor.components.runtime.bw:
    java.lang.Runnable val$callBack -> h
    void <init>(java.lang.Runnable) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.Notifier$10 -> com.google.appinventor.components.runtime.bx:
    java.lang.String val$notice -> bo
    com.google.appinventor.components.runtime.Notifier this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Notifier,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Notifier$2 -> com.google.appinventor.components.runtime.by:
    java.lang.String val$button1Text -> bp
    com.google.appinventor.components.runtime.Notifier this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Notifier,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Notifier$3 -> com.google.appinventor.components.runtime.bz:
    java.lang.String val$button2Text -> bq
    com.google.appinventor.components.runtime.Notifier this$0 -> c
    void <init>(com.google.appinventor.components.runtime.Notifier,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Notifier$4 -> com.google.appinventor.components.runtime.bA:
    com.google.appinventor.components.runtime.Notifier this$0 -> d
    void <init>(com.google.appinventor.components.runtime.Notifier) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Notifier$5 -> com.google.appinventor.components.runtime.bB:
    java.lang.Runnable val$positiveAction -> i
    void <init>(java.lang.Runnable) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.Notifier$6 -> com.google.appinventor.components.runtime.bC:
    java.lang.Runnable val$negativeAction -> j
    void <init>(java.lang.Runnable) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.Notifier$7 -> com.google.appinventor.components.runtime.bD:
    java.lang.Runnable val$cancelAction -> k
    void <init>(java.lang.Runnable) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.Notifier$8 -> com.google.appinventor.components.runtime.bE:
    android.widget.EditText val$input -> b
    com.google.appinventor.components.runtime.Notifier this$0 -> e
    void <init>(com.google.appinventor.components.runtime.Notifier,android.widget.EditText) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.Notifier$9 -> com.google.appinventor.components.runtime.bF:
    android.widget.EditText val$input -> c
    java.lang.String val$cancelButtonText -> br
    com.google.appinventor.components.runtime.Notifier this$0 -> f
    void <init>(com.google.appinventor.components.runtime.Notifier,android.widget.EditText,java.lang.String) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.NxtColorSensor -> com.google.appinventor.components.runtime.NxtColorSensor:
    java.util.Map mapColorToSensorType -> d
    java.util.Map mapSensorValueToColor -> e
    boolean detectColor -> aP
    android.os.Handler handler -> e
    java.lang.Runnable sensorReader -> l
    int previousColor -> Z
    boolean colorChangedEventEnabled -> ab
    com.google.appinventor.components.runtime.NxtColorSensor$State previousState -> a
    int bottomOfRange -> W
    int topOfRange -> X
    boolean belowRangeEventEnabled -> Y
    boolean withinRangeEventEnabled -> Z
    boolean aboveRangeEventEnabled -> aa
    int generateColor -> aT
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void initializeSensor(java.lang.String) -> initializeSensor
    void SensorPort(java.lang.String) -> SensorPort
    boolean DetectColor() -> DetectColor
    void DetectColor(boolean) -> DetectColor
    int GetColor() -> GetColor
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue getColorValue(java.lang.String) -> a
    boolean ColorChangedEventEnabled() -> ColorChangedEventEnabled
    void ColorChangedEventEnabled(boolean) -> ColorChangedEventEnabled
    void ColorChanged(int) -> ColorChanged
    int GetLightLevel() -> GetLightLevel
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue getLightValue(java.lang.String) -> b
    int BottomOfRange() -> BottomOfRange
    void BottomOfRange(int) -> BottomOfRange
    int TopOfRange() -> TopOfRange
    void TopOfRange(int) -> TopOfRange
    boolean BelowRangeEventEnabled() -> BelowRangeEventEnabled
    void BelowRangeEventEnabled(boolean) -> BelowRangeEventEnabled
    void BelowRange() -> BelowRange
    boolean WithinRangeEventEnabled() -> WithinRangeEventEnabled
    void WithinRangeEventEnabled(boolean) -> WithinRangeEventEnabled
    void WithinRange() -> WithinRange
    boolean AboveRangeEventEnabled() -> AboveRangeEventEnabled
    void AboveRangeEventEnabled(boolean) -> AboveRangeEventEnabled
    void AboveRange() -> AboveRange
    int GenerateColor() -> GenerateColor
    void GenerateColor(int) -> GenerateColor
    boolean isHandlerNeeded() -> e
    void onDelete() -> onDelete
    boolean access$000(com.google.appinventor.components.runtime.NxtColorSensor) -> a
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue access$100(com.google.appinventor.components.runtime.NxtColorSensor,java.lang.String) -> a
    int access$200(com.google.appinventor.components.runtime.NxtColorSensor) -> a
    int access$202(com.google.appinventor.components.runtime.NxtColorSensor,int) -> a
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue access$300(com.google.appinventor.components.runtime.NxtColorSensor,java.lang.String) -> b
    int access$400(com.google.appinventor.components.runtime.NxtColorSensor) -> b
    int access$500(com.google.appinventor.components.runtime.NxtColorSensor) -> c
    com.google.appinventor.components.runtime.NxtColorSensor$State access$600(com.google.appinventor.components.runtime.NxtColorSensor) -> a
    boolean access$700(com.google.appinventor.components.runtime.NxtColorSensor) -> b
    boolean access$800(com.google.appinventor.components.runtime.NxtColorSensor) -> c
    boolean access$900(com.google.appinventor.components.runtime.NxtColorSensor) -> d
    com.google.appinventor.components.runtime.NxtColorSensor$State access$602(com.google.appinventor.components.runtime.NxtColorSensor,com.google.appinventor.components.runtime.NxtColorSensor$State) -> a
    boolean access$1000(com.google.appinventor.components.runtime.NxtColorSensor) -> e
    java.lang.Runnable access$1100(com.google.appinventor.components.runtime.NxtColorSensor) -> a
    android.os.Handler access$1200(com.google.appinventor.components.runtime.NxtColorSensor) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.NxtColorSensor$1 -> com.google.appinventor.components.runtime.bG:
    com.google.appinventor.components.runtime.NxtColorSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.NxtColorSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.NxtColorSensor$State -> com.google.appinventor.components.runtime.bH:
    com.google.appinventor.components.runtime.NxtColorSensor$State UNKNOWN -> b
    com.google.appinventor.components.runtime.NxtColorSensor$State BELOW_RANGE -> c
    com.google.appinventor.components.runtime.NxtColorSensor$State WITHIN_RANGE -> d
    com.google.appinventor.components.runtime.NxtColorSensor$State ABOVE_RANGE -> e
    com.google.appinventor.components.runtime.NxtColorSensor$State[] $VALUES -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.NxtDirectCommands -> com.google.appinventor.components.runtime.NxtDirectCommands:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void StartProgram(java.lang.String) -> StartProgram
    void StopProgram() -> StopProgram
    void PlaySoundFile(java.lang.String) -> PlaySoundFile
    void PlayTone(int,int) -> PlayTone
    void SetOutputState(java.lang.String,int,int,int,int,int,long) -> SetOutputState
    void SetInputMode(java.lang.String,int,int) -> SetInputMode
    java.util.List GetOutputState(java.lang.String) -> GetOutputState
    byte[] getOutputState(java.lang.String,int) -> a
    java.util.List GetInputValues(java.lang.String) -> GetInputValues
    void ResetInputScaledValue(java.lang.String) -> ResetInputScaledValue
    void MessageWrite(int,java.lang.String) -> MessageWrite
    void ResetMotorPosition(java.lang.String,boolean) -> ResetMotorPosition
    int GetBatteryLevel() -> GetBatteryLevel
    void StopSoundPlayback() -> StopSoundPlayback
    long KeepAlive() -> KeepAlive
    int LsGetStatus(java.lang.String) -> LsGetStatus
    void LsWrite(java.lang.String,com.google.appinventor.components.runtime.util.YailList,int) -> LsWrite
    java.util.List LsRead(java.lang.String) -> LsRead
    java.lang.String GetCurrentProgramName() -> GetCurrentProgramName
    java.lang.String MessageRead(int) -> MessageRead
    void DownloadFile(java.lang.String,java.lang.String) -> DownloadFile
    java.lang.Integer openWrite(java.lang.String,java.lang.String,long) -> a
    int writeChunk(java.lang.String,int,byte[],int) -> a
    void closeHandle(java.lang.String,int) -> b
    void DeleteFile(java.lang.String) -> DeleteFile
    java.util.List ListFiles(java.lang.String) -> ListFiles
    java.util.List GetFirmwareVersion() -> GetFirmwareVersion
    java.lang.Integer openWriteLinear(java.lang.String,java.lang.String,long) -> b
    void SetBrickName(java.lang.String) -> SetBrickName
    java.lang.String GetBrickName() -> GetBrickName
com.google.appinventor.components.runtime.NxtDrive -> com.google.appinventor.components.runtime.NxtDrive:
    java.lang.String driveMotors -> bs
    java.util.List driveMotorPorts -> o
    double wheelDiameter -> e
    boolean stopBeforeDisconnect -> af
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void beforeDisconnect(com.google.appinventor.components.runtime.BluetoothConnectionBase) -> beforeDisconnect
    java.lang.String DriveMotors() -> DriveMotors
    void DriveMotors(java.lang.String) -> DriveMotors
    float WheelDiameter() -> WheelDiameter
    void WheelDiameter(float) -> WheelDiameter
    boolean StopBeforeDisconnect() -> StopBeforeDisconnect
    void StopBeforeDisconnect(boolean) -> StopBeforeDisconnect
    void MoveForwardIndefinitely(int) -> MoveForwardIndefinitely
    void MoveBackwardIndefinitely(int) -> MoveBackwardIndefinitely
    void MoveForward(int,double) -> MoveForward
    void MoveBackward(int,double) -> MoveBackward
    void move(java.lang.String,int,long) -> a
    void TurnClockwiseIndefinitely(int) -> TurnClockwiseIndefinitely
    void TurnCounterClockwiseIndefinitely(int) -> TurnCounterClockwiseIndefinitely
    void turnIndefinitely(java.lang.String,int,int,int) -> d
    void Stop() -> Stop
com.google.appinventor.components.runtime.NxtLightSensor -> com.google.appinventor.components.runtime.NxtLightSensor:
    android.os.Handler handler -> e
    java.lang.Runnable sensorReader -> m
    com.google.appinventor.components.runtime.NxtLightSensor$State previousState -> a
    int bottomOfRange -> W
    int topOfRange -> X
    boolean belowRangeEventEnabled -> Y
    boolean withinRangeEventEnabled -> Z
    boolean aboveRangeEventEnabled -> aa
    boolean generateLight -> aQ
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void initializeSensor(java.lang.String) -> initializeSensor
    void SensorPort(java.lang.String) -> SensorPort
    boolean GenerateLight() -> GenerateLight
    void GenerateLight(boolean) -> GenerateLight
    int GetLightLevel() -> GetLightLevel
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue getLightValue(java.lang.String) -> b
    int BottomOfRange() -> BottomOfRange
    void BottomOfRange(int) -> BottomOfRange
    int TopOfRange() -> TopOfRange
    void TopOfRange(int) -> TopOfRange
    boolean BelowRangeEventEnabled() -> BelowRangeEventEnabled
    void BelowRangeEventEnabled(boolean) -> BelowRangeEventEnabled
    void BelowRange() -> BelowRange
    boolean WithinRangeEventEnabled() -> WithinRangeEventEnabled
    void WithinRangeEventEnabled(boolean) -> WithinRangeEventEnabled
    void WithinRange() -> WithinRange
    boolean AboveRangeEventEnabled() -> AboveRangeEventEnabled
    void AboveRangeEventEnabled(boolean) -> AboveRangeEventEnabled
    void AboveRange() -> AboveRange
    boolean isHandlerNeeded() -> e
    void onDelete() -> onDelete
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue access$000(com.google.appinventor.components.runtime.NxtLightSensor,java.lang.String) -> a
    int access$100(com.google.appinventor.components.runtime.NxtLightSensor) -> a
    int access$200(com.google.appinventor.components.runtime.NxtLightSensor) -> b
    com.google.appinventor.components.runtime.NxtLightSensor$State access$300(com.google.appinventor.components.runtime.NxtLightSensor) -> a
    boolean access$400(com.google.appinventor.components.runtime.NxtLightSensor) -> a
    boolean access$500(com.google.appinventor.components.runtime.NxtLightSensor) -> b
    boolean access$600(com.google.appinventor.components.runtime.NxtLightSensor) -> c
    com.google.appinventor.components.runtime.NxtLightSensor$State access$302(com.google.appinventor.components.runtime.NxtLightSensor,com.google.appinventor.components.runtime.NxtLightSensor$State) -> a
    boolean access$700(com.google.appinventor.components.runtime.NxtLightSensor) -> d
    java.lang.Runnable access$800(com.google.appinventor.components.runtime.NxtLightSensor) -> a
    android.os.Handler access$900(com.google.appinventor.components.runtime.NxtLightSensor) -> a
com.google.appinventor.components.runtime.NxtLightSensor$1 -> com.google.appinventor.components.runtime.bI:
    com.google.appinventor.components.runtime.NxtLightSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.NxtLightSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.NxtLightSensor$State -> com.google.appinventor.components.runtime.bJ:
    com.google.appinventor.components.runtime.NxtLightSensor$State UNKNOWN -> b
    com.google.appinventor.components.runtime.NxtLightSensor$State BELOW_RANGE -> c
    com.google.appinventor.components.runtime.NxtLightSensor$State WITHIN_RANGE -> d
    com.google.appinventor.components.runtime.NxtLightSensor$State ABOVE_RANGE -> e
    com.google.appinventor.components.runtime.NxtLightSensor$State[] $VALUES -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.NxtSoundSensor -> com.google.appinventor.components.runtime.NxtSoundSensor:
    android.os.Handler handler -> e
    java.lang.Runnable sensorReader -> n
    com.google.appinventor.components.runtime.NxtSoundSensor$State previousState -> a
    int bottomOfRange -> W
    int topOfRange -> X
    boolean belowRangeEventEnabled -> Y
    boolean withinRangeEventEnabled -> Z
    boolean aboveRangeEventEnabled -> aa
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void initializeSensor(java.lang.String) -> initializeSensor
    void SensorPort(java.lang.String) -> SensorPort
    int GetSoundLevel() -> GetSoundLevel
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue getSoundValue(java.lang.String) -> c
    int BottomOfRange() -> BottomOfRange
    void BottomOfRange(int) -> BottomOfRange
    int TopOfRange() -> TopOfRange
    void TopOfRange(int) -> TopOfRange
    boolean BelowRangeEventEnabled() -> BelowRangeEventEnabled
    void BelowRangeEventEnabled(boolean) -> BelowRangeEventEnabled
    void BelowRange() -> BelowRange
    boolean WithinRangeEventEnabled() -> WithinRangeEventEnabled
    void WithinRangeEventEnabled(boolean) -> WithinRangeEventEnabled
    void WithinRange() -> WithinRange
    boolean AboveRangeEventEnabled() -> AboveRangeEventEnabled
    void AboveRangeEventEnabled(boolean) -> AboveRangeEventEnabled
    void AboveRange() -> AboveRange
    boolean isHandlerNeeded() -> e
    void onDelete() -> onDelete
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue access$000(com.google.appinventor.components.runtime.NxtSoundSensor,java.lang.String) -> a
    int access$100(com.google.appinventor.components.runtime.NxtSoundSensor) -> a
    int access$200(com.google.appinventor.components.runtime.NxtSoundSensor) -> b
    com.google.appinventor.components.runtime.NxtSoundSensor$State access$300(com.google.appinventor.components.runtime.NxtSoundSensor) -> a
    boolean access$400(com.google.appinventor.components.runtime.NxtSoundSensor) -> a
    boolean access$500(com.google.appinventor.components.runtime.NxtSoundSensor) -> b
    boolean access$600(com.google.appinventor.components.runtime.NxtSoundSensor) -> c
    com.google.appinventor.components.runtime.NxtSoundSensor$State access$302(com.google.appinventor.components.runtime.NxtSoundSensor,com.google.appinventor.components.runtime.NxtSoundSensor$State) -> a
    boolean access$700(com.google.appinventor.components.runtime.NxtSoundSensor) -> d
    java.lang.Runnable access$800(com.google.appinventor.components.runtime.NxtSoundSensor) -> a
    android.os.Handler access$900(com.google.appinventor.components.runtime.NxtSoundSensor) -> a
com.google.appinventor.components.runtime.NxtSoundSensor$1 -> com.google.appinventor.components.runtime.bK:
    com.google.appinventor.components.runtime.NxtSoundSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.NxtSoundSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.NxtSoundSensor$State -> com.google.appinventor.components.runtime.bL:
    com.google.appinventor.components.runtime.NxtSoundSensor$State UNKNOWN -> b
    com.google.appinventor.components.runtime.NxtSoundSensor$State BELOW_RANGE -> c
    com.google.appinventor.components.runtime.NxtSoundSensor$State WITHIN_RANGE -> d
    com.google.appinventor.components.runtime.NxtSoundSensor$State ABOVE_RANGE -> e
    com.google.appinventor.components.runtime.NxtSoundSensor$State[] $VALUES -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.NxtTouchSensor -> com.google.appinventor.components.runtime.NxtTouchSensor:
    android.os.Handler handler -> e
    com.google.appinventor.components.runtime.NxtTouchSensor$State previousState -> a
    java.lang.Runnable sensorReader -> o
    boolean pressedEventEnabled -> ai
    boolean releasedEventEnabled -> aj
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void initializeSensor(java.lang.String) -> initializeSensor
    void SensorPort(java.lang.String) -> SensorPort
    boolean IsPressed() -> IsPressed
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue getPressedValue(java.lang.String) -> d
    boolean PressedEventEnabled() -> PressedEventEnabled
    void PressedEventEnabled(boolean) -> PressedEventEnabled
    void Pressed() -> Pressed
    boolean ReleasedEventEnabled() -> ReleasedEventEnabled
    void ReleasedEventEnabled(boolean) -> ReleasedEventEnabled
    void Released() -> Released
    boolean isHandlerNeeded() -> e
    void onDelete() -> onDelete
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue access$000(com.google.appinventor.components.runtime.NxtTouchSensor,java.lang.String) -> a
    com.google.appinventor.components.runtime.NxtTouchSensor$State access$100(com.google.appinventor.components.runtime.NxtTouchSensor) -> a
    boolean access$200(com.google.appinventor.components.runtime.NxtTouchSensor) -> a
    boolean access$300(com.google.appinventor.components.runtime.NxtTouchSensor) -> b
    com.google.appinventor.components.runtime.NxtTouchSensor$State access$102(com.google.appinventor.components.runtime.NxtTouchSensor,com.google.appinventor.components.runtime.NxtTouchSensor$State) -> a
    boolean access$400(com.google.appinventor.components.runtime.NxtTouchSensor) -> c
    java.lang.Runnable access$500(com.google.appinventor.components.runtime.NxtTouchSensor) -> a
    android.os.Handler access$600(com.google.appinventor.components.runtime.NxtTouchSensor) -> a
com.google.appinventor.components.runtime.NxtTouchSensor$1 -> com.google.appinventor.components.runtime.bM:
    com.google.appinventor.components.runtime.NxtTouchSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.NxtTouchSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.NxtTouchSensor$State -> com.google.appinventor.components.runtime.bN:
    com.google.appinventor.components.runtime.NxtTouchSensor$State UNKNOWN -> b
    com.google.appinventor.components.runtime.NxtTouchSensor$State PRESSED -> c
    com.google.appinventor.components.runtime.NxtTouchSensor$State RELEASED -> d
    com.google.appinventor.components.runtime.NxtTouchSensor$State[] $VALUES -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.NxtUltrasonicSensor -> com.google.appinventor.components.runtime.NxtUltrasonicSensor:
    android.os.Handler handler -> e
    java.lang.Runnable sensorReader -> p
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State previousState -> a
    int bottomOfRange -> W
    int topOfRange -> X
    boolean belowRangeEventEnabled -> Y
    boolean withinRangeEventEnabled -> Z
    boolean aboveRangeEventEnabled -> aa
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void initializeSensor(java.lang.String) -> initializeSensor
    void configureUltrasonicSensor(java.lang.String) -> j
    void SensorPort(java.lang.String) -> SensorPort
    int GetDistance() -> GetDistance
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue getDistanceValue(java.lang.String) -> e
    int BottomOfRange() -> BottomOfRange
    void BottomOfRange(int) -> BottomOfRange
    int TopOfRange() -> TopOfRange
    void TopOfRange(int) -> TopOfRange
    boolean BelowRangeEventEnabled() -> BelowRangeEventEnabled
    void BelowRangeEventEnabled(boolean) -> BelowRangeEventEnabled
    void BelowRange() -> BelowRange
    boolean WithinRangeEventEnabled() -> WithinRangeEventEnabled
    void WithinRangeEventEnabled(boolean) -> WithinRangeEventEnabled
    void WithinRange() -> WithinRange
    boolean AboveRangeEventEnabled() -> AboveRangeEventEnabled
    void AboveRangeEventEnabled(boolean) -> AboveRangeEventEnabled
    void AboveRange() -> AboveRange
    boolean isHandlerNeeded() -> e
    void onDelete() -> onDelete
    com.google.appinventor.components.runtime.LegoMindstormsNxtSensor$SensorValue access$000(com.google.appinventor.components.runtime.NxtUltrasonicSensor,java.lang.String) -> a
    int access$100(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> a
    int access$200(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> b
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State access$300(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> a
    boolean access$400(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> a
    boolean access$500(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> b
    boolean access$600(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> c
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State access$302(com.google.appinventor.components.runtime.NxtUltrasonicSensor,com.google.appinventor.components.runtime.NxtUltrasonicSensor$State) -> a
    boolean access$700(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> d
    java.lang.Runnable access$800(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> a
    android.os.Handler access$900(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> a
com.google.appinventor.components.runtime.NxtUltrasonicSensor$1 -> com.google.appinventor.components.runtime.bO:
    com.google.appinventor.components.runtime.NxtUltrasonicSensor this$0 -> a
    void <init>(com.google.appinventor.components.runtime.NxtUltrasonicSensor) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.NxtUltrasonicSensor$State -> com.google.appinventor.components.runtime.bP:
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State UNKNOWN -> b
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State BELOW_RANGE -> c
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State WITHIN_RANGE -> d
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State ABOVE_RANGE -> e
    com.google.appinventor.components.runtime.NxtUltrasonicSensor$State[] $VALUES -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.OnClearListener -> com.google.appinventor.components.runtime.OnClearListener:
    void onClear() -> onClear
com.google.appinventor.components.runtime.OnCreateOptionsMenuListener -> com.google.appinventor.components.runtime.OnCreateOptionsMenuListener:
    void onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
com.google.appinventor.components.runtime.OnDestroyListener -> com.google.appinventor.components.runtime.OnDestroyListener:
    void onDestroy() -> onDestroy
com.google.appinventor.components.runtime.OnNewIntentListener -> com.google.appinventor.components.runtime.OnNewIntentListener:
    void onNewIntent(android.content.Intent) -> onNewIntent
com.google.appinventor.components.runtime.OnOptionsItemSelectedListener -> com.google.appinventor.components.runtime.OnOptionsItemSelectedListener:
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
com.google.appinventor.components.runtime.OnOrientationChangeListener -> com.google.appinventor.components.runtime.OnOrientationChangeListener:
    void onOrientationChange() -> onOrientationChange
com.google.appinventor.components.runtime.OnPauseListener -> com.google.appinventor.components.runtime.OnPauseListener:
    void onPause() -> onPause
com.google.appinventor.components.runtime.OnResumeListener -> com.google.appinventor.components.runtime.OnResumeListener:
    void onResume() -> onResume
com.google.appinventor.components.runtime.OnStopListener -> com.google.appinventor.components.runtime.OnStopListener:
    void onStop() -> onStop
com.google.appinventor.components.runtime.OrientationSensor -> com.google.appinventor.components.runtime.OrientationSensor:
    boolean enabled -> enabled
    float azimuth -> t
    float pitch -> u
    float roll -> v
    int accuracy -> t
    android.hardware.SensorManager sensorManager -> d
    android.hardware.Sensor accelerometerSensor -> d
    android.hardware.Sensor magneticFieldSensor -> e
    boolean listening -> p
    float[] accels -> b
    float[] mags -> c
    boolean accelsFilled -> aR
    boolean magsFilled -> aS
    float[] rotationMatrix -> d
    float[] inclinationMatrix -> e
    float[] values -> f
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void startListening() -> startListening
    void stopListening() -> stopListening
    void OrientationChanged(float,float,float) -> OrientationChanged
    boolean Available() -> Available
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    float Pitch() -> Pitch
    float Roll() -> Roll
    float Azimuth() -> Azimuth
    float Angle() -> Angle
    float computeAngle(float,float) -> a
    float Magnitude() -> Magnitude
    int getScreenRotation() -> b
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onDelete() -> onDelete
    void onPause() -> onPause
    void onResume() -> onResume
com.google.appinventor.components.runtime.PasswordTextBox -> com.google.appinventor.components.runtime.PasswordTextBox:
    boolean passwordVisible -> aT
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void PasswordVisible(boolean) -> PasswordVisible
    boolean PasswordVisible() -> PasswordVisible
com.google.appinventor.components.runtime.Pedometer -> com.google.appinventor.components.runtime.Pedometer:
    android.content.Context context -> c
    android.hardware.SensorManager sensorManager -> e
    int stopDetectionTimeout -> aU
    int winPos -> aV
    int intervalPos -> aW
    int numStepsWithFilter -> aX
    int numStepsRaw -> aY
    float lastValley -> w
    float[] lastValues -> g
    float strideLength -> x
    float totalDistance -> y
    long[] stepInterval -> b
    long stepTimestamp -> e
    long startTime -> f
    long prevStopClockTime -> g
    boolean foundValley -> aU
    boolean startPeaking -> aV
    boolean foundNonStep -> aW
    boolean pedometerPaused -> aX
    float[] avgWindow -> h
    int avgPos -> aZ
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Start() -> Start
    void Stop() -> Stop
    void Reset() -> Reset
    void Resume() -> Resume
    void Pause() -> Pause
    void Save() -> Save
    void SimpleStep(int,float) -> SimpleStep
    void WalkStep(int,float) -> WalkStep
    void StrideLength(float) -> StrideLength
    float StrideLength() -> StrideLength
    void StopDetectionTimeout(int) -> StopDetectionTimeout
    int StopDetectionTimeout() -> StopDetectionTimeout
    float Distance() -> Distance
    long ElapsedTime() -> ElapsedTime
    int SimpleSteps() -> SimpleSteps
    int WalkSteps() -> WalkSteps
    boolean areStepsEquallySpaced() -> f
    boolean isPeak() -> g
    boolean isValley() -> h
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onDelete() -> onDelete
    void StartedMoving() -> StartedMoving
    void StoppedMoving() -> StoppedMoving
    void UseGPS(boolean) -> UseGPS
    void CalibrationFailed() -> CalibrationFailed
    void GPSAvailable() -> GPSAvailable
    void GPSLost() -> GPSLost
    void CalibrateStrideLength(boolean) -> CalibrateStrideLength
    boolean CalibrateStrideLength() -> CalibrateStrideLength
    boolean Moving() -> Moving
com.google.appinventor.components.runtime.PermissionResultHandler -> com.google.appinventor.components.runtime.PermissionResultHandler:
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.PhoneCall -> com.google.appinventor.components.runtime.PhoneCall:
    java.lang.String phoneNumber -> phoneNumber
    android.content.Context context -> d
    com.google.appinventor.components.runtime.PhoneCall$CallStateReceiver callStateReceiver -> a
    boolean havePermission -> F
    boolean didRegisterReceiver -> aY
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Initialize() -> Initialize
    java.lang.String PhoneNumber() -> PhoneNumber
    void PhoneNumber(java.lang.String) -> PhoneNumber
    void MakePhoneCall() -> MakePhoneCall
    void MakePhoneCallDirect() -> MakePhoneCallDirect
    void PhoneCallStarted(int,java.lang.String) -> PhoneCallStarted
    void PhoneCallEnded(int,java.lang.String) -> PhoneCallEnded
    void IncomingCallAnswered(java.lang.String) -> IncomingCallAnswered
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void registerCallStateMonitor() -> H
    void unregisterCallStateMonitor() -> I
    void onDestroy() -> onDestroy
    void access$000(com.google.appinventor.components.runtime.PhoneCall) -> a
    boolean access$102(com.google.appinventor.components.runtime.PhoneCall,boolean) -> a
com.google.appinventor.components.runtime.PhoneCall$1 -> com.google.appinventor.components.runtime.bQ:
    com.google.appinventor.components.runtime.PhoneCall this$0 -> a
    void <init>(com.google.appinventor.components.runtime.PhoneCall,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[]) -> <init>
    void onGranted() -> onGranted
com.google.appinventor.components.runtime.PhoneCall$2 -> com.google.appinventor.components.runtime.bR:
    com.google.appinventor.components.runtime.PhoneCall this$0 -> b
    void <init>(com.google.appinventor.components.runtime.PhoneCall) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.PhoneCall$CallStateReceiver -> com.google.appinventor.components.runtime.bS:
    int status -> ba
    java.lang.String number -> bt
    com.google.appinventor.components.runtime.PhoneCall this$0 -> c
    void <init>(com.google.appinventor.components.runtime.PhoneCall) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.appinventor.components.runtime.PhoneNumberPicker -> com.google.appinventor.components.runtime.PhoneNumberPicker:
    java.lang.String[] NAME_PROJECTION -> h
    java.lang.String[] DATA_PROJECTION -> c
    java.lang.String[] PROJECTION -> i
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String PhoneNumber() -> PhoneNumber
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void preHoneycombGetContactInfo(android.database.Cursor) -> preHoneycombGetContactInfo
    java.lang.String postHoneycombGetContactNameAndPicture(android.database.Cursor) -> postHoneycombGetContactNameAndPicture
    void postHoneycombGetContactEmailsAndPhones(android.database.Cursor) -> postHoneycombGetContactEmailsAndPhones
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.PhoneStatus -> com.google.appinventor.components.runtime.PhoneStatus:
    android.app.Activity activity -> a
    com.google.appinventor.components.runtime.Form form -> u
    com.google.appinventor.components.runtime.PhoneStatus mainInstance -> a
    boolean useWebRTC -> aZ
    java.lang.String firstSeed -> bu
    java.lang.String firstHmacSeed -> bv
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String GetWifiIpAddress() -> GetWifiIpAddress
    boolean isConnected() -> isConnected
    java.lang.String setHmacSeedReturnCode(java.lang.String,java.lang.String) -> setHmacSeedReturnCode
    boolean isDirect() -> isDirect
    void startWebRTC(java.lang.String,java.lang.String) -> startWebRTC
    void startHTTPD(boolean) -> startHTTPD
    void setAssetsLoaded() -> setAssetsLoaded
    void doFault() -> doFault
    void installURL(java.lang.String) -> installURL
    void shutdown() -> shutdown
    void OnSettings() -> OnSettings
    void WebRTC(boolean) -> WebRTC
    boolean WebRTC() -> WebRTC
    int SdkLevel() -> SdkLevel
    java.lang.String GetVersionName() -> GetVersionName
    java.lang.String GetInstaller() -> GetInstaller
    java.lang.String InstallationId() -> InstallationId
    boolean getUseWebRTC() -> getUseWebRTC
    void doSettings() -> J
    java.lang.String intToIp(int) -> intToIp
    com.google.appinventor.components.runtime.Form access$000(com.google.appinventor.components.runtime.PhoneStatus) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.PhoneStatus$1 -> com.google.appinventor.components.runtime.bT:
    com.google.appinventor.components.runtime.PhoneStatus this$0 -> b
    void <init>(com.google.appinventor.components.runtime.PhoneStatus) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Picker -> com.google.appinventor.components.runtime.Picker:
    com.google.appinventor.components.runtime.ComponentContainer container -> container
    int requestCode -> requestCode
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.content.Intent getIntent() -> getIntent
    void click() -> click
    void Open() -> Open
    void BeforePicking() -> BeforePicking
    void AfterPicking() -> AfterPicking
com.google.appinventor.components.runtime.Player -> com.google.appinventor.components.runtime.Player:
    android.media.MediaPlayer player -> a
    android.os.Vibrator vibe -> a
    com.google.appinventor.components.runtime.Player$State playerState -> playerState
    java.lang.String sourcePath -> bw
    boolean loop -> ba
    boolean playOnlyInForeground -> bb
    boolean focusOn -> bc
    android.media.AudioManager am -> b
    android.app.Activity activity -> g
    boolean audioFocusSupported -> bd
    java.lang.Object afChangeListener -> n
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String Source() -> Source
    void Source(java.lang.String) -> Source
    void requestPermanentFocus() -> K
    boolean IsPlaying() -> IsPlaying
    boolean Loop() -> Loop
    void Loop(boolean) -> Loop
    void Volume(int) -> Volume
    boolean PlayOnlyInForeground() -> PlayOnlyInForeground
    void PlayOnlyInForeground(boolean) -> PlayOnlyInForeground
    void Start() -> Start
    void Pause() -> Pause
    void pause() -> pause
    void Stop() -> Stop
    void abandonFocus() -> L
    void Vibrate(long) -> Vibrate
    void PlayerError(java.lang.String) -> PlayerError
    void prepare() -> M
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void Completed() -> Completed
    void OtherPlayerStarted() -> OtherPlayerStarted
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onDelete() -> onDelete
    void prepareToDie() -> k
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Player$1 -> com.google.appinventor.components.runtime.bU:
    java.lang.String val$tempPath -> bx
    com.google.appinventor.components.runtime.Player this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Player,java.lang.String) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Player$State -> com.google.appinventor.components.runtime.Player$State:
    com.google.appinventor.components.runtime.Player$State INITIAL -> INITIAL
    com.google.appinventor.components.runtime.Player$State PREPARED -> PREPARED
    com.google.appinventor.components.runtime.Player$State PLAYING -> PLAYING
    com.google.appinventor.components.runtime.Player$State PAUSED_BY_USER -> PAUSED_BY_USER
    com.google.appinventor.components.runtime.Player$State PAUSED_BY_EVENT -> PAUSED_BY_EVENT
    com.google.appinventor.components.runtime.Player$State[] $VALUES -> a
    com.google.appinventor.components.runtime.Player$State[] values() -> values
    com.google.appinventor.components.runtime.Player$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Polygon -> com.google.appinventor.components.runtime.Polygon:
    java.lang.String TAG -> by
    java.util.List points -> k
    java.util.List holePoints -> p
    boolean multipolygon -> be
    boolean initialized -> initialized
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor distanceComputation -> h
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> <init>
    void Initialize() -> Initialize
    java.lang.String Type() -> Type
    com.google.appinventor.components.runtime.util.YailList Points() -> Points
    void Points(com.google.appinventor.components.runtime.util.YailList) -> Points
    void PointsFromString(java.lang.String) -> PointsFromString
    com.google.appinventor.components.runtime.util.YailList HolePoints() -> HolePoints
    void HolePoints(com.google.appinventor.components.runtime.util.YailList) -> HolePoints
    void HolePointsFromString(java.lang.String) -> HolePointsFromString
    com.google.appinventor.components.runtime.util.YailList Centroid() -> Centroid
    java.util.List getPoints() -> getPoints
    java.util.List getHolePoints() -> getHolePoints
    java.lang.Object accept(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor,java.lang.Object[]) -> accept
    org.locationtech.jts.geom.Geometry computeGeometry() -> computeGeometry
    void updatePoints(java.util.List) -> updatePoints
    void updateHolePoints(java.util.List) -> updateHolePoints
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Polygon$1 -> com.google.appinventor.components.runtime.bV:
    void <init>() -> <init>
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.PolygonBase -> com.google.appinventor.components.runtime.PolygonBase:
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor) -> <init>
com.google.appinventor.components.runtime.ProximitySensor -> com.google.appinventor.components.runtime.ProximitySensor:
    android.hardware.Sensor proximitySensor -> f
    android.hardware.SensorManager sensorManager -> f
    boolean enabled -> enabled
    float distance -> z
    boolean keepRunningWhenOnPause -> bf
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean Available() -> Available
    void onResume() -> onResume
    void onStop() -> onStop
    void onDelete() -> onDelete
    void onPause() -> onPause
    void startListening() -> startListening
    void stopListening() -> stopListening
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    float MaximumRange() -> MaximumRange
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    boolean KeepRunningWhenOnPause() -> KeepRunningWhenOnPause
    void KeepRunningWhenOnPause(boolean) -> KeepRunningWhenOnPause
    void ProximityChanged(float) -> ProximityChanged
    float Distance() -> Distance
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
com.google.appinventor.components.runtime.Rectangle -> com.google.appinventor.components.runtime.Rectangle:
    double east -> u
    double west -> v
    double north -> w
    double south -> x
    com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor distanceComputation -> i
    void <init>(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> <init>
    java.lang.String Type() -> Type
    void EastLongitude(double) -> EastLongitude
    double EastLongitude() -> EastLongitude
    void NorthLatitude(double) -> NorthLatitude
    double NorthLatitude() -> NorthLatitude
    void SouthLatitude(double) -> SouthLatitude
    double SouthLatitude() -> SouthLatitude
    void WestLongitude(double) -> WestLongitude
    double WestLongitude() -> WestLongitude
    com.google.appinventor.components.runtime.util.YailList Center() -> Center
    com.google.appinventor.components.runtime.util.YailList Bounds() -> Bounds
    void SetCenter(double,double) -> SetCenter
    java.lang.Object accept(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor,java.lang.Object[]) -> accept
    org.locationtech.jts.geom.Geometry computeGeometry() -> computeGeometry
    void updateBounds(double,double,double,double) -> updateBounds
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Rectangle$1 -> com.google.appinventor.components.runtime.bW:
    void <init>() -> <init>
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Double visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.ReplForm -> com.google.appinventor.components.runtime.ReplForm:
    java.lang.String LOG_TAG -> bz
    com.google.appinventor.components.runtime.util.AppInvHTTPD httpdServer -> a
    com.google.appinventor.components.runtime.ReplForm topform -> topform
    java.lang.String replAssetDir -> bA
    java.lang.String replCompDir -> bB
    boolean IsUSBRepl -> bg
    boolean assetsLoaded -> bh
    boolean isDirect -> bi
    java.lang.Object replResult -> o
    java.lang.String replResultFormName -> bC
    java.util.List loadedExternalDexs -> q
    java.lang.String currentTheme -> bD
    com.google.appinventor.components.runtime.util.WebRTCNativeMgr webRTCNativeMgr -> a
    com.google.appinventor.components.runtime.ReplForm$SchemeInterface schemeInterface -> a
    java.lang.String SPLASH_ACTIVITY_CLASS -> bE
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateFinish() -> v
    void onResume() -> onResume
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void startNewForm(java.lang.String,java.lang.Object) -> startNewForm
    void setFormName(java.lang.String) -> setFormName
    void closeForm(android.content.Intent) -> closeForm
    void setResult(java.lang.Object) -> setResult
    void closeApplicationFromBlocks() -> closeApplicationFromBlocks
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void addSettingsButton(android.view.Menu) -> addSettingsButton
    void addLogcatButton(android.view.Menu) -> addLogcatButton
    void onNewIntent(android.content.Intent) -> onNewIntent
    void HandleReturnValues() -> N
    void processExtrasAndData(android.content.Intent,boolean) -> a
    void startChromebook(java.lang.String) -> k
    boolean isDirect() -> isDirect
    void setIsUSBrepl() -> setIsUSBrepl
    void startHTTPD(boolean) -> startHTTPD
    void checkAssetDir() -> O
    boolean checkComponentDir() -> i
    boolean isAssetsLoaded() -> isAssetsLoaded
    void setAssetsLoaded() -> setAssetsLoaded
    void loadComponents(java.util.List) -> loadComponents
    void Theme(java.lang.String) -> Theme
    void returnRetvals(java.lang.String) -> returnRetvals
    void sendToCompanion(java.lang.String) -> sendToCompanion
    void setWebRTCMgr(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> setWebRTCMgr
    void evalScheme(java.lang.String) -> evalScheme
    java.lang.String getAssetPath(java.lang.String) -> getAssetPath
    java.lang.String getAssetPathForExtension(com.google.appinventor.components.runtime.Component,java.lang.String) -> getAssetPathForExtension
    boolean isRepl() -> isRepl
    void updateTitle() -> updateTitle
    java.lang.String genReportId() -> d
    java.lang.String access$100() -> e
    void access$200(com.google.appinventor.components.runtime.ReplForm,java.lang.String) -> a
    java.lang.String access$300(com.google.appinventor.components.runtime.ReplForm) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.ReplForm$1 -> com.google.appinventor.components.runtime.bX:
    java.lang.String val$data -> bF
    com.google.appinventor.components.runtime.ReplForm this$0 -> a
    void <init>(com.google.appinventor.components.runtime.ReplForm,java.lang.String) -> <init>
    void onInitialize() -> onInitialize
com.google.appinventor.components.runtime.ReplForm$2 -> com.google.appinventor.components.runtime.bY:
    com.google.appinventor.components.runtime.ReplForm this$0 -> b
    void <init>(com.google.appinventor.components.runtime.ReplForm) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.ReplForm$3 -> com.google.appinventor.components.runtime.bZ:
    com.google.appinventor.components.runtime.ReplForm this$0 -> c
    void <init>(com.google.appinventor.components.runtime.ReplForm) -> <init>
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
com.google.appinventor.components.runtime.ReplForm$4 -> com.google.appinventor.components.runtime.ca:
    com.google.appinventor.components.runtime.ReplForm this$0 -> d
    void <init>(com.google.appinventor.components.runtime.ReplForm) -> <init>
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
com.google.appinventor.components.runtime.ReplForm$SchemeInterface -> com.google.appinventor.components.runtime.ReplForm$SchemeInterface:
    gnu.expr.Language scheme -> a
    com.google.appinventor.components.runtime.ReplForm this$0 -> e
    void <init>(com.google.appinventor.components.runtime.ReplForm) -> <init>
    void adoptMainThreadClassLoader() -> P
    void eval(java.lang.String) -> eval
    void access$000(com.google.appinventor.components.runtime.ReplForm$SchemeInterface) -> a
com.google.appinventor.components.runtime.ReplForm$SchemeInterface$1 -> com.google.appinventor.components.runtime.cb:
    java.lang.String val$sexp -> bG
    com.google.appinventor.components.runtime.ReplForm$SchemeInterface this$1 -> b
    void <init>(com.google.appinventor.components.runtime.ReplForm$SchemeInterface,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.ScaledFrameLayout -> com.google.appinventor.components.runtime.ScaledFrameLayout:
    int mLeftWidth -> bb
    int mRightWidth -> bc
    android.graphics.Rect mTmpContainerRect -> a
    android.graphics.Rect mTmpChildRect -> b
    float mScale -> A
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect) -> invalidateChildInParent
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void setScale(float) -> setScale
    void updatePadding(int,int) -> c
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
com.google.appinventor.components.runtime.SensorComponent -> com.google.appinventor.components.runtime.SensorComponent:
com.google.appinventor.components.runtime.Serial -> com.google.appinventor.components.runtime.Serial:
    android.content.Context context -> a
    com.physicaloid.lib.Physicaloid mPhysicaloid -> a
    int baudRate -> bd
    int bytes -> be
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void InitializeSerial() -> InitializeSerial
    boolean OpenSerial() -> OpenSerial
    boolean CloseSerial() -> CloseSerial
    java.lang.String ReadSerial() -> ReadSerial
    void WriteSerial(java.lang.String) -> WriteSerial
    void PrintSerial(java.lang.String) -> PrintSerial
    boolean IsOpen() -> IsOpen
    boolean IsInitialized() -> IsInitialized
    int BaudRate() -> BaudRate
    void BaudRate(int) -> BaudRate
    int BufferSize() -> BufferSize
    void BufferSize(int) -> BufferSize
com.google.appinventor.components.runtime.ServiceBasedSpeechRecognizer -> com.google.appinventor.components.runtime.ServiceBasedSpeechRecognizer:
    android.speech.SpeechRecognizer speech -> a
    android.content.Intent recognizerIntent -> b
    com.google.appinventor.components.runtime.ComponentContainer container -> a
    java.lang.String result -> G
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,android.content.Intent) -> <init>
    void start() -> start
    void stop() -> stop
    void onReadyForSpeech(android.os.Bundle) -> onReadyForSpeech
    void onBeginningOfSpeech() -> onBeginningOfSpeech
    void onRmsChanged(float) -> onRmsChanged
    void onBufferReceived(byte[]) -> onBufferReceived
    void onEndOfSpeech() -> onEndOfSpeech
    void onError(int) -> onError
    void onResults(android.os.Bundle) -> onResults
    void onPartialResults(android.os.Bundle) -> onPartialResults
    void onEvent(int,android.os.Bundle) -> onEvent
    int getErrorMessage(int) -> d
com.google.appinventor.components.runtime.Sharing -> com.google.appinventor.components.runtime.Sharing:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void ShareMessage(java.lang.String) -> ShareMessage
    void ShareFile(java.lang.String) -> ShareFile
    void ShareFileWithMessage(java.lang.String,java.lang.String) -> ShareFileWithMessage
com.google.appinventor.components.runtime.SingleValueSensor -> com.google.appinventor.components.runtime.SingleValueSensor:
    android.hardware.Sensor sensor -> g
    int sensorType -> sensorType
    float value -> value
    android.hardware.SensorManager sensorManager -> sensorManager
    boolean enabled -> enabled
    int refreshTime -> refreshTime
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,int) -> <init>
    void startListening() -> startListening
    void stopListening() -> stopListening
    boolean Available() -> Available
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    int RefreshTime() -> RefreshTime
    void RefreshTime(int) -> RefreshTime
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onValueChanged(float) -> onValueChanged
    boolean isAvailable() -> isAvailable
    void setEnabled(boolean) -> setEnabled
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onPause() -> onPause
    void onResume() -> onResume
    void onDelete() -> onDelete
    float getValue() -> getValue
com.google.appinventor.components.runtime.Slider -> com.google.appinventor.components.runtime.Slider:
    android.widget.SeekBar seekbar -> a
    float minValue -> B
    float maxValue -> C
    float thumbPosition -> D
    boolean thumbEnabled -> bj
    int rightColor -> bf
    int leftColor -> bg
    boolean referenceGetThumb -> referenceGetThumb
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void setSliderColors() -> Q
    void setSeekbarPosition() -> R
    void ThumbEnabled(boolean) -> ThumbEnabled
    boolean ThumbEnabled() -> ThumbEnabled
    void ThumbPosition(float) -> ThumbPosition
    float ThumbPosition() -> ThumbPosition
    void MinValue(float) -> MinValue
    float MinValue() -> MinValue
    void MaxValue(float) -> MaxValue
    float MaxValue() -> MaxValue
    int ColorLeft() -> ColorLeft
    void ColorLeft(int) -> ColorLeft
    int ColorRight() -> ColorRight
    void ColorRight(int) -> ColorRight
    android.view.View getView() -> getView
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void PositionChanged(float) -> PositionChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    int Height() -> Height
    void Height(int) -> Height
    android.widget.SeekBar access$000(com.google.appinventor.components.runtime.Slider) -> a
    boolean access$200(com.google.appinventor.components.runtime.Slider) -> a
com.google.appinventor.components.runtime.Slider$1 -> com.google.appinventor.components.runtime.cc:
    com.google.appinventor.components.runtime.Slider this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Slider) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.google.appinventor.components.runtime.Slider$SeekBarHelper -> com.google.appinventor.components.runtime.cd:
    com.google.appinventor.components.runtime.Slider this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Slider) -> <init>
    void getThumb(int) -> a
    void <init>(com.google.appinventor.components.runtime.Slider,com.google.appinventor.components.runtime.Slider$1) -> <init>
com.google.appinventor.components.runtime.Sound -> com.google.appinventor.components.runtime.Sound:
    boolean loadComplete -> bk
    android.media.SoundPool soundPool -> a
    java.util.Map soundMap -> f
    boolean waitForLoadToComplete -> bl
    java.lang.String sourcePath -> bw
    int soundId -> bh
    int streamId -> bi
    int minimumInterval -> w
    long timeLastPlayed -> h
    android.os.Vibrator vibe -> b
    android.os.Handler playWaitHandler -> h
    com.google.appinventor.components.runtime.Component thisComponent -> d
    int delayRetries -> bj
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String Source() -> Source
    void Source(java.lang.String) -> Source
    int MinimumInterval() -> MinimumInterval
    void MinimumInterval(int) -> MinimumInterval
    void Play() -> Play
    void playWhenLoadComplete() -> S
    void playAndCheckResult() -> T
    void Pause() -> Pause
    void Resume() -> Resume
    void Stop() -> Stop
    void Vibrate(int) -> Vibrate
    void SoundError(java.lang.String) -> SoundError
    void onStop() -> onStop
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onDelete() -> onDelete
    void prepareToDie() -> k
    boolean access$002(com.google.appinventor.components.runtime.Sound,boolean) -> a
    boolean access$000(com.google.appinventor.components.runtime.Sound) -> a
    void access$200(com.google.appinventor.components.runtime.Sound) -> a
    int access$300(com.google.appinventor.components.runtime.Sound) -> a
    int access$310(com.google.appinventor.components.runtime.Sound) -> b
    void access$400(com.google.appinventor.components.runtime.Sound) -> b
    com.google.appinventor.components.runtime.Component access$500(com.google.appinventor.components.runtime.Sound) -> a
    java.lang.String access$600(com.google.appinventor.components.runtime.Sound) -> a
com.google.appinventor.components.runtime.Sound$1 -> com.google.appinventor.components.runtime.ce:
    com.google.appinventor.components.runtime.Sound this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Sound) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Sound$OnLoadHelper -> com.google.appinventor.components.runtime.cf:
    com.google.appinventor.components.runtime.Sound this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Sound) -> <init>
    void setOnloadCompleteListener(android.media.SoundPool) -> a
    void <init>(com.google.appinventor.components.runtime.Sound,com.google.appinventor.components.runtime.Sound$1) -> <init>
com.google.appinventor.components.runtime.Sound$OnLoadHelper$1 -> com.google.appinventor.components.runtime.cg:
    com.google.appinventor.components.runtime.Sound$OnLoadHelper this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Sound$OnLoadHelper) -> <init>
    void onLoadComplete(android.media.SoundPool,int,int) -> onLoadComplete
com.google.appinventor.components.runtime.SoundRecorder -> com.google.appinventor.components.runtime.SoundRecorder:
    java.lang.String savedRecording -> bH
    boolean havePermission -> F
    com.google.appinventor.components.runtime.SoundRecorder$RecordingController controller -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String SavedRecording() -> SavedRecording
    void SavedRecording(java.lang.String) -> SavedRecording
    void Start() -> Start
    void onError(android.media.MediaRecorder,int,int) -> onError
    void onInfo(android.media.MediaRecorder,int,int) -> onInfo
    void Stop() -> Stop
    void AfterSoundRecorded(java.lang.String) -> AfterSoundRecorded
    void StartedRecording() -> StartedRecording
    void StoppedRecording() -> StoppedRecording
    boolean access$002(com.google.appinventor.components.runtime.SoundRecorder,boolean) -> a
com.google.appinventor.components.runtime.SoundRecorder$1 -> com.google.appinventor.components.runtime.ch:
    com.google.appinventor.components.runtime.SoundRecorder val$me -> a
    com.google.appinventor.components.runtime.SoundRecorder this$0 -> b
    void <init>(com.google.appinventor.components.runtime.SoundRecorder,com.google.appinventor.components.runtime.SoundRecorder) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.SoundRecorder$1$1 -> com.google.appinventor.components.runtime.ci:
    com.google.appinventor.components.runtime.SoundRecorder$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.SoundRecorder$1,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[]) -> <init>
    void onGranted() -> onGranted
com.google.appinventor.components.runtime.SoundRecorder$RecordingController -> com.google.appinventor.components.runtime.cj:
    android.media.MediaRecorder recorder -> a
    java.lang.String file -> bI
    com.google.appinventor.components.runtime.SoundRecorder this$0 -> c
    void <init>(com.google.appinventor.components.runtime.SoundRecorder,java.lang.String) -> <init>
    void start() -> start
    void stop() -> stop
com.google.appinventor.components.runtime.SpeechListener -> com.google.appinventor.components.runtime.SpeechListener:
    void onPartialResult(java.lang.String) -> onPartialResult
    void onResult(java.lang.String) -> onResult
    void onError(int) -> onError
com.google.appinventor.components.runtime.SpeechRecognizer -> com.google.appinventor.components.runtime.SpeechRecognizer:
    com.google.appinventor.components.runtime.ComponentContainer container -> f
    java.lang.String result -> G
    android.content.Intent recognizerIntent -> b
    com.google.appinventor.components.runtime.SpeechRecognizerController speechRecognizerController -> a
    boolean havePermission -> F
    boolean useLegacy -> bm
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String Result() -> Result
    void GetText() -> GetText
    void Stop() -> Stop
    void BeforeGettingText() -> BeforeGettingText
    void AfterGettingText(java.lang.String,boolean) -> AfterGettingText
    void onPartialResult(java.lang.String) -> onPartialResult
    void onResult(java.lang.String) -> onResult
    void onError(int) -> onError
    void onClear() -> onClear
    boolean UseLegacy() -> UseLegacy
    void UseLegacy(boolean) -> UseLegacy
    boolean access$002(com.google.appinventor.components.runtime.SpeechRecognizer,boolean) -> a
com.google.appinventor.components.runtime.SpeechRecognizer$1 -> com.google.appinventor.components.runtime.ck:
    com.google.appinventor.components.runtime.SpeechRecognizer val$me -> a
    com.google.appinventor.components.runtime.SpeechRecognizer this$0 -> b
    void <init>(com.google.appinventor.components.runtime.SpeechRecognizer,com.google.appinventor.components.runtime.SpeechRecognizer) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.SpeechRecognizer$1$1 -> com.google.appinventor.components.runtime.cl:
    com.google.appinventor.components.runtime.SpeechRecognizer$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.SpeechRecognizer$1) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.SpeechRecognizerController -> com.google.appinventor.components.runtime.SpeechRecognizerController:
    com.google.appinventor.components.runtime.SpeechListener speechListener -> a
    void <init>() -> <init>
    void addListener(com.google.appinventor.components.runtime.SpeechListener) -> a
    void start() -> start
    void stop() -> stop
com.google.appinventor.components.runtime.Spinner -> com.google.appinventor.components.runtime.Spinner:
    android.widget.Spinner view -> a
    android.widget.ArrayAdapter adapter -> a
    com.google.appinventor.components.runtime.util.YailList items -> b
    int oldAdapterCount -> bk
    int oldSelectionIndex -> bl
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.view.View getView() -> getView
    java.lang.String Selection() -> Selection
    void Selection(java.lang.String) -> Selection
    int SelectionIndex() -> SelectionIndex
    void SelectionIndex(int) -> SelectionIndex
    com.google.appinventor.components.runtime.util.YailList Elements() -> Elements
    void Elements(com.google.appinventor.components.runtime.util.YailList) -> Elements
    void ElementsFromString(java.lang.String) -> ElementsFromString
    void setAdapterData(java.lang.String[]) -> a
    java.lang.String Prompt() -> Prompt
    void Prompt(java.lang.String) -> Prompt
    void DisplayDropdown() -> DisplayDropdown
    void AfterSelecting(java.lang.String) -> AfterSelecting
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.google.appinventor.components.runtime.SplashActivity -> com.google.appinventor.components.runtime.SplashActivity:
    android.webkit.WebView webview -> e
    android.os.Handler handler -> e
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
com.google.appinventor.components.runtime.SplashActivity$1 -> com.google.appinventor.components.runtime.cm:
    com.google.appinventor.components.runtime.SplashActivity this$0 -> a
    void <init>(com.google.appinventor.components.runtime.SplashActivity) -> <init>
    void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater) -> onExceededDatabaseQuota
com.google.appinventor.components.runtime.SplashActivity$JavaInterface -> com.google.appinventor.components.runtime.SplashActivity$JavaInterface:
    android.content.Context mContext -> b
    com.google.appinventor.components.runtime.SplashActivity this$0 -> b
    void <init>(com.google.appinventor.components.runtime.SplashActivity,android.content.Context) -> <init>
    boolean hasPermission(java.lang.String) -> hasPermission
    void askPermission(java.lang.String) -> askPermission
    java.lang.String getVersion() -> getVersion
    void finished() -> finished
com.google.appinventor.components.runtime.SplashActivity$JavaInterface$1 -> com.google.appinventor.components.runtime.cn:
    com.google.appinventor.components.runtime.SplashActivity$JavaInterface this$1 -> a
    void <init>(com.google.appinventor.components.runtime.SplashActivity$JavaInterface) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Sprite -> com.google.appinventor.components.runtime.Sprite:
    boolean DEFAULT_ORIGIN_AT_CENTER -> DEFAULT_ORIGIN_AT_CENTER
    com.google.appinventor.components.runtime.Canvas canvas -> canvas
    com.google.appinventor.components.runtime.util.TimerInternal timerInternal -> b
    android.os.Handler androidUIHandler -> i
    java.util.Set registeredCollisions -> o
    boolean initialized -> initialized
    int interval -> interval
    boolean visible -> visible
    double xLeft -> xLeft
    double yTop -> yTop
    double zLayer -> zLayer
    float speed -> speed
    boolean originAtCenter -> originAtCenter
    double xCenter -> xCenter
    double yCenter -> yCenter
    com.google.appinventor.components.runtime.Form form -> form
    double userHeading -> userHeading
    double heading -> heading
    double headingRadians -> headingRadians
    double headingCos -> headingCos
    double headingSin -> headingSin
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,android.os.Handler) -> <init>
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Initialize() -> Initialize
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    double Heading() -> Heading
    void Heading(double) -> Heading
    int Interval() -> Interval
    void Interval(int) -> Interval
    void Speed(float) -> Speed
    float Speed() -> Speed
    boolean Visible() -> Visible
    void Visible(boolean) -> Visible
    double X() -> X
    double xLeftToCenter(double) -> a
    double xCenterToLeft(double) -> b
    void updateX(double) -> a
    void X(double) -> X
    double yTopToCenter(double) -> c
    double yCenterToTop(double) -> d
    void updateY(double) -> b
    void Y(double) -> Y
    double Y() -> Y
    void Z(double) -> Z
    double Z() -> Z
    void OriginAtCenter(boolean) -> OriginAtCenter
    void postEvent(com.google.appinventor.components.runtime.Sprite,java.lang.String,java.lang.Object[]) -> postEvent
    void CollidedWith(com.google.appinventor.components.runtime.Sprite) -> CollidedWith
    void Dragged(float,float,float,float,float,float) -> Dragged
    void EdgeReached(int) -> EdgeReached
    void NoLongerCollidingWith(com.google.appinventor.components.runtime.Sprite) -> NoLongerCollidingWith
    void Touched(float,float) -> Touched
    void Flung(float,float,float,float,float,float) -> Flung
    void TouchUp(float,float) -> TouchUp
    void TouchDown(float,float) -> TouchDown
    void Bounce(int) -> Bounce
    boolean CollidingWith(com.google.appinventor.components.runtime.Sprite) -> CollidingWith
    void MoveIntoBounds() -> MoveIntoBounds
    void MoveTo(double,double) -> MoveTo
    void PointTowards(com.google.appinventor.components.runtime.Sprite) -> PointTowards
    void PointInDirection(double,double) -> PointInDirection
    void registerChange() -> registerChange
    int hitEdge() -> hitEdge
    void moveIntoBounds(int,int) -> moveIntoBounds
    void updateCoordinates() -> updateCoordinates
    boolean overWestEdge() -> j
    boolean overEastEdge(int) -> b
    boolean overNorthEdge() -> k
    boolean overSouthEdge(int) -> c
    int hitEdge(int,int) -> hitEdge
    com.google.appinventor.components.runtime.util.BoundingBox getBoundingBox(int) -> getBoundingBox
    boolean colliding(com.google.appinventor.components.runtime.Sprite,com.google.appinventor.components.runtime.Sprite) -> colliding
    boolean intersectsWith(com.google.appinventor.components.runtime.util.BoundingBox) -> intersectsWith
    boolean containsPoint(double,double) -> containsPoint
    void alarm() -> alarm
    com.google.appinventor.components.runtime.HandlesEventDispatching getDispatchDelegate() -> getDispatchDelegate
    void onDestroy() -> onDestroy
    void onDelete() -> onDelete
    void onDraw(android.graphics.Canvas) -> onDraw
com.google.appinventor.components.runtime.Sprite$1 -> com.google.appinventor.components.runtime.co:
    com.google.appinventor.components.runtime.Sprite val$sprite -> a
    java.lang.String val$eventName -> bJ
    java.lang.Object[] val$args -> c
    com.google.appinventor.components.runtime.Sprite this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Sprite,com.google.appinventor.components.runtime.Sprite,java.lang.String,java.lang.Object[]) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Switch -> com.google.appinventor.components.runtime.Switch:
    int thumbColorActive -> bm
    int thumbColorInactive -> bn
    int trackColorActive -> bo
    int trackColorInactive -> bp
    android.app.Activity activity -> h
    androidx.appcompat.widget.SwitchCompat switchView -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.content.res.ColorStateList createSwitchColors(int,int) -> a
    int ThumbColorActive() -> ThumbColorActive
    void ThumbColorActive(int) -> ThumbColorActive
    int ThumbColorInactive() -> ThumbColorInactive
    void ThumbColorInactive(int) -> ThumbColorInactive
    int TrackColorActive() -> TrackColorActive
    int TrackColorInactive() -> TrackColorInactive
    void TrackColorActive(int) -> TrackColorActive
    void TrackColorInactive(int) -> TrackColorInactive
    boolean On() -> On
    void On(boolean) -> On
    void Changed() -> Changed
com.google.appinventor.components.runtime.TableArrangement -> com.google.appinventor.components.runtime.TableArrangement:
    android.app.Activity context -> i
    com.google.appinventor.components.runtime.TableLayout viewLayout -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    int Columns() -> Columns
    void Columns(int) -> Columns
    int Rows() -> Rows
    void Rows(int) -> Rows
    android.app.Activity $context() -> $context
    com.google.appinventor.components.runtime.Form $form() -> $form
    void $add(com.google.appinventor.components.runtime.AndroidViewComponent) -> $add
    void setChildWidth(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildWidth
    void setChildHeight(com.google.appinventor.components.runtime.AndroidViewComponent,int) -> setChildHeight
    android.view.View getView() -> getView
com.google.appinventor.components.runtime.TableLayout -> com.google.appinventor.components.runtime.TableLayout:
    android.widget.TableLayout layoutManager -> a
    android.os.Handler handler -> j
    int numColumns -> bq
    int numRows -> br
    void <init>(android.content.Context,int,int) -> <init>
    int getNumColumns() -> c
    void setNumColumns(int) -> b
    int getNumRows() -> d
    void setNumRows(int) -> c
    android.view.ViewGroup getLayoutManager() -> getLayoutManager
    void add(com.google.appinventor.components.runtime.AndroidViewComponent) -> add
    void addChildLater(com.google.appinventor.components.runtime.AndroidViewComponent) -> a
    void addChild(com.google.appinventor.components.runtime.AndroidViewComponent) -> b
    android.view.View newEmptyCellView() -> a
    android.widget.TableRow$LayoutParams newEmptyCellLayoutParams() -> a
    android.widget.TableRow$LayoutParams newCellLayoutParams() -> b
    void access$000(com.google.appinventor.components.runtime.TableLayout,com.google.appinventor.components.runtime.AndroidViewComponent) -> a
com.google.appinventor.components.runtime.TableLayout$1 -> com.google.appinventor.components.runtime.cp:
    com.google.appinventor.components.runtime.AndroidViewComponent val$child -> f
    com.google.appinventor.components.runtime.TableLayout this$0 -> b
    void <init>(com.google.appinventor.components.runtime.TableLayout,com.google.appinventor.components.runtime.AndroidViewComponent) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TextBox -> com.google.appinventor.components.runtime.TextBox:
    boolean acceptsNumbersOnly -> bn
    boolean multiLine -> bo
    boolean readOnly -> bp
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean NumbersOnly() -> NumbersOnly
    void NumbersOnly(boolean) -> NumbersOnly
    void HideKeyboard() -> HideKeyboard
    boolean MultiLine() -> MultiLine
    void MultiLine(boolean) -> MultiLine
    boolean ReadOnly() -> ReadOnly
    void ReadOnly(boolean) -> ReadOnly
com.google.appinventor.components.runtime.TextBoxBase -> com.google.appinventor.components.runtime.TextBoxBase:
    android.widget.EditText view -> view
    int textAlignment -> J
    int backgroundColor -> K
    int fontTypeface -> L
    boolean bold -> G
    boolean italic -> I
    java.lang.String hint -> bK
    int textColor -> M
    android.graphics.drawable.Drawable defaultTextBoxDrawable -> g
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,android.widget.EditText) -> <init>
    android.view.View getView() -> getView
    void GotFocus() -> GotFocus
    void LostFocus() -> LostFocus
    int TextAlignment() -> TextAlignment
    void TextAlignment(int) -> TextAlignment
    int BackgroundColor() -> BackgroundColor
    void BackgroundColor(int) -> BackgroundColor
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    boolean FontBold() -> FontBold
    void FontBold(boolean) -> FontBold
    boolean FontItalic() -> FontItalic
    void FontItalic(boolean) -> FontItalic
    float FontSize() -> FontSize
    void FontSize(float) -> FontSize
    int FontTypeface() -> FontTypeface
    void FontTypeface(int) -> FontTypeface
    java.lang.String Hint() -> Hint
    void Hint(java.lang.String) -> Hint
    java.lang.String Text() -> Text
    void Text(java.lang.String) -> Text
    int TextColor() -> TextColor
    void TextColor(int) -> TextColor
    void RequestFocus() -> RequestFocus
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.google.appinventor.components.runtime.TextToSpeech -> com.google.appinventor.components.runtime.TextToSpeech:
    java.util.Map iso3LanguageToLocaleMap -> g
    java.util.Map iso3CountryToLocaleMap -> h
    float pitch -> u
    float speechRate -> E
    java.util.ArrayList languageList -> a
    java.util.ArrayList countryList -> b
    com.google.appinventor.components.runtime.util.YailList allLanguages -> e
    com.google.appinventor.components.runtime.util.YailList allCountries -> f
    boolean result -> bq
    java.lang.String language -> bk
    java.lang.String country -> bL
    com.google.appinventor.components.runtime.util.ITextToSpeech tts -> a
    java.lang.String iso2Language -> bM
    java.lang.String iso2Country -> bN
    boolean isTtsPrepared -> br
    void initLocaleMaps() -> U
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    boolean Result() -> Result
    void Language(java.lang.String) -> Language
    java.util.Locale iso3LanguageToLocale(java.lang.String) -> a
    void Pitch(float) -> Pitch
    float Pitch() -> Pitch
    void SpeechRate(float) -> SpeechRate
    float SpeechRate() -> SpeechRate
    java.lang.String Language() -> Language
    void Country(java.lang.String) -> Country
    java.util.Locale iso3CountryToLocale(java.lang.String) -> b
    java.lang.String Country() -> Country
    com.google.appinventor.components.runtime.util.YailList AvailableLanguages() -> AvailableLanguages
    com.google.appinventor.components.runtime.util.YailList AvailableCountries() -> AvailableCountries
    void prepareLanguageAndCountryProperties() -> prepareLanguageAndCountryProperties
    void getLanguageAndCountryLists() -> V
    void Speak(java.lang.String) -> Speak
    void BeforeSpeaking() -> BeforeSpeaking
    void AfterSpeaking(boolean) -> AfterSpeaking
    void onStop() -> onStop
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    boolean access$002(com.google.appinventor.components.runtime.TextToSpeech,boolean) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.TextToSpeech$1 -> com.google.appinventor.components.runtime.cq:
    com.google.appinventor.components.runtime.TextToSpeech this$0 -> a
    void <init>(com.google.appinventor.components.runtime.TextToSpeech) -> <init>
    void onSuccess() -> onSuccess
    void onFailure() -> onFailure
com.google.appinventor.components.runtime.Texting -> com.google.appinventor.components.runtime.Texting:
    java.lang.String TAG -> TAG
    int TEXTING_REQUEST_CODE -> TEXTING_REQUEST_CODE
    java.lang.String SMS_RECEIVED -> SMS_RECEIVED
    java.lang.String GV_SMS_RECEIVED -> GV_SMS_RECEIVED
    java.lang.String PHONE_NUMBER_TAG -> PHONE_NUMBER_TAG
    java.lang.String MESSAGE_TAG -> MESSAGE_TAG
    java.lang.String TELEPHONY_INTENT_FILTER -> TELEPHONY_INTENT_FILTER
    java.lang.String GV_INTENT_FILTER -> GV_INTENT_FILTER
    java.lang.String GV_PACKAGE_NAME -> GV_PACKAGE_NAME
    java.lang.String GV_SMS_SEND_URL -> GV_SMS_SEND_URL
    java.lang.String GV_URL -> GV_URL
    java.lang.String META_DATA_SMS_KEY -> META_DATA_SMS_KEY
    java.lang.String META_DATA_SMS_VALUE -> META_DATA_SMS_VALUE
    com.google.appinventor.components.runtime.Texting$GoogleVoiceUtil gvHelper -> a
    android.app.Activity activity -> a
    com.google.appinventor.components.runtime.Component component -> e
    java.lang.String authToken -> bO
    int receivingEnabled -> bs
    android.telephony.SmsManager smsManager -> a
    java.lang.String phoneNumber -> phoneNumber
    java.lang.String message -> bP
    boolean googleVoiceEnabled -> bs
    boolean isInitialized -> aq
    boolean isRunning -> bt
    int messagesCached -> bt
    java.lang.Object cacheLock -> p
    java.util.Queue pendingQueue -> d
    com.google.appinventor.components.runtime.ComponentContainer container -> a
    boolean havePermission -> F
    boolean haveReceivePermission -> bu
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onInitialize() -> onInitialize
    void Initialize() -> Initialize
    void PhoneNumber(java.lang.String) -> PhoneNumber
    java.lang.String PhoneNumber() -> PhoneNumber
    void Message(java.lang.String) -> Message
    java.lang.String Message() -> Message
    void SendMessage() -> SendMessage
    void SendMessageDirect() -> SendMessageDirect
    void processPendingQueue() -> W
    void MessageReceived(java.lang.String,java.lang.String) -> MessageReceived
    boolean GoogleVoiceEnabled() -> GoogleVoiceEnabled
    void GoogleVoiceEnabled(boolean) -> GoogleVoiceEnabled
    int ReceivingEnabled() -> ReceivingEnabled
    void ReceivingEnabled(int) -> ReceivingEnabled
    int isReceivingEnabled(android.content.Context) -> isReceivingEnabled
    android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent) -> getMessagesFromIntent
    void processCachedMessages() -> X
    java.lang.String[] retrieveCachedMessages() -> b
    boolean isRunning() -> isRunning
    int getCachedMsgCount() -> getCachedMsgCount
    void onResume() -> onResume
    void onPause() -> onPause
    void handledReceivedMessage(android.content.Context,java.lang.String,java.lang.String) -> handledReceivedMessage
    void addMessageToCache(android.content.Context,java.lang.String,java.lang.String) -> a
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    void handleSentMessage(android.content.Context,android.content.BroadcastReceiver,int,java.lang.String) -> a
    void sendViaSms(java.lang.String) -> l
    void requestReceiveSmsPermission(java.lang.String) -> m
    void onStop() -> onStop
    void onDelete() -> onDelete
    boolean access$002(com.google.appinventor.components.runtime.Texting,boolean) -> a
    void access$100(com.google.appinventor.components.runtime.Texting,java.lang.String) -> a
    java.lang.String access$200(com.google.appinventor.components.runtime.Texting) -> a
    void access$300(com.google.appinventor.components.runtime.Texting,android.content.Context,android.content.BroadcastReceiver,int,java.lang.String) -> a
    android.app.Activity access$400() -> a
    boolean access$502(com.google.appinventor.components.runtime.Texting,boolean) -> b
    java.lang.String access$602(com.google.appinventor.components.runtime.Texting,java.lang.String) -> a
    void access$700(com.google.appinventor.components.runtime.Texting) -> a
    com.google.appinventor.components.runtime.Texting$GoogleVoiceUtil access$800(com.google.appinventor.components.runtime.Texting) -> a
    com.google.appinventor.components.runtime.Texting$GoogleVoiceUtil access$802(com.google.appinventor.components.runtime.Texting,com.google.appinventor.components.runtime.Texting$GoogleVoiceUtil) -> a
    java.lang.String access$600(com.google.appinventor.components.runtime.Texting) -> b
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Texting$1 -> com.google.appinventor.components.runtime.cr:
    com.google.appinventor.components.runtime.Form val$form -> v
    com.google.appinventor.components.runtime.Texting val$me -> a
    java.lang.String val$caller -> bQ
    com.google.appinventor.components.runtime.Texting this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Texting,com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.Texting,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Texting$1$1 -> com.google.appinventor.components.runtime.cs:
    com.google.appinventor.components.runtime.Texting$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Texting$1) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Texting$2 -> com.google.appinventor.components.runtime.ct:
    com.google.appinventor.components.runtime.Texting this$0 -> c
    void <init>(com.google.appinventor.components.runtime.Texting) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.appinventor.components.runtime.Texting$3 -> com.google.appinventor.components.runtime.cu:
    java.lang.String val$caller -> bR
    com.google.appinventor.components.runtime.Texting this$0 -> d
    void <init>(com.google.appinventor.components.runtime.Texting,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Texting$3$1 -> com.google.appinventor.components.runtime.cv:
    com.google.appinventor.components.runtime.Texting$3 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Texting$3) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.Texting$AsyncAuthenticate -> com.google.appinventor.components.runtime.cw:
    com.google.appinventor.components.runtime.Texting this$0 -> e
    void <init>(com.google.appinventor.components.runtime.Texting) -> <init>
    java.lang.String doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.String) -> n
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.google.appinventor.components.runtime.Texting$AsyncSendMessage -> com.google.appinventor.components.runtime.cx:
    com.google.appinventor.components.runtime.Texting this$0 -> f
    void <init>(com.google.appinventor.components.runtime.Texting) -> <init>
    java.lang.String doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.String) -> n
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.google.appinventor.components.runtime.Texting$GoogleVoiceUtil -> com.google.appinventor.components.runtime.cy:
    int MAX_REDIRECTS -> bu
    java.lang.String general -> bS
    java.lang.String rnrSEE -> bT
    java.lang.String authToken -> bO
    int redirectCounter -> bv
    boolean isInitialized -> aq
    java.net.CookieManager cookies -> a
    com.google.appinventor.components.runtime.Texting this$0 -> g
    void <init>(com.google.appinventor.components.runtime.Texting,java.lang.String) -> <init>
    boolean isInitialized() -> isInitialized
    java.lang.String sendGvSms(java.lang.String) -> f
    java.lang.String getGeneral() -> f
    void setRNRSEE() -> Y
    void setCookies(java.net.HttpURLConnection) -> a
    void processCookies(java.net.HttpURLConnection) -> b
    java.lang.String get(java.lang.String) -> g
    java.lang.String access$900(com.google.appinventor.components.runtime.Texting$GoogleVoiceUtil,java.lang.String) -> a
com.google.appinventor.components.runtime.Thermometer -> com.google.appinventor.components.runtime.Thermometer:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void onValueChanged(float) -> onValueChanged
    void TemperatureChanged(float) -> TemperatureChanged
    float Temperature() -> Temperature
com.google.appinventor.components.runtime.TimePicker -> com.google.appinventor.components.runtime.TimePicker:
    int hour -> bw
    int minute -> bx
    android.app.TimePickerDialog time -> a
    boolean customTime -> bv
    com.google.appinventor.components.runtime.Form form -> form
    java.util.Calendar instant -> a
    android.os.Handler androidUIHandler -> a
    android.app.TimePickerDialog$OnTimeSetListener timePickerListener -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    int Hour() -> Hour
    int Minute() -> Minute
    java.util.Calendar Instant() -> Instant
    void SetTimeToDisplay(int,int) -> SetTimeToDisplay
    void SetTimeToDisplayFromInstant(java.util.Calendar) -> SetTimeToDisplayFromInstant
    void LaunchPicker() -> LaunchPicker
    void click() -> click
    void AfterTimeSet() -> AfterTimeSet
    int access$002(com.google.appinventor.components.runtime.TimePicker,int) -> a
    int access$102(com.google.appinventor.components.runtime.TimePicker,int) -> b
    java.util.Calendar access$202(com.google.appinventor.components.runtime.TimePicker,java.util.Calendar) -> a
    int access$000(com.google.appinventor.components.runtime.TimePicker) -> a
    int access$100(com.google.appinventor.components.runtime.TimePicker) -> b
    android.os.Handler access$300(com.google.appinventor.components.runtime.TimePicker) -> a
com.google.appinventor.components.runtime.TimePicker$1 -> com.google.appinventor.components.runtime.cz:
    com.google.appinventor.components.runtime.TimePicker this$0 -> a
    void <init>(com.google.appinventor.components.runtime.TimePicker) -> <init>
    void onTimeSet(android.widget.TimePicker,int,int) -> onTimeSet
com.google.appinventor.components.runtime.TimePicker$1$1 -> com.google.appinventor.components.runtime.cA:
    com.google.appinventor.components.runtime.TimePicker$1 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.TimePicker$1) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyDB -> com.google.appinventor.components.runtime.TinyDB:
    java.lang.String DEFAULT_NAMESPACE -> DEFAULT_NAMESPACE
    android.content.SharedPreferences sharedPreferences -> a
    java.lang.String namespace -> bU
    android.content.Context context -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void Namespace(java.lang.String) -> Namespace
    java.lang.String Namespace() -> Namespace
    void StoreValue(java.lang.String,java.lang.Object) -> StoreValue
    java.lang.Object GetValue(java.lang.String,java.lang.Object) -> GetValue
    java.lang.Object GetTags() -> GetTags
    void ClearAll() -> ClearAll
    void ClearTag(java.lang.String) -> ClearTag
    void onDelete() -> onDelete
com.google.appinventor.components.runtime.TinyWebDB -> com.google.appinventor.components.runtime.TinyWebDB:
    java.lang.String serviceURL -> bV
    android.os.Handler androidUIHandler -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String ServiceURL() -> ServiceURL
    void ServiceURL(java.lang.String) -> ServiceURL
    void StoreValue(java.lang.String,java.lang.Object) -> StoreValue
    void postStoreValue(java.lang.String,java.lang.Object) -> a
    void ValueStored() -> ValueStored
    void GetValue(java.lang.String) -> GetValue
    void postGetValue(java.lang.String) -> o
    void GotValue(java.lang.String,java.lang.Object) -> GotValue
    void WebServiceError(java.lang.String) -> WebServiceError
    void access$000(com.google.appinventor.components.runtime.TinyWebDB,java.lang.String,java.lang.Object) -> a
    android.os.Handler access$100(com.google.appinventor.components.runtime.TinyWebDB) -> a
    void access$200(com.google.appinventor.components.runtime.TinyWebDB,java.lang.String) -> a
com.google.appinventor.components.runtime.TinyWebDB$1 -> com.google.appinventor.components.runtime.cB:
    java.lang.String val$tag -> bW
    java.lang.Object val$valueToStore -> q
    com.google.appinventor.components.runtime.TinyWebDB this$0 -> a
    void <init>(com.google.appinventor.components.runtime.TinyWebDB,java.lang.String,java.lang.Object) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyWebDB$2 -> com.google.appinventor.components.runtime.cC:
    com.google.appinventor.components.runtime.TinyWebDB this$0 -> b
    void <init>(com.google.appinventor.components.runtime.TinyWebDB) -> <init>
    void onSuccess(java.lang.String) -> p
    void onFailure(java.lang.String) -> onFailure
    void onSuccess(java.lang.Object) -> onSuccess
com.google.appinventor.components.runtime.TinyWebDB$2$1 -> com.google.appinventor.components.runtime.cD:
    com.google.appinventor.components.runtime.TinyWebDB$2 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.TinyWebDB$2) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyWebDB$2$2 -> com.google.appinventor.components.runtime.cE:
    java.lang.String val$message -> bX
    com.google.appinventor.components.runtime.TinyWebDB$2 this$1 -> b
    void <init>(com.google.appinventor.components.runtime.TinyWebDB$2,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyWebDB$3 -> com.google.appinventor.components.runtime.cF:
    java.lang.String val$tag -> bY
    com.google.appinventor.components.runtime.TinyWebDB this$0 -> c
    void <init>(com.google.appinventor.components.runtime.TinyWebDB,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyWebDB$4 -> com.google.appinventor.components.runtime.cG:
    java.lang.String val$tag -> bZ
    com.google.appinventor.components.runtime.TinyWebDB this$0 -> d
    void <init>(com.google.appinventor.components.runtime.TinyWebDB,java.lang.String) -> <init>
    void onSuccess(org.json.JSONArray) -> a
    void onFailure(java.lang.String) -> onFailure
    void onSuccess(java.lang.Object) -> onSuccess
com.google.appinventor.components.runtime.TinyWebDB$4$1 -> com.google.appinventor.components.runtime.cH:
    com.google.appinventor.components.runtime.TinyWebDB$4 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.TinyWebDB$4) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyWebDB$4$2 -> com.google.appinventor.components.runtime.cI:
    java.lang.String val$tagFromWebDB -> ca
    java.lang.Object val$valueFromWebDB -> r
    com.google.appinventor.components.runtime.TinyWebDB$4 this$1 -> b
    void <init>(com.google.appinventor.components.runtime.TinyWebDB$4,java.lang.String,java.lang.Object) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyWebDB$4$3 -> com.google.appinventor.components.runtime.cJ:
    com.google.appinventor.components.runtime.TinyWebDB$4 this$1 -> c
    void <init>(com.google.appinventor.components.runtime.TinyWebDB$4) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.TinyWebDB$4$4 -> com.google.appinventor.components.runtime.cK:
    java.lang.String val$message -> cb
    com.google.appinventor.components.runtime.TinyWebDB$4 this$1 -> d
    void <init>(com.google.appinventor.components.runtime.TinyWebDB$4,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.ToggleBase -> com.google.appinventor.components.runtime.ToggleBase:
    android.widget.CompoundButton view -> view
    int backgroundColor -> K
    int fontTypeface -> L
    boolean bold -> G
    boolean italic -> I
    int textColor -> M
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void initToggle() -> initToggle
    android.view.View getView() -> getView
    void Changed() -> Changed
    void GotFocus() -> GotFocus
    void LostFocus() -> LostFocus
    void BackgroundColor(int) -> BackgroundColor
    int BackgroundColor() -> BackgroundColor
    void Enabled(boolean) -> Enabled
    boolean Enabled() -> Enabled
    void FontBold(boolean) -> FontBold
    boolean FontBold() -> FontBold
    void FontItalic(boolean) -> FontItalic
    boolean FontItalic() -> FontItalic
    void FontSize(float) -> FontSize
    float FontSize() -> FontSize
    void FontTypeface(int) -> FontTypeface
    int FontTypeface() -> FontTypeface
    void Text(java.lang.String) -> Text
    java.lang.String Text() -> Text
    void TextColor(int) -> TextColor
    int TextColor() -> TextColor
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.google.appinventor.components.runtime.VerticalArrangement -> com.google.appinventor.components.runtime.VerticalArrangement:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
com.google.appinventor.components.runtime.VerticalScrollArrangement -> com.google.appinventor.components.runtime.VerticalScrollArrangement:
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
com.google.appinventor.components.runtime.VideoPlayer -> com.google.appinventor.components.runtime.VideoPlayer:
    com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView videoView -> a
    java.lang.String sourcePath -> bw
    boolean inFullScreen -> bw
    boolean mediaReady -> bx
    boolean delayedStart -> by
    android.media.MediaPlayer mPlayer -> b
    android.os.Handler androidUIHandler -> k
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    android.view.View getView() -> getView
    void Source(java.lang.String) -> Source
    void Start() -> Start
    void Volume(int) -> Volume
    void delayedStart() -> delayedStart
    void Pause() -> Pause
    void Stop() -> Stop
    void SeekTo(int) -> SeekTo
    int GetDuration() -> GetDuration
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void Completed() -> Completed
    boolean onError(android.media.MediaPlayer,int,int) -> onError
    void onPrepared(android.media.MediaPlayer) -> onPrepared
    void VideoPlayerError(java.lang.String) -> VideoPlayerError
    void onDestroy() -> onDestroy
    void onDelete() -> onDelete
    void prepareToDie() -> k
    int Width() -> Width
    void Width(int) -> Width
    int Height() -> Height
    void Height(int) -> Height
    boolean FullScreen() -> FullScreen
    void FullScreen(boolean) -> FullScreen
    void fullScreenKilled(android.os.Bundle) -> fullScreenKilled
    int getPassedWidth() -> getPassedWidth
    int getPassedHeight() -> getPassedHeight
    android.os.Handler access$100(com.google.appinventor.components.runtime.VideoPlayer) -> a
com.google.appinventor.components.runtime.VideoPlayer$1 -> com.google.appinventor.components.runtime.cL:
    java.lang.String val$tempPath -> cc
    com.google.appinventor.components.runtime.VideoPlayer this$0 -> a
    void <init>(com.google.appinventor.components.runtime.VideoPlayer,java.lang.String) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView -> com.google.appinventor.components.runtime.cM:
    android.media.MediaPlayer mVideoPlayer -> c
    java.lang.Boolean mFoundMediaPlayer -> c
    int forcedWidth -> by
    int forcedHeight -> bz
    com.google.appinventor.components.runtime.VideoPlayer this$0 -> b
    void <init>(com.google.appinventor.components.runtime.VideoPlayer,android.content.Context) -> <init>
    void onMeasure(int,int) -> onMeasure
    void onMeasure(int,int,int) -> a
    void changeVideoSize(int,int) -> d
    void invalidateMediaPlayer(boolean) -> c
    void setMediaPlayer(android.media.MediaPlayer,boolean) -> a
    void access$000(com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView,int,int,int) -> a
com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView$1 -> com.google.appinventor.components.runtime.cN:
    int val$specwidth -> bA
    int val$specheight -> bB
    int val$trycount -> bC
    com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView this$1 -> b
    void <init>(com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView,int,int,int) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView$2 -> com.google.appinventor.components.runtime.cO:
    int val$specwidth -> bD
    int val$specheight -> bE
    int val$trycount -> bF
    com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView this$1 -> c
    void <init>(com.google.appinventor.components.runtime.VideoPlayer$ResizableVideoView,int,int,int) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.VisibleComponent -> com.google.appinventor.components.runtime.VisibleComponent:
    void <init>() -> <init>
    int Width() -> Width
    void Width(int) -> Width
    void WidthPercent(int) -> WidthPercent
    int Height() -> Height
    void Height(int) -> Height
    void HeightPercent(int) -> HeightPercent
com.google.appinventor.components.runtime.Web -> com.google.appinventor.components.runtime.Web:
    java.util.Map mimeTypeToExtension -> i
    android.app.Activity activity -> j
    java.net.CookieHandler cookieHandler -> a
    java.lang.String urlString -> cd
    boolean allowCookies -> bz
    com.google.appinventor.components.runtime.util.YailList requestHeaders -> g
    boolean saveResponse -> bA
    java.lang.String responseFileName -> ce
    int timeout -> bG
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void <init>() -> <init>
    java.lang.String Url() -> Url
    void Url(java.lang.String) -> Url
    com.google.appinventor.components.runtime.util.YailList RequestHeaders() -> RequestHeaders
    void RequestHeaders(com.google.appinventor.components.runtime.util.YailList) -> RequestHeaders
    boolean AllowCookies() -> AllowCookies
    void AllowCookies(boolean) -> AllowCookies
    boolean SaveResponse() -> SaveResponse
    void SaveResponse(boolean) -> SaveResponse
    java.lang.String ResponseFileName() -> ResponseFileName
    void ResponseFileName(java.lang.String) -> ResponseFileName
    int Timeout() -> Timeout
    void Timeout(int) -> Timeout
    void ClearCookies() -> ClearCookies
    void Get() -> Get
    void PostText(java.lang.String) -> PostText
    void PostTextWithEncoding(java.lang.String,java.lang.String) -> PostTextWithEncoding
    void PostFile(java.lang.String) -> PostFile
    void PutText(java.lang.String) -> PutText
    void PutTextWithEncoding(java.lang.String,java.lang.String) -> PutTextWithEncoding
    void PutFile(java.lang.String) -> PutFile
    void Delete() -> Delete
    void requestTextImpl(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void GotText(java.lang.String,int,java.lang.String,java.lang.String) -> GotText
    void GotFile(java.lang.String,int,java.lang.String,java.lang.String) -> GotFile
    void TimedOut(java.lang.String) -> TimedOut
    java.lang.String BuildRequestData(com.google.appinventor.components.runtime.util.YailList) -> BuildRequestData
    java.lang.String buildRequestData(com.google.appinventor.components.runtime.util.YailList) -> a
    java.lang.String UriEncode(java.lang.String) -> UriEncode
    java.lang.String UriDecode(java.lang.String) -> UriDecode
    java.lang.Object JsonTextDecode(java.lang.String) -> JsonTextDecode
    java.lang.Object JsonTextDecodeWithDictionaries(java.lang.String) -> JsonTextDecodeWithDictionaries
    java.lang.Object decodeJsonText(java.lang.String,boolean) -> a
    java.lang.String JsonObjectEncode(java.lang.Object) -> JsonObjectEncode
    java.lang.Object XMLTextDecodeAsDictionary(java.lang.String) -> XMLTextDecodeAsDictionary
    java.lang.Object XMLTextDecode(java.lang.String) -> XMLTextDecode
    java.lang.String HtmlTextDecode(java.lang.String) -> HtmlTextDecode
    void performRequest(com.google.appinventor.components.runtime.Web$CapturedProperties,byte[],java.lang.String,java.lang.String,java.lang.String) -> a
    java.net.HttpURLConnection openConnection(com.google.appinventor.components.runtime.Web$CapturedProperties,java.lang.String) -> a
    void writeRequestData(java.net.HttpURLConnection,byte[]) -> a
    void writeRequestFile(java.net.HttpURLConnection,java.lang.String) -> a
    java.lang.String getResponseType(java.net.HttpURLConnection) -> b
    void processResponseCookies(java.net.HttpURLConnection) -> c
    java.lang.String getResponseContent(java.net.HttpURLConnection) -> a
    java.lang.String saveResponseContent(java.net.HttpURLConnection,java.lang.String,java.lang.String) -> a
    java.io.InputStream getConnectionStream(java.net.HttpURLConnection) -> a
    java.io.File createFile(java.lang.String,java.lang.String) -> a
    java.util.Map processRequestHeaders(com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.Web$CapturedProperties capturePropertyValues(java.lang.String) -> a
    java.lang.String access$000(com.google.appinventor.components.runtime.Web) -> a
    boolean access$100(com.google.appinventor.components.runtime.Web) -> a
    boolean access$200(com.google.appinventor.components.runtime.Web) -> b
    java.lang.String access$300(com.google.appinventor.components.runtime.Web) -> b
    int access$400(com.google.appinventor.components.runtime.Web) -> a
    com.google.appinventor.components.runtime.util.YailList access$500(com.google.appinventor.components.runtime.Web) -> a
    java.util.Map access$600(com.google.appinventor.components.runtime.util.YailList) -> b
    java.net.CookieHandler access$700(com.google.appinventor.components.runtime.Web) -> a
    void access$800(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties,byte[],java.lang.String,java.lang.String,java.lang.String) -> a
    boolean access$902(com.google.appinventor.components.runtime.Web,boolean) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.Web$1 -> com.google.appinventor.components.runtime.cP:
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> a
    com.google.appinventor.components.runtime.Web this$0 -> a
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$2 -> com.google.appinventor.components.runtime.cQ:
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> b
    java.lang.String val$path -> cf
    com.google.appinventor.components.runtime.Web this$0 -> b
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$3 -> com.google.appinventor.components.runtime.cR:
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> c
    java.lang.String val$path -> cg
    com.google.appinventor.components.runtime.Web this$0 -> c
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$4 -> com.google.appinventor.components.runtime.cS:
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> d
    com.google.appinventor.components.runtime.Web this$0 -> d
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$5 -> com.google.appinventor.components.runtime.cT:
    java.lang.String val$encoding -> ch
    java.lang.String val$text -> ci
    java.lang.String val$functionName -> cj
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> e
    java.lang.String val$httpVerb -> ck
    com.google.appinventor.components.runtime.Web this$0 -> e
    void <init>(com.google.appinventor.components.runtime.Web,java.lang.String,java.lang.String,java.lang.String,com.google.appinventor.components.runtime.Web$CapturedProperties,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$6 -> com.google.appinventor.components.runtime.cU:
    com.google.appinventor.components.runtime.Web val$me -> f
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> f
    byte[] val$postData -> a
    java.lang.String val$postFile -> cl
    java.lang.String val$httpVerb -> cm
    java.lang.String val$method -> cn
    com.google.appinventor.components.runtime.Web this$0 -> g
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[],com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties,byte[],java.lang.String,java.lang.String,java.lang.String) -> <init>
    void onGranted() -> onGranted
com.google.appinventor.components.runtime.Web$6$1 -> com.google.appinventor.components.runtime.cV:
    com.google.appinventor.components.runtime.Web$6 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.Web$6) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$7 -> com.google.appinventor.components.runtime.cW:
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> g
    int val$responseCode -> bH
    java.lang.String val$responseType -> co
    java.lang.String val$path -> cp
    com.google.appinventor.components.runtime.Web this$0 -> h
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties,int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$8 -> com.google.appinventor.components.runtime.cX:
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> h
    int val$responseCode -> bI
    java.lang.String val$responseType -> cq
    java.lang.String val$responseContent -> cr
    com.google.appinventor.components.runtime.Web this$0 -> i
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties,int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$9 -> com.google.appinventor.components.runtime.cY:
    com.google.appinventor.components.runtime.Web$CapturedProperties val$webProps -> i
    com.google.appinventor.components.runtime.Web this$0 -> j
    void <init>(com.google.appinventor.components.runtime.Web,com.google.appinventor.components.runtime.Web$CapturedProperties) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.Web$BuildRequestDataException -> com.google.appinventor.components.runtime.cZ:
    int errorNumber -> bJ
    int index -> bK
    void <init>(int,int) -> <init>
com.google.appinventor.components.runtime.Web$CapturedProperties -> com.google.appinventor.components.runtime.da:
    java.lang.String urlString -> cs
    java.net.URL url -> a
    boolean allowCookies -> bB
    boolean saveResponse -> bC
    java.lang.String responseFileName -> ct
    int timeout -> bL
    java.util.Map requestHeaders -> j
    java.util.Map cookies -> k
    void <init>(com.google.appinventor.components.runtime.Web) -> <init>
com.google.appinventor.components.runtime.Web$InvalidRequestHeadersException -> com.google.appinventor.components.runtime.db:
    int errorNumber -> bM
    int index -> bN
    void <init>(int,int) -> <init>
com.google.appinventor.components.runtime.WebViewActivity -> com.google.appinventor.components.runtime.WebViewActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
com.google.appinventor.components.runtime.WebViewActivity$1 -> com.google.appinventor.components.runtime.dc:
    com.google.appinventor.components.runtime.WebViewActivity this$0 -> a
    void <init>(com.google.appinventor.components.runtime.WebViewActivity) -> <init>
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.google.appinventor.components.runtime.WebViewer -> com.google.appinventor.components.runtime.WebViewer:
    android.webkit.WebView webview -> f
    java.lang.String homeUrl -> cu
    boolean followLinks -> g
    boolean prompt -> h
    boolean ignoreSslErrors -> bD
    com.google.appinventor.components.runtime.WebViewer$WebViewInterface wvInterface -> a
    boolean havePermission -> F
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    java.lang.String WebViewString() -> WebViewString
    void WebViewString(java.lang.String) -> WebViewString
    android.view.View getView() -> getView
    void Width(int) -> Width
    void Height(int) -> Height
    java.lang.String HomeUrl() -> HomeUrl
    void HomeUrl(java.lang.String) -> HomeUrl
    java.lang.String CurrentUrl() -> CurrentUrl
    java.lang.String CurrentPageTitle() -> CurrentPageTitle
    boolean FollowLinks() -> FollowLinks
    void FollowLinks(boolean) -> FollowLinks
    boolean IgnoreSslErrors() -> IgnoreSslErrors
    void IgnoreSslErrors(boolean) -> IgnoreSslErrors
    void GoHome() -> GoHome
    void GoBack() -> GoBack
    void GoForward() -> GoForward
    boolean CanGoForward() -> CanGoForward
    boolean CanGoBack() -> CanGoBack
    void GoToUrl(java.lang.String) -> GoToUrl
    void StopLoading() -> StopLoading
    void Reload() -> Reload
    void UsesLocation(boolean) -> UsesLocation
    boolean PromptforPermission() -> PromptforPermission
    void PromptforPermission(boolean) -> PromptforPermission
    void ClearLocations() -> ClearLocations
    void resetWebViewClient() -> Z
    void ClearCaches() -> ClearCaches
    void ClearCookies() -> ClearCookies
    void RunJavaScript(java.lang.String) -> RunJavaScript
    void WebViewStringChange(java.lang.String) -> WebViewStringChange
    void BeforePageLoad(java.lang.String) -> BeforePageLoad
    void PageLoaded(java.lang.String) -> PageLoaded
    void ErrorOccurred(int,java.lang.String,java.lang.String) -> ErrorOccurred
    void loadUrl(java.lang.String,java.lang.String) -> a
    boolean access$000(com.google.appinventor.components.runtime.WebViewer) -> a
    boolean access$202(com.google.appinventor.components.runtime.WebViewer,boolean) -> a
    android.webkit.WebView access$300(com.google.appinventor.components.runtime.WebViewer) -> a
com.google.appinventor.components.runtime.WebViewer$1 -> com.google.appinventor.components.runtime.dd:
    com.google.appinventor.components.runtime.WebViewer this$0 -> a
    void <init>(com.google.appinventor.components.runtime.WebViewer) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.google.appinventor.components.runtime.WebViewer$2 -> com.google.appinventor.components.runtime.de:
    java.lang.String val$url -> cv
    java.lang.String val$caller -> cw
    com.google.appinventor.components.runtime.WebViewer this$0 -> b
    void <init>(com.google.appinventor.components.runtime.WebViewer,java.lang.String,java.lang.String) -> <init>
    void HandlePermissionResponse(java.lang.String,boolean) -> HandlePermissionResponse
com.google.appinventor.components.runtime.WebViewer$WebViewInterface -> com.google.appinventor.components.runtime.WebViewer$WebViewInterface:
    java.lang.String webViewString -> w
    com.google.appinventor.components.runtime.WebViewer this$0 -> c
    void <init>(com.google.appinventor.components.runtime.WebViewer) -> <init>
    java.lang.String getWebViewString() -> getWebViewString
    void setWebViewString(java.lang.String) -> setWebViewString
    void setWebViewStringFromBlocks(java.lang.String) -> setWebViewStringFromBlocks
com.google.appinventor.components.runtime.WebViewer$WebViewInterface$1 -> com.google.appinventor.components.runtime.df:
    java.lang.String val$newString -> cx
    com.google.appinventor.components.runtime.WebViewer$WebViewInterface this$1 -> b
    void <init>(com.google.appinventor.components.runtime.WebViewer$WebViewInterface,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.WebViewer$WebViewerClient -> com.google.appinventor.components.runtime.dg:
    com.google.appinventor.components.runtime.WebViewer this$0 -> d
    void <init>(com.google.appinventor.components.runtime.WebViewer) -> <init>
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void <init>(com.google.appinventor.components.runtime.WebViewer,com.google.appinventor.components.runtime.WebViewer$1) -> <init>
com.google.appinventor.components.runtime.WebViewer$WebViewerClient$1 -> com.google.appinventor.components.runtime.dh:
    int val$errorCode -> bO
    java.lang.String val$description -> cy
    java.lang.String val$failingUrl -> cz
    com.google.appinventor.components.runtime.WebViewer$WebViewerClient this$1 -> a
    void <init>(com.google.appinventor.components.runtime.WebViewer$WebViewerClient,int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.YandexTranslate -> com.google.appinventor.components.runtime.YandexTranslate:
    java.lang.String YANDEX_TRANSLATE_SERVICE_URL -> YANDEX_TRANSLATE_SERVICE_URL
    java.lang.String yandexKey -> cA
    java.lang.String userYandexKey -> cB
    android.app.Activity activity -> k
    void <init>(com.google.appinventor.components.runtime.ComponentContainer) -> <init>
    void RequestTranslation(java.lang.String,java.lang.String) -> RequestTranslation
    void performRequest(java.lang.String,java.lang.String) -> b
    java.lang.String getResponseContent(java.net.HttpURLConnection) -> a
    void GotTranslation(java.lang.String,java.lang.String) -> GotTranslation
    void ApiKey(java.lang.String) -> ApiKey
    void access$000(com.google.appinventor.components.runtime.YandexTranslate,java.lang.String,java.lang.String) -> a
com.google.appinventor.components.runtime.YandexTranslate$1 -> com.google.appinventor.components.runtime.di:
    java.lang.String val$languageToTranslateTo -> cC
    java.lang.String val$textToTranslate -> cD
    com.google.appinventor.components.runtime.YandexTranslate this$0 -> a
    void <init>(com.google.appinventor.components.runtime.YandexTranslate,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.YandexTranslate$2 -> com.google.appinventor.components.runtime.dj:
    java.lang.String val$responseCode -> cE
    java.lang.String val$translation -> cF
    com.google.appinventor.components.runtime.YandexTranslate this$0 -> b
    void <init>(com.google.appinventor.components.runtime.YandexTranslate,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.collect.Lists -> com.google.appinventor.components.runtime.collect.Lists:
    void <init>() -> <init>
    java.util.ArrayList newArrayList() -> newArrayList
    java.util.ArrayList newArrayList(java.lang.Object[]) -> newArrayList
com.google.appinventor.components.runtime.collect.Maps -> com.google.appinventor.components.runtime.collect.Maps:
    void <init>() -> <init>
    java.util.HashMap newHashMap() -> newHashMap
    java.util.TreeMap newTreeMap() -> newTreeMap
com.google.appinventor.components.runtime.collect.Sets -> com.google.appinventor.components.runtime.collect.Sets:
    void <init>() -> <init>
    java.util.HashSet newHashSet() -> newHashSet
    java.util.HashSet newHashSet(java.lang.Object[]) -> newHashSet
    java.util.SortedSet newSortedSet(java.lang.Object[]) -> newSortedSet
com.google.appinventor.components.runtime.errors.ArrayIndexOutOfBoundsError -> com.google.appinventor.components.runtime.errors.ArrayIndexOutOfBoundsError:
    void <init>() -> <init>
com.google.appinventor.components.runtime.errors.AssertionFailure -> com.google.appinventor.components.runtime.errors.AssertionFailure:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.google.appinventor.components.runtime.errors.ConversionError -> com.google.appinventor.components.runtime.errors.ConversionError:
    void <init>() -> <init>
com.google.appinventor.components.runtime.errors.DispatchableError -> com.google.appinventor.components.runtime.errors.DispatchableError:
    int errorCode -> bP
    java.lang.Object[] arguments -> d
    void <init>(int) -> <init>
    void <init>(int,java.lang.Object[]) -> <init>
    int getErrorCode() -> getErrorCode
    java.lang.Object[] getArguments() -> getArguments
com.google.appinventor.components.runtime.errors.FileAlreadyExistsError -> com.google.appinventor.components.runtime.errors.FileAlreadyExistsError:
    void <init>(java.lang.String) -> <init>
com.google.appinventor.components.runtime.errors.FileIOError -> com.google.appinventor.components.runtime.errors.FileIOError:
    void <init>(java.lang.String) -> <init>
com.google.appinventor.components.runtime.errors.IllegalArgumentError -> com.google.appinventor.components.runtime.errors.IllegalArgumentError:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.google.appinventor.components.runtime.errors.IterationError -> com.google.appinventor.components.runtime.errors.IterationError:
    void <init>(int,java.lang.Object[]) -> <init>
    int getIndex() -> getIndex
    java.lang.String getExpected() -> getExpected
    java.lang.String getFound() -> getFound
    com.google.appinventor.components.runtime.errors.DispatchableError fromError(int,com.google.appinventor.components.runtime.errors.DispatchableError) -> fromError
    java.lang.Object[] prepend(int,java.lang.Object[]) -> a
com.google.appinventor.components.runtime.errors.NoSuchFileError -> com.google.appinventor.components.runtime.errors.NoSuchFileError:
    void <init>(java.lang.String) -> <init>
com.google.appinventor.components.runtime.errors.PermissionException -> com.google.appinventor.components.runtime.errors.PermissionException:
    java.lang.String permissionNeeded -> cG
    void <init>(java.lang.String) -> <init>
    java.lang.String getPermissionNeeded() -> getPermissionNeeded
    java.lang.String getMessage() -> getMessage
com.google.appinventor.components.runtime.errors.RequestTimeoutException -> com.google.appinventor.components.runtime.errors.RequestTimeoutException:
    int errorNumber -> bQ
    void <init>() -> <init>
com.google.appinventor.components.runtime.errors.RuntimeError -> com.google.appinventor.components.runtime.errors.RuntimeError:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    com.google.appinventor.components.runtime.errors.RuntimeError convertToRuntimeError(java.lang.Throwable) -> convertToRuntimeError
com.google.appinventor.components.runtime.errors.UninitializedInstanceError -> com.google.appinventor.components.runtime.errors.UninitializedInstanceError:
    void <init>() -> <init>
com.google.appinventor.components.runtime.errors.UnknownFileHandleError -> com.google.appinventor.components.runtime.errors.UnknownFileHandleError:
    void <init>() -> <init>
com.google.appinventor.components.runtime.errors.YailRuntimeError -> com.google.appinventor.components.runtime.errors.YailRuntimeError:
    java.lang.String errorType -> cH
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getErrorType() -> getErrorType
com.google.appinventor.components.runtime.multidex.MultiDex -> com.google.appinventor.components.runtime.multidex.MultiDex:
    java.lang.String SECONDARY_FOLDER_NAME -> cI
    java.util.Set installedApk -> p
    boolean IS_VM_MULTIDEX_CAPABLE -> bE
    void <init>() -> <init>
    boolean install(android.content.Context,boolean) -> install
    android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context) -> a
    boolean isVMMultidexCapable(java.lang.String) -> f
    void installSecondaryDexes(java.lang.ClassLoader,java.io.File,java.util.List) -> a
    boolean checkValidZipFiles(java.util.List) -> a
    java.lang.reflect.Field findField(java.lang.Object,java.lang.String) -> a
    java.lang.reflect.Method findMethod(java.lang.Object,java.lang.String,java.lang.Class[]) -> a
    void expandFieldArray(java.lang.Object,java.lang.String,java.lang.Object[]) -> a
    void clearOldDexDir(android.content.Context) -> a
    java.lang.reflect.Field access$300(java.lang.Object,java.lang.String) -> b
    void access$400(java.lang.Object,java.lang.String,java.lang.Object[]) -> b
    java.lang.reflect.Method access$500(java.lang.Object,java.lang.String,java.lang.Class[]) -> b
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.multidex.MultiDex$V14 -> com.google.appinventor.components.runtime.multidex.a:
    void install(java.lang.ClassLoader,java.util.List,java.io.File) -> a
    java.lang.Object[] makeDexElements(java.lang.Object,java.util.ArrayList,java.io.File) -> a
    void access$100(java.lang.ClassLoader,java.util.List,java.io.File) -> b
com.google.appinventor.components.runtime.multidex.MultiDex$V19 -> com.google.appinventor.components.runtime.multidex.b:
    void install(java.lang.ClassLoader,java.util.List,java.io.File) -> a
    java.lang.Object[] makeDexElements(java.lang.Object,java.util.ArrayList,java.io.File,java.util.ArrayList) -> a
    void access$000(java.lang.ClassLoader,java.util.List,java.io.File) -> c
com.google.appinventor.components.runtime.multidex.MultiDex$V4 -> com.google.appinventor.components.runtime.multidex.c:
    void install(java.lang.ClassLoader,java.util.List) -> a
    void access$200(java.lang.ClassLoader,java.util.List) -> b
com.google.appinventor.components.runtime.multidex.MultiDexApplication -> com.google.appinventor.components.runtime.multidex.MultiDexApplication:
    boolean installed -> installed
    void <init>() -> <init>
    void attachBaseContext(android.content.Context) -> attachBaseContext
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.multidex.MultiDexExtractor -> com.google.appinventor.components.runtime.multidex.d:
    java.lang.reflect.Method sApplyMethod -> a
    boolean mustLoad(android.content.Context,android.content.pm.ApplicationInfo) -> a
    java.util.List load(android.content.Context,android.content.pm.ApplicationInfo,java.io.File,boolean) -> a
    java.util.List loadExistingExtractions(android.content.Context,java.io.File,java.io.File) -> a
    boolean isModified(android.content.Context,java.io.File,long) -> a
    long getTimeStamp(java.io.File) -> a
    long getZipCrc(java.io.File) -> b
    java.util.List performExtractions(java.io.File,java.io.File) -> a
    void putStoredApkInfo(android.content.Context,long,long,int) -> a
    android.content.SharedPreferences getMultiDexPreferences(android.content.Context) -> a
    void prepareDexDir(java.io.File,java.lang.String) -> b
    void extract(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File,java.lang.String) -> a
    boolean verifyZipFile(java.io.File) -> a
    void apply(android.content.SharedPreferences$Editor) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.multidex.MultiDexExtractor$1 -> com.google.appinventor.components.runtime.multidex.e:
    java.lang.String val$extractedFilePrefix -> cJ
    void <init>(java.lang.String) -> <init>
    boolean accept(java.io.File) -> accept
com.google.appinventor.components.runtime.multidex.ZipUtil -> com.google.appinventor.components.runtime.multidex.f:
    long getZipCrc(java.io.File) -> b
    com.google.appinventor.components.runtime.multidex.ZipUtil$CentralDirectory findCentralDirectory(java.io.RandomAccessFile) -> a
    long computeCrcOfCentralDir(java.io.RandomAccessFile,com.google.appinventor.components.runtime.multidex.ZipUtil$CentralDirectory) -> a
com.google.appinventor.components.runtime.multidex.ZipUtil$CentralDirectory -> com.google.appinventor.components.runtime.multidex.g:
    long offset -> i
    long size -> j
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.AccountChooser -> com.google.appinventor.components.runtime.util.AccountChooser:
    android.accounts.AccountManager accountManager -> a
    java.lang.String service -> cK
    java.lang.String preferencesKey -> cL
    android.app.Activity activity -> a
    java.lang.String chooseAccountPrompt -> cM
    void <init>(android.app.Activity,java.lang.String,java.lang.String,java.lang.String) -> <init>
    android.accounts.Account findAccount() -> findAccount
    android.accounts.Account chooseAccount(java.lang.String,android.accounts.Account[]) -> a
    java.lang.String createAccount() -> g
    java.lang.String selectAccount(android.accounts.Account[]) -> a
    android.content.SharedPreferences getPreferences() -> a
    java.lang.String getPersistedAccountName() -> h
    void persistAccountName(java.lang.String) -> q
    void forgetAccountName() -> forgetAccountName
    java.lang.String access$100(com.google.appinventor.components.runtime.util.AccountChooser) -> a
    android.app.Activity access$200(com.google.appinventor.components.runtime.util.AccountChooser) -> a
com.google.appinventor.components.runtime.util.AccountChooser$SelectAccount -> com.google.appinventor.components.runtime.util.a:
    java.lang.String[] accountNames -> j
    java.util.concurrent.SynchronousQueue queue -> a
    com.google.appinventor.components.runtime.util.AccountChooser this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.AccountChooser,android.accounts.Account[],java.util.concurrent.SynchronousQueue) -> <init>
    void run() -> run
    void onClick(android.content.DialogInterface,int) -> onClick
    void onCancel(android.content.DialogInterface) -> onCancel
    java.lang.String[] access$000(com.google.appinventor.components.runtime.util.AccountChooser$SelectAccount) -> a
com.google.appinventor.components.runtime.util.AccountChooser$SelectAccount$1 -> com.google.appinventor.components.runtime.util.b:
    com.google.appinventor.components.runtime.util.AccountChooser$SelectAccount this$1 -> a
    void <init>(com.google.appinventor.components.runtime.util.AccountChooser$SelectAccount) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.AlignmentUtil -> com.google.appinventor.components.runtime.util.AlignmentUtil:
    com.google.appinventor.components.runtime.LinearLayout viewLayout -> a
    void <init>(com.google.appinventor.components.runtime.LinearLayout) -> <init>
    void setHorizontalAlignment(int) -> setHorizontalAlignment
    void setVerticalAlignment(int) -> setVerticalAlignment
com.google.appinventor.components.runtime.util.AnimationUtil -> com.google.appinventor.components.runtime.util.AnimationUtil:
    void <init>() -> <init>
    void ApplyHorizontalScrollAnimation(android.view.View,boolean,int) -> a
    void ApplyAnimation(android.view.View,java.lang.String) -> ApplyAnimation
    void ApplyOpenScreenAnimation(android.app.Activity,java.lang.String) -> ApplyOpenScreenAnimation
    void ApplyCloseScreenAnimation(android.app.Activity,java.lang.String) -> ApplyCloseScreenAnimation
com.google.appinventor.components.runtime.util.AppInvHTTPD -> com.google.appinventor.components.runtime.util.AppInvHTTPD:
    java.io.File rootDir -> b
    gnu.expr.Language scheme -> a
    com.google.appinventor.components.runtime.ReplForm form -> f
    boolean secure -> secure
    byte[] hmacKey -> b
    int seq -> bR
    android.os.Handler androidUIHandler -> l
    void <init>(int,java.io.File,boolean,com.google.appinventor.components.runtime.ReplForm) -> <init>
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response serve(java.lang.String,java.lang.String,java.util.Properties,java.util.Properties,java.util.Properties,java.net.Socket) -> serve
    boolean copyFile(java.io.File,java.io.File) -> a
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response processLoadExtensionsRequest(java.util.Properties) -> a
    void adoptMainThreadClassLoader() -> P
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response message(java.lang.String) -> a
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response error(java.lang.String) -> b
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response error(java.lang.Throwable) -> a
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response addHeaders(com.google.appinventor.components.runtime.util.NanoHTTPD$Response) -> a
    void setHmacKey(java.lang.String) -> setHmacKey
    void resetSeq() -> resetSeq
    com.google.appinventor.components.runtime.ReplForm access$000(com.google.appinventor.components.runtime.util.AppInvHTTPD) -> a
com.google.appinventor.components.runtime.util.AppInvHTTPD$1 -> com.google.appinventor.components.runtime.util.c:
    com.google.appinventor.components.runtime.util.AppInvHTTPD this$0 -> b
    void <init>(com.google.appinventor.components.runtime.util.AppInvHTTPD) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.AssetFetcher -> com.google.appinventor.components.runtime.util.AssetFetcher:
    java.lang.String LOG_TAG -> cN
    java.util.concurrent.ExecutorService background -> a
    boolean inError -> bF
    java.lang.Object semaphore -> s
    void <init>() -> <init>
    void fetchAssets(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fetchAssets
    void upgradeCompanion(java.lang.String,java.lang.String) -> upgradeCompanion
    void loadExtensions(java.lang.String) -> loadExtensions
    java.io.File getFile(java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.io.File access$000(java.lang.String,java.lang.String,java.lang.String,int) -> b
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.AssetFetcher$1 -> com.google.appinventor.components.runtime.util.d:
    java.lang.String val$uri -> cO
    java.lang.String val$projectId -> cP
    java.lang.String val$asset -> cQ
    java.lang.String val$cookieValue -> cR
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.AssetFetcher$2 -> com.google.appinventor.components.runtime.util.e:
    java.lang.String val$fileName -> cS
    void <init>(java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.AsyncCallbackFacade -> com.google.appinventor.components.runtime.util.AsyncCallbackFacade:
    com.google.appinventor.components.runtime.util.AsyncCallbackPair callback -> callback
    void <init>(com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> <init>
    void onFailure(java.lang.String) -> onFailure
com.google.appinventor.components.runtime.util.AsyncCallbackPair -> com.google.appinventor.components.runtime.util.AsyncCallbackPair:
    void onFailure(java.lang.String) -> onFailure
    void onSuccess(java.lang.Object) -> onSuccess
com.google.appinventor.components.runtime.util.AsynchUtil -> com.google.appinventor.components.runtime.util.AsynchUtil:
    void <init>() -> <init>
    void runAsynchronously(java.lang.Runnable) -> runAsynchronously
    void runAsynchronously(android.os.Handler,java.lang.Runnable,java.lang.Runnable) -> runAsynchronously
com.google.appinventor.components.runtime.util.AsynchUtil$1 -> com.google.appinventor.components.runtime.util.f:
    java.lang.Runnable val$call -> q
    java.lang.Runnable val$callback -> r
    android.os.Handler val$androidUIHandler -> m
    void <init>(java.lang.Runnable,java.lang.Runnable,android.os.Handler) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.AsynchUtil$1$1 -> com.google.appinventor.components.runtime.util.g:
    com.google.appinventor.components.runtime.util.AsynchUtil$1 this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.AsynchUtil$1) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.BiggerFuture -> com.google.appinventor.components.runtime.util.BiggerFuture:
    void <init>(gnu.mapping.Procedure,gnu.mapping.InPort,gnu.mapping.OutPort,gnu.mapping.OutPort,java.lang.String,long) -> <init>
    java.lang.String toString() -> toString
com.google.appinventor.components.runtime.util.BluetoothReflection -> com.google.appinventor.components.runtime.util.BluetoothReflection:
    void <init>() -> <init>
    java.lang.Object getBluetoothAdapter() -> getBluetoothAdapter
    boolean isBluetoothEnabled(java.lang.Object) -> isBluetoothEnabled
    java.util.Set getBondedDevices(java.lang.Object) -> getBondedDevices
    boolean checkBluetoothAddress(java.lang.Object,java.lang.String) -> checkBluetoothAddress
    java.lang.Object getRemoteDevice(java.lang.Object,java.lang.String) -> getRemoteDevice
    java.lang.Object listenUsingRfcommWithServiceRecord(java.lang.Object,java.lang.String,java.util.UUID) -> listenUsingRfcommWithServiceRecord
    java.lang.Object listenUsingInsecureRfcommWithServiceRecord(java.lang.Object,java.lang.String,java.util.UUID) -> listenUsingInsecureRfcommWithServiceRecord
    java.lang.String getBluetoothDeviceName(java.lang.Object) -> getBluetoothDeviceName
    java.lang.String getBluetoothDeviceAddress(java.lang.Object) -> getBluetoothDeviceAddress
    boolean isBonded(java.lang.Object) -> isBonded
    java.lang.Object getBluetoothClass(java.lang.Object) -> getBluetoothClass
    java.lang.Object createRfcommSocketToServiceRecord(java.lang.Object,java.util.UUID) -> createRfcommSocketToServiceRecord
    java.lang.Object createInsecureRfcommSocketToServiceRecord(java.lang.Object,java.util.UUID) -> createInsecureRfcommSocketToServiceRecord
    int getDeviceClass(java.lang.Object) -> getDeviceClass
    void connectToBluetoothSocket(java.lang.Object) -> connectToBluetoothSocket
    boolean isBluetoothSocketConnected(java.lang.Object) -> isBluetoothSocketConnected
    java.io.InputStream getInputStream(java.lang.Object) -> getInputStream
    java.io.OutputStream getOutputStream(java.lang.Object) -> getOutputStream
    void closeBluetoothSocket(java.lang.Object) -> closeBluetoothSocket
    java.lang.Object accept(java.lang.Object) -> accept
    void closeBluetoothServerSocket(java.lang.Object) -> closeBluetoothServerSocket
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String) -> a
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> a
    java.lang.Object invokeStaticMethod(java.lang.reflect.Method) -> a
    java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> a
    java.lang.Object invokeMethodThrowsIllegalArgumentException(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> b
    java.lang.Object invokeMethodThrowsIOException(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> c
com.google.appinventor.components.runtime.util.BoundingBox -> com.google.appinventor.components.runtime.util.BoundingBox:
    double left -> y
    double top -> z
    double right -> A
    double bottom -> B
    void <init>(double,double,double,double) -> <init>
    boolean intersectDestructively(com.google.appinventor.components.runtime.util.BoundingBox) -> intersectDestructively
    double getLeft() -> getLeft
    double getTop() -> getTop
    double getRight() -> getRight
    double getBottom() -> getBottom
    java.lang.String toString() -> toString
com.google.appinventor.components.runtime.util.BulkPermissionRequest -> com.google.appinventor.components.runtime.util.BulkPermissionRequest:
    com.google.appinventor.components.runtime.Component source -> f
    java.lang.String caller -> cT
    java.lang.String[] permissions -> k
    void <init>(com.google.appinventor.components.runtime.Component,java.lang.String,java.lang.String[]) -> <init>
    void onGranted() -> onGranted
    void onDenied(java.lang.String[]) -> onDenied
    java.util.List getPermissions() -> getPermissions
com.google.appinventor.components.runtime.util.CloudDBJedisListener -> com.google.appinventor.components.runtime.util.CloudDBJedisListener:
    com.google.appinventor.components.runtime.CloudDB cloudDB -> cloudDB
    java.lang.Thread myThread -> a
    java.lang.String LOG_TAG -> H
    void <init>(com.google.appinventor.components.runtime.CloudDB) -> <init>
    void onSubscribe(java.lang.String,int) -> onSubscribe
    void onMessage(java.lang.String,java.lang.String) -> onMessage
    void terminate() -> terminate
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.CsvUtil -> com.google.appinventor.components.runtime.util.CsvUtil:
    void <init>() -> <init>
    com.google.appinventor.components.runtime.util.YailList fromCsvTable(java.lang.String) -> fromCsvTable
    com.google.appinventor.components.runtime.util.YailList fromCsvRow(java.lang.String) -> fromCsvRow
    java.lang.String toCsvRow(com.google.appinventor.components.runtime.util.YailList) -> toCsvRow
    java.lang.String toCsvTable(com.google.appinventor.components.runtime.util.YailList) -> toCsvTable
    void makeCsvRow(com.google.appinventor.components.runtime.util.YailList,java.lang.StringBuilder) -> a
com.google.appinventor.components.runtime.util.CsvUtil$CsvParser -> com.google.appinventor.components.runtime.util.h:
    java.util.regex.Pattern ESCAPED_QUOTE_PATTERN -> b
    char[] buf -> a
    java.io.Reader in -> a
    int pos -> bS
    int limit -> bT
    boolean opened -> bG
    int cellLength -> bU
    int delimitedCellLength -> bV
    java.lang.Exception lastException -> a
    long previouslyRead -> k
    void <init>(java.io.Reader) -> <init>
    boolean hasNext() -> hasNext
    java.util.ArrayList next() -> a
    int indexAfterCompactionAndFilling(int) -> e
    int compact(int) -> f
    void fill() -> aa
    boolean lookingAtCell() -> l
    boolean findUnescapedEndQuote(int) -> d
    boolean findDelimOrEnd(int) -> e
    int checkedIndex(int) -> g
    boolean findUnquotedCellEnd(int) -> f
    void remove() -> remove
    void throwAnyProblem() -> ab
    java.lang.Object next() -> next
com.google.appinventor.components.runtime.util.CustomMediaController -> com.google.appinventor.components.runtime.util.CustomMediaController:
    android.view.View mAnchorView -> d
    int mShowTime -> bW
    void <init>(android.content.Context) -> <init>
    void show(int) -> show
    void show() -> show
    boolean addTo(android.view.ViewGroup,android.view.ViewGroup$LayoutParams) -> addTo
    void setAnchorView(android.view.View) -> setAnchorView
    void hide() -> hide
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.google.appinventor.components.runtime.util.Dates -> com.google.appinventor.components.runtime.util.Dates:
    int DATE_YEAR -> DATE_YEAR
    int DATE_MONTH -> DATE_MONTH
    int DATE_DAY -> DATE_DAY
    int DATE_WEEK -> DATE_WEEK
    int DATE_HOUR -> DATE_HOUR
    int DATE_MINUTE -> DATE_MINUTE
    int DATE_SECOND -> DATE_SECOND
    int DATE_MILLISECOND -> DATE_MILLISECOND
    int DATE_MONDAY -> DATE_MONDAY
    int DATE_TUESDAY -> DATE_TUESDAY
    int DATE_WEDNESDAY -> DATE_WEDNESDAY
    int DATE_THURSDAY -> DATE_THURSDAY
    int DATE_FRIDAY -> DATE_FRIDAY
    int DATE_SATURDAY -> DATE_SATURDAY
    int DATE_SUNDAY -> DATE_SUNDAY
    int DATE_JANUARY -> DATE_JANUARY
    int DATE_FEBRUARY -> DATE_FEBRUARY
    int DATE_MARCH -> DATE_MARCH
    int DATE_APRIL -> DATE_APRIL
    int DATE_MAY -> DATE_MAY
    int DATE_JUNE -> DATE_JUNE
    int DATE_JULY -> DATE_JULY
    int DATE_AUGUST -> DATE_AUGUST
    int DATE_SEPTEMBER -> DATE_SEPTEMBER
    int DATE_OCTOBER -> DATE_OCTOBER
    int DATE_NOVEMBER -> DATE_NOVEMBER
    int DATE_DECEMBER -> DATE_DECEMBER
    void <init>() -> <init>
    void DateAdd(java.util.Calendar,int,int) -> DateAdd
    void DateAddInMillis(java.util.Calendar,long) -> DateAddInMillis
    java.util.Calendar DateValue(java.lang.String) -> DateValue
    java.util.Date tryParseDate(java.lang.String) -> a
    int Day(java.util.Calendar) -> Day
    long ConvertDuration(long,int) -> ConvertDuration
    java.lang.String FormatDateTime(java.util.Calendar,java.lang.String) -> FormatDateTime
    java.lang.String FormatDate(java.util.Calendar,java.lang.String) -> FormatDate
    java.lang.String FormatTime(java.util.Calendar) -> FormatTime
    java.util.Calendar DateInstant(int,int,int) -> DateInstant
    java.util.Calendar TimeInstant(int,int) -> TimeInstant
    int Hour(java.util.Calendar) -> Hour
    int Minute(java.util.Calendar) -> Minute
    int Month(java.util.Calendar) -> Month
    java.lang.String MonthName(java.util.Calendar) -> MonthName
    java.util.Calendar Now() -> Now
    int Second(java.util.Calendar) -> Second
    long Timer() -> Timer
    int Weekday(java.util.Calendar) -> Weekday
    java.lang.String WeekdayName(java.util.Calendar) -> WeekdayName
    int Year(java.util.Calendar) -> Year
com.google.appinventor.components.runtime.util.DonutUtil -> com.google.appinventor.components.runtime.util.DonutUtil:
    void <init>() -> <init>
    void buildDrawingCache(android.view.View,boolean) -> buildDrawingCache
    android.graphics.Bitmap getDrawingCache(android.view.View,boolean) -> getDrawingCache
com.google.appinventor.components.runtime.util.DummyMapController -> com.google.appinventor.components.runtime.util.i:
    void <init>() -> <init>
    android.view.View getView() -> getView
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    void setCenter(double,double) -> setCenter
    void setZoom(int) -> setZoom
    void setRotation(float) -> setRotation
    float getRotation() -> getRotation
    int getZoom() -> getZoom
    void setMapType(com.google.appinventor.components.runtime.util.MapFactory$MapType) -> setMapType
    com.google.appinventor.components.runtime.util.MapFactory$MapType getMapType() -> getMapType
    void setCompassEnabled(boolean) -> setCompassEnabled
    boolean isCompassEnabled() -> isCompassEnabled
    void setZoomEnabled(boolean) -> setZoomEnabled
    boolean isZoomEnabled() -> isZoomEnabled
    void setZoomControlEnabled(boolean) -> setZoomControlEnabled
    boolean isZoomControlEnabled() -> isZoomControlEnabled
    void setShowUserEnabled(boolean) -> setShowUserEnabled
    boolean isShowUserEnabled() -> isShowUserEnabled
    void setRotationEnabled(boolean) -> setRotationEnabled
    boolean isRotationEnabled() -> isRotationEnabled
    void setPanEnabled(boolean) -> setPanEnabled
    boolean isPanEnabled() -> isPanEnabled
    void panTo(double,double,int,double) -> panTo
    void addEventListener(com.google.appinventor.components.runtime.util.MapFactory$MapEventListener) -> addEventListener
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> addFeature
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> updateFeaturePosition
    void updateFeatureFill(com.google.appinventor.components.runtime.util.MapFactory$HasFill) -> updateFeatureFill
    void updateFeatureImage(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> updateFeatureImage
    void updateFeatureText(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> updateFeatureText
    void updateFeatureDraggable(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> updateFeatureDraggable
    org.osmdroid.util.BoundingBox getBoundingBox() -> getBoundingBox
    void setBoundingBox(org.osmdroid.util.BoundingBox) -> setBoundingBox
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> addFeature
    void removeFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> removeFeature
    void showFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> showFeature
    void hideFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> hideFeature
    boolean isFeatureVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> isFeatureVisible
    boolean isFeatureCollectionVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureCollection) -> isFeatureCollectionVisible
    void setFeatureCollectionVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureCollection,boolean) -> setFeatureCollectionVisible
    void showInfobox(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> showInfobox
    void hideInfobox(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> hideInfobox
    boolean isInfoboxVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> isInfoboxVisible
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> updateFeaturePosition
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> updateFeaturePosition
    void updateFeatureHoles(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> updateFeatureHoles
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> updateFeaturePosition
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> updateFeaturePosition
    void updateFeatureStroke(com.google.appinventor.components.runtime.util.MapFactory$HasStroke) -> updateFeatureStroke
    void updateFeatureSize(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> updateFeatureSize
    com.google.appinventor.components.runtime.LocationSensor$LocationSensorListener getLocationListener() -> getLocationListener
    int getOverlayCount() -> getOverlayCount
    void setScaleVisible(boolean) -> setScaleVisible
    boolean isScaleVisible() -> isScaleVisible
    void setScaleUnits(com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits) -> setScaleUnits
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits getScaleUnits() -> getScaleUnits
com.google.appinventor.components.runtime.util.EclairUtil -> com.google.appinventor.components.runtime.util.EclairUtil:
    void <init>() -> <init>
    void overridePendingTransitions(android.app.Activity,int,int) -> overridePendingTransitions
    void setupWebViewGeoLoc(com.google.appinventor.components.runtime.WebViewer,android.webkit.WebView,android.app.Activity) -> setupWebViewGeoLoc
    void clearWebViewGeoLoc() -> clearWebViewGeoLoc
    java.lang.String getInstallerPackageName(java.lang.String,android.app.Activity) -> getInstallerPackageName
    void disableSuggestions(android.widget.EditText) -> disableSuggestions
com.google.appinventor.components.runtime.util.EclairUtil$1 -> com.google.appinventor.components.runtime.util.j:
    com.google.appinventor.components.runtime.WebViewer val$caller -> e
    android.app.Activity val$activity -> l
    void <init>(com.google.appinventor.components.runtime.WebViewer,android.app.Activity) -> <init>
    void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback) -> onGeolocationPermissionsShowPrompt
com.google.appinventor.components.runtime.util.EclairUtil$1$1 -> com.google.appinventor.components.runtime.util.k:
    android.webkit.GeolocationPermissions$Callback val$theCallback -> b
    java.lang.String val$theOrigin -> cU
    com.google.appinventor.components.runtime.util.EclairUtil$1 this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.EclairUtil$1,android.webkit.GeolocationPermissions$Callback,java.lang.String) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.util.EclairUtil$1$2 -> com.google.appinventor.components.runtime.util.l:
    android.webkit.GeolocationPermissions$Callback val$theCallback -> c
    java.lang.String val$theOrigin -> cV
    com.google.appinventor.components.runtime.util.EclairUtil$1 this$0 -> b
    void <init>(com.google.appinventor.components.runtime.util.EclairUtil$1,android.webkit.GeolocationPermissions$Callback,java.lang.String) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.util.ElementsUtil -> com.google.appinventor.components.runtime.util.ElementsUtil:
    void <init>() -> <init>
    com.google.appinventor.components.runtime.util.YailList elementsFromString(java.lang.String) -> elementsFromString
    com.google.appinventor.components.runtime.util.YailList elements(com.google.appinventor.components.runtime.util.YailList,java.lang.String) -> elements
    int selectionIndex(int,com.google.appinventor.components.runtime.util.YailList) -> selectionIndex
    java.lang.String setSelectionFromIndex(int,com.google.appinventor.components.runtime.util.YailList) -> setSelectionFromIndex
    int setSelectedIndexFromValue(java.lang.String,com.google.appinventor.components.runtime.util.YailList) -> setSelectedIndexFromValue
com.google.appinventor.components.runtime.util.ErrorMessages -> com.google.appinventor.components.runtime.util.ErrorMessages:
    int ERROR_DEFAULT -> ERROR_DEFAULT
    int ERROR_FUNCTIONALITY_NOT_SUPPORTED_CONTACT_EMAIL -> ERROR_FUNCTIONALITY_NOT_SUPPORTED_CONTACT_EMAIL
    int ERROR_FUNCTIONALITY_NOT_SUPPORTED_EMAIL_PICKER -> ERROR_FUNCTIONALITY_NOT_SUPPORTED_EMAIL_PICKER
    int ERROR_FUNCTIONALITY_NOT_SUPPORTED_FUSIONTABLES_CONTROL -> ERROR_FUNCTIONALITY_NOT_SUPPORTED_FUSIONTABLES_CONTROL
    int ERROR_FUNCTIONALITY_NOT_SUPPORTED_WEB_COOKIES -> ERROR_FUNCTIONALITY_NOT_SUPPORTED_WEB_COOKIES
    int ERROR_FUNCTIONALITY_NOT_SUPPORTED_WIFI_DIRECT -> ERROR_FUNCTIONALITY_NOT_SUPPORTED_WIFI_DIRECT
    int ERROR_LOCATION_SENSOR_LATITUDE_NOT_FOUND -> ERROR_LOCATION_SENSOR_LATITUDE_NOT_FOUND
    int ERROR_LOCATION_SENSOR_LONGITUDE_NOT_FOUND -> ERROR_LOCATION_SENSOR_LONGITUDE_NOT_FOUND
    int ERROR_LOCATION_NO_PERMISSION -> ERROR_LOCATION_NO_PERMISSION
    int ERROR_CAMERA_NO_IMAGE_RETURNED -> ERROR_CAMERA_NO_IMAGE_RETURNED
    int ERROR_NO_CAMERA_PERMISSION -> ERROR_NO_CAMERA_PERMISSION
    int ERROR_TWITTER_UNSUPPORTED_LOGIN_FUNCTION -> ERROR_TWITTER_UNSUPPORTED_LOGIN_FUNCTION
    int ERROR_TWITTER_BLANK_CONSUMER_KEY_OR_SECRET -> ERROR_TWITTER_BLANK_CONSUMER_KEY_OR_SECRET
    int ERROR_TWITTER_EXCEPTION -> ERROR_TWITTER_EXCEPTION
    int ERROR_TWITTER_UNABLE_TO_GET_ACCESS_TOKEN -> ERROR_TWITTER_UNABLE_TO_GET_ACCESS_TOKEN
    int ERROR_TWITTER_AUTHORIZATION_FAILED -> ERROR_TWITTER_AUTHORIZATION_FAILED
    int ERROR_TWITTER_SET_STATUS_FAILED -> ERROR_TWITTER_SET_STATUS_FAILED
    int ERROR_TWITTER_REQUEST_MENTIONS_FAILED -> ERROR_TWITTER_REQUEST_MENTIONS_FAILED
    int ERROR_TWITTER_REQUEST_FOLLOWERS_FAILED -> ERROR_TWITTER_REQUEST_FOLLOWERS_FAILED
    int ERROR_TWITTER_REQUEST_DIRECT_MESSAGES_FAILED -> ERROR_TWITTER_REQUEST_DIRECT_MESSAGES_FAILED
    int ERROR_TWITTER_DIRECT_MESSAGE_FAILED -> ERROR_TWITTER_DIRECT_MESSAGE_FAILED
    int ERROR_TWITTER_FOLLOW_FAILED -> ERROR_TWITTER_FOLLOW_FAILED
    int ERROR_TWITTER_STOP_FOLLOWING_FAILED -> ERROR_TWITTER_STOP_FOLLOWING_FAILED
    int ERROR_TWITTER_REQUEST_FRIEND_TIMELINE_FAILED -> ERROR_TWITTER_REQUEST_FRIEND_TIMELINE_FAILED
    int ERROR_TWITTER_SEARCH_FAILED -> ERROR_TWITTER_SEARCH_FAILED
    int ERROR_TWITTER_INVALID_IMAGE_PATH -> ERROR_TWITTER_INVALID_IMAGE_PATH
    int ERROR_NXT_BLUETOOTH_NOT_SET -> ERROR_NXT_BLUETOOTH_NOT_SET
    int ERROR_NXT_NOT_CONNECTED_TO_ROBOT -> ERROR_NXT_NOT_CONNECTED_TO_ROBOT
    int ERROR_NXT_INVALID_RETURN_PACKAGE -> ERROR_NXT_INVALID_RETURN_PACKAGE
    int ERROR_NXT_ERROR_CODE_RECEIVED -> ERROR_NXT_ERROR_CODE_RECEIVED
    int ERROR_NXT_INVALID_PROGRAM_NAME -> ERROR_NXT_INVALID_PROGRAM_NAME
    int ERROR_NXT_INVALID_FILE_NAME -> ERROR_NXT_INVALID_FILE_NAME
    int ERROR_NXT_INVALID_MOTOR_PORT -> ERROR_NXT_INVALID_MOTOR_PORT
    int ERROR_NXT_INVALID_SENSOR_PORT -> ERROR_NXT_INVALID_SENSOR_PORT
    int ERROR_NXT_INVALID_MAILBOX -> ERROR_NXT_INVALID_MAILBOX
    int ERROR_NXT_MESSAGE_TOO_LONG -> ERROR_NXT_MESSAGE_TOO_LONG
    int ERROR_NXT_DATA_TOO_LARGE -> ERROR_NXT_DATA_TOO_LARGE
    int ERROR_NXT_COULD_NOT_DECODE_ELEMENT -> ERROR_NXT_COULD_NOT_DECODE_ELEMENT
    int ERROR_NXT_COULD_NOT_FIT_ELEMENT_IN_BYTE -> ERROR_NXT_COULD_NOT_FIT_ELEMENT_IN_BYTE
    int ERROR_NXT_INVALID_SOURCE_ARGUMENT -> ERROR_NXT_INVALID_SOURCE_ARGUMENT
    int ERROR_NXT_INVALID_DESTINATION_ARGUMENT -> ERROR_NXT_INVALID_DESTINATION_ARGUMENT
    int ERROR_NXT_UNABLE_TO_DOWNLOAD_FILE -> ERROR_NXT_UNABLE_TO_DOWNLOAD_FILE
    int ERROR_NXT_CANNOT_DETECT_COLOR -> ERROR_NXT_CANNOT_DETECT_COLOR
    int ERROR_NXT_CANNOT_DETECT_LIGHT -> ERROR_NXT_CANNOT_DETECT_LIGHT
    int ERROR_NXT_INVALID_GENERATE_COLOR -> ERROR_NXT_INVALID_GENERATE_COLOR
    int ERROR_BLUETOOTH_NOT_AVAILABLE -> ERROR_BLUETOOTH_NOT_AVAILABLE
    int ERROR_BLUETOOTH_NOT_ENABLED -> ERROR_BLUETOOTH_NOT_ENABLED
    int ERROR_BLUETOOTH_INVALID_ADDRESS -> ERROR_BLUETOOTH_INVALID_ADDRESS
    int ERROR_BLUETOOTH_NOT_PAIRED_DEVICE -> ERROR_BLUETOOTH_NOT_PAIRED_DEVICE
    int ERROR_BLUETOOTH_NOT_REQUIRED_CLASS_OF_DEVICE -> ERROR_BLUETOOTH_NOT_REQUIRED_CLASS_OF_DEVICE
    int ERROR_BLUETOOTH_INVALID_UUID -> ERROR_BLUETOOTH_INVALID_UUID
    int ERROR_BLUETOOTH_UNABLE_TO_CONNECT -> ERROR_BLUETOOTH_UNABLE_TO_CONNECT
    int ERROR_BLUETOOTH_UNABLE_TO_LISTEN -> ERROR_BLUETOOTH_UNABLE_TO_LISTEN
    int ERROR_BLUETOOTH_UNABLE_TO_ACCEPT -> ERROR_BLUETOOTH_UNABLE_TO_ACCEPT
    int ERROR_BLUETOOTH_COULD_NOT_DECODE -> ERROR_BLUETOOTH_COULD_NOT_DECODE
    int ERROR_BLUETOOTH_COULD_NOT_FIT_NUMBER_IN_BYTE -> ERROR_BLUETOOTH_COULD_NOT_FIT_NUMBER_IN_BYTE
    int ERROR_BLUETOOTH_COULD_NOT_FIT_NUMBER_IN_BYTES -> ERROR_BLUETOOTH_COULD_NOT_FIT_NUMBER_IN_BYTES
    int ERROR_BLUETOOTH_COULD_NOT_DECODE_ELEMENT -> ERROR_BLUETOOTH_COULD_NOT_DECODE_ELEMENT
    int ERROR_BLUETOOTH_COULD_NOT_FIT_ELEMENT_IN_BYTE -> ERROR_BLUETOOTH_COULD_NOT_FIT_ELEMENT_IN_BYTE
    int ERROR_BLUETOOTH_NOT_CONNECTED_TO_DEVICE -> ERROR_BLUETOOTH_NOT_CONNECTED_TO_DEVICE
    int ERROR_BLUETOOTH_UNABLE_TO_WRITE -> ERROR_BLUETOOTH_UNABLE_TO_WRITE
    int ERROR_BLUETOOTH_UNABLE_TO_READ -> ERROR_BLUETOOTH_UNABLE_TO_READ
    int ERROR_BLUETOOTH_END_OF_STREAM -> ERROR_BLUETOOTH_END_OF_STREAM
    int ERROR_BLUETOOTH_UNSUPPORTED_ENCODING -> ERROR_BLUETOOTH_UNSUPPORTED_ENCODING
    int ERROR_ACTIVITY_STARTER_NO_CORRESPONDING_ACTIVITY -> ERROR_ACTIVITY_STARTER_NO_CORRESPONDING_ACTIVITY
    int ERROR_ACTIVITY_STARTER_NO_ACTION_INFO -> ERROR_ACTIVITY_STARTER_NO_ACTION_INFO
    int ERROR_UNABLE_TO_LOAD_MEDIA -> ERROR_UNABLE_TO_LOAD_MEDIA
    int ERROR_UNABLE_TO_PREPARE_MEDIA -> ERROR_UNABLE_TO_PREPARE_MEDIA
    int ERROR_UNABLE_TO_PLAY_MEDIA -> ERROR_UNABLE_TO_PLAY_MEDIA
    int ERROR_MEDIA_EXTERNAL_STORAGE_READONLY -> ERROR_MEDIA_EXTERNAL_STORAGE_READONLY
    int ERROR_MEDIA_EXTERNAL_STORAGE_NOT_AVAILABLE -> ERROR_MEDIA_EXTERNAL_STORAGE_NOT_AVAILABLE
    int ERROR_MEDIA_IMAGE_FILE_FORMAT -> ERROR_MEDIA_IMAGE_FILE_FORMAT
    int ERROR_MEDIA_CANNOT_OPEN -> ERROR_MEDIA_CANNOT_OPEN
    int ERROR_MEDIA_FILE_ERROR -> ERROR_MEDIA_FILE_ERROR
    int ERROR_UNABLE_TO_FOCUS_MEDIA -> ERROR_UNABLE_TO_FOCUS_MEDIA
    int ERROR_SOUND_NOT_READY -> ERROR_SOUND_NOT_READY
    int ERROR_OUT_OF_MEMORY_LOADING_MEDIA -> ERROR_OUT_OF_MEMORY_LOADING_MEDIA
    int ERROR_PLAYER_INVALID_VOLUME -> ERROR_PLAYER_INVALID_VOLUME
    int ERROR_SOUND_RECORDER -> ERROR_SOUND_RECORDER
    int ERROR_SOUND_RECORDER_CANNOT_CREATE -> ERROR_SOUND_RECORDER_CANNOT_CREATE
    int ERROR_SOUND_RECORDER_ILLEGAL_STOP -> ERROR_SOUND_RECORDER_ILLEGAL_STOP
    int ERROR_SOUND_RECORDER_MAX_DURATION_REACHED -> ERROR_SOUND_RECORDER_MAX_DURATION_REACHED
    int ERROR_SOUND_RECORDER_MAX_FILESIZE_REACHED -> ERROR_SOUND_RECORDER_MAX_FILESIZE_REACHED
    int ERROR_SOUND_NO_PERMISSION -> ERROR_SOUND_NO_PERMISSION
    int ERROR_INVALID_SCREEN_ORIENTATION -> ERROR_INVALID_SCREEN_ORIENTATION
    int ERROR_SCREEN_NOT_FOUND -> ERROR_SCREEN_NOT_FOUND
    int ERROR_SCREEN_BAD_VALUE_RECEIVED -> ERROR_SCREEN_BAD_VALUE_RECEIVED
    int ERROR_SCREEN_BAD_VALUE_FOR_SENDING -> ERROR_SCREEN_BAD_VALUE_FOR_SENDING
    int ERROR_SCREEN_INVALID_ANIMATION -> ERROR_SCREEN_INVALID_ANIMATION
    int ERROR_NO_FOCUSABLE_VIEW_FOUND -> ERROR_NO_FOCUSABLE_VIEW_FOUND
    int ERROR_ACTIONBAR_NOT_SUPPORTED -> ERROR_ACTIONBAR_NOT_SUPPORTED
    int ERROR_PERMISSION_DENIED -> ERROR_PERMISSION_DENIED
    int ERROR_CANVAS_BITMAP_ERROR -> ERROR_CANVAS_BITMAP_ERROR
    int ERROR_CANVAS_WIDTH_ERROR -> ERROR_CANVAS_WIDTH_ERROR
    int ERROR_CANVAS_HEIGHT_ERROR -> ERROR_CANVAS_HEIGHT_ERROR
    int ERROR_CANVAS_DRAW_SHAPE_BAD_ARGUMENT -> ERROR_CANVAS_DRAW_SHAPE_BAD_ARGUMENT
    int ERROR_WEB_UNABLE_TO_GET -> ERROR_WEB_UNABLE_TO_GET
    int ERROR_WEB_UNSUPPORTED_ENCODING -> ERROR_WEB_UNSUPPORTED_ENCODING
    int ERROR_WEB_UNABLE_TO_POST_OR_PUT -> ERROR_WEB_UNABLE_TO_POST_OR_PUT
    int ERROR_WEB_UNABLE_TO_POST_OR_PUT_FILE -> ERROR_WEB_UNABLE_TO_POST_OR_PUT_FILE
    int ERROR_WEB_JSON_TEXT_DECODE_FAILED -> ERROR_WEB_JSON_TEXT_DECODE_FAILED
    int ERROR_WEB_HTML_TEXT_DECODE_FAILED -> ERROR_WEB_HTML_TEXT_DECODE_FAILED
    int ERROR_WEB_MALFORMED_URL -> ERROR_WEB_MALFORMED_URL
    int ERROR_WEB_REQUEST_HEADER_NOT_LIST -> ERROR_WEB_REQUEST_HEADER_NOT_LIST
    int ERROR_WEB_REQUEST_HEADER_NOT_TWO_ELEMENTS -> ERROR_WEB_REQUEST_HEADER_NOT_TWO_ELEMENTS
    int ERROR_WEB_BUILD_REQUEST_DATA_NOT_LIST -> ERROR_WEB_BUILD_REQUEST_DATA_NOT_LIST
    int ERROR_WEB_BUILD_REQUEST_DATA_NOT_TWO_ELEMENTS -> ERROR_WEB_BUILD_REQUEST_DATA_NOT_TWO_ELEMENTS
    int ERROR_WEB_UNABLE_TO_DELETE -> ERROR_WEB_UNABLE_TO_DELETE
    int ERROR_WEB_XML_TEXT_DECODE_FAILED -> ERROR_WEB_XML_TEXT_DECODE_FAILED
    int ERROR_WEB_REQUEST_TIMED_OUT -> ERROR_WEB_REQUEST_TIMED_OUT
    int ERROR_WEB_JSON_TEXT_ENCODE_FAILED -> ERROR_WEB_JSON_TEXT_ENCODE_FAILED
    int ERROR_PHONE_UNSUPPORTED_CONTACT_PICKER -> ERROR_PHONE_UNSUPPORTED_CONTACT_PICKER
    int ERROR_PHONE_UNSUPPORTED_SEARCH_IN_CONTACT_PICKING -> ERROR_PHONE_UNSUPPORTED_SEARCH_IN_CONTACT_PICKING
    int ERROR_NO_READ_CONTACTS_PERMISSION -> ERROR_NO_READ_CONTACTS_PERMISSION
    int ERROR_CAMCORDER_NO_CLIP_RETURNED -> ERROR_CAMCORDER_NO_CLIP_RETURNED
    int ERROR_VIDEOPLAYER_FULLSCREEN_UNAVAILBLE -> ERROR_VIDEOPLAYER_FULLSCREEN_UNAVAILBLE
    int ERROR_VIDEOPLAYER_FULLSCREEN_CANT_EXIT -> ERROR_VIDEOPLAYER_FULLSCREEN_CANT_EXIT
    int ERROR_VIDEOPLAYER_FULLSCREEN_UNSUPPORTED -> ERROR_VIDEOPLAYER_FULLSCREEN_UNSUPPORTED
    int ERROR_BAD_VALUE_FOR_HORIZONTAL_ALIGNMENT -> ERROR_BAD_VALUE_FOR_HORIZONTAL_ALIGNMENT
    int ERROR_BAD_VALUE_FOR_VERTICAL_ALIGNMENT -> ERROR_BAD_VALUE_FOR_VERTICAL_ALIGNMENT
    int ERROR_NO_SCANNER_FOUND -> ERROR_NO_SCANNER_FOUND
    int ERROR_CANNOT_SAVE_IMAGE -> ERROR_CANNOT_SAVE_IMAGE
    int ERROR_CANNOT_COPY_MEDIA -> ERROR_CANNOT_COPY_MEDIA
    int ERROR_BAD_VALUE_FOR_TEXT_RECEIVING -> ERROR_BAD_VALUE_FOR_TEXT_RECEIVING
    int ERROR_NO_SMS_PERMISSION -> ERROR_NO_SMS_PERMISSION
    int ERROR_NO_SMS_RECEIVE_PERMISSION -> ERROR_NO_SMS_RECEIVE_PERMISSION
    int ERROR_REPL_SECURITY_ERROR -> ERROR_REPL_SECURITY_ERROR
    int ERROR_BAD_VALUE_FOR_ACCELEROMETER_SENSITIVITY -> ERROR_BAD_VALUE_FOR_ACCELEROMETER_SENSITIVITY
    int ERROR_FILE_NOT_FOUND_FOR_SHARING -> ERROR_FILE_NOT_FOUND_FOR_SHARING
    int ERROR_CANNOT_FIND_FILE -> ERROR_CANNOT_FIND_FILE
    int ERROR_CANNOT_READ_FILE -> ERROR_CANNOT_READ_FILE
    int ERROR_CANNOT_CREATE_FILE -> ERROR_CANNOT_CREATE_FILE
    int ERROR_CANNOT_WRITE_TO_FILE -> ERROR_CANNOT_WRITE_TO_FILE
    int ERROR_CANNOT_DELETE_ASSET -> ERROR_CANNOT_DELETE_ASSET
    int ERROR_CANNOT_WRITE_ASSET -> ERROR_CANNOT_WRITE_ASSET
    int ERROR_TRANSLATE_NO_KEY_FOUND -> ERROR_TRANSLATE_NO_KEY_FOUND
    int ERROR_TRANSLATE_SERVICE_NOT_AVAILABLE -> ERROR_TRANSLATE_SERVICE_NOT_AVAILABLE
    int ERROR_TRANSLATE_JSON_RESPONSE -> ERROR_TRANSLATE_JSON_RESPONSE
    int ERROR_ILLEGAL_HOUR -> ERROR_ILLEGAL_HOUR
    int ERROR_ILLEGAL_MINUTE -> ERROR_ILLEGAL_MINUTE
    int ERROR_ILLEGAL_DATE -> ERROR_ILLEGAL_DATE
    int ERROR_WEBVIEW_SSL_ERROR -> ERROR_WEBVIEW_SSL_ERROR
    int FUSION_TABLES_QUERY_ERROR -> FUSION_TABLES_QUERY_ERROR
    int ERROR_TTS_NOT_READY -> ERROR_TTS_NOT_READY
    int ERROR_BAD_PERCENT -> ERROR_BAD_PERCENT
    int ERROR_IMAGE_CANNOT_ROTATE -> ERROR_IMAGE_CANNOT_ROTATE
    int ERROR_EV3_BLUETOOTH_NOT_SET -> ERROR_EV3_BLUETOOTH_NOT_SET
    int ERROR_EV3_NOT_CONNECTED_TO_ROBOT -> ERROR_EV3_NOT_CONNECTED_TO_ROBOT
    int ERROR_EV3_INVALID_REPLY -> ERROR_EV3_INVALID_REPLY
    int ERROR_EV3_ILLEGAL_ARGUMENT -> ERROR_EV3_ILLEGAL_ARGUMENT
    int ERROR_EV3_ILLEGAL_MOTOR_PORT -> ERROR_EV3_ILLEGAL_MOTOR_PORT
    int ERROR_EV3_ILLEGAL_SENSOR_PORT -> ERROR_EV3_ILLEGAL_SENSOR_PORT
    int ERROR_DIVISION_BY_ZERO -> ERROR_DIVISION_BY_ZERO
    int ERROR_INDEX_MISSING_IN_LIST -> ERROR_INDEX_MISSING_IN_LIST
    int ERROR_NUMBER_FORMAT_EXCEPTION -> ERROR_NUMBER_FORMAT_EXCEPTION
    int ERROR_INVALID_VALUE_IN_PATH -> ERROR_INVALID_VALUE_IN_PATH
    int ERROR_EXTENSION_ERROR -> ERROR_EXTENSION_ERROR
    int ERROR_LINESTRING_TOO_FEW_POINTS -> ERROR_LINESTRING_TOO_FEW_POINTS
    int ERROR_LINESTRING_PARSE_ERROR -> ERROR_LINESTRING_PARSE_ERROR
    int ERROR_LINESTRING_TOO_FEW_FIELDS -> ERROR_LINESTRING_TOO_FEW_FIELDS
    int ERROR_POLYGON_PARSE_ERROR -> ERROR_POLYGON_PARSE_ERROR
    int ERROR_INVALID_POINT -> ERROR_INVALID_POINT
    int ERROR_INVALID_POINT_AT_INDEX -> ERROR_INVALID_POINT_AT_INDEX
    int ERROR_INVALID_TYPE_AT_INDEX -> ERROR_INVALID_TYPE_AT_INDEX
    int ERROR_INVALID_NUMBER_OF_VALUES_IN_POINT_AT_INDEX -> ERROR_INVALID_NUMBER_OF_VALUES_IN_POINT_AT_INDEX
    int ERROR_INVALID_NUMBER_OF_VALUES_IN_POINT -> ERROR_INVALID_NUMBER_OF_VALUES_IN_POINT
    int ERROR_INVALID_TYPE -> ERROR_INVALID_TYPE
    int ERROR_INVALID_GEOJSON -> ERROR_INVALID_GEOJSON
    int ERROR_EXCEPTION_DURING_MAP_SAVE -> ERROR_EXCEPTION_DURING_MAP_SAVE
    int ERROR_INVALID_LATITUDE -> ERROR_INVALID_LATITUDE
    int ERROR_INVALID_LONGITUDE -> ERROR_INVALID_LONGITUDE
    int ERROR_UNABLE_TO_CREATE_TILE_CACHE -> ERROR_UNABLE_TO_CREATE_TILE_CACHE
    int ERROR_INVALID_ANCHOR_VERTICAL -> ERROR_INVALID_ANCHOR_VERTICAL
    int ERROR_INVALID_ANCHOR_HORIZONTAL -> ERROR_INVALID_ANCHOR_HORIZONTAL
    int ERROR_INVALID_LATITUDE_IN_POINT_AT_INDEX -> ERROR_INVALID_LATITUDE_IN_POINT_AT_INDEX
    int ERROR_INVALID_LONGITUDE_IN_POINT_AT_INDEX -> ERROR_INVALID_LONGITUDE_IN_POINT_AT_INDEX
    int ERROR_EXPECTED_ARRAY_AT_INDEX -> ERROR_EXPECTED_ARRAY_AT_INDEX
    int ERROR_INVALID_UNIT_SYSTEM -> ERROR_INVALID_UNIT_SYSTEM
    int ERROR_NO_CALL_PERMISSION -> ERROR_NO_CALL_PERMISSION
    int ERROR_UNABLE_TO_INSTALL_PACKAGE -> ERROR_UNABLE_TO_INSTALL_PACKAGE
    int ERROR_INVALID_CONFIGURATION_VALUE -> ERROR_INVALID_CONFIGURATION_VALUE
    int ERROR_AUDIO -> ERROR_AUDIO
    int ERROR_CLIENT -> ERROR_CLIENT
    int ERROR_INSUFFICIENT_PERMISSIONS -> ERROR_INSUFFICIENT_PERMISSIONS
    int ERROR_NETWORK -> ERROR_NETWORK
    int ERROR_NETWORK_TIMEOUT -> ERROR_NETWORK_TIMEOUT
    int ERROR_NO_MATCH -> ERROR_NO_MATCH
    int ERROR_RECOGNIZER_BUSY -> ERROR_RECOGNIZER_BUSY
    int ERROR_SERVER -> ERROR_SERVER
    int ERROR_SPEECH_TIMEOUT -> ERROR_SPEECH_TIMEOUT
    int ERROR_SERIAL_NOT_INITIALIZED -> ERROR_SERIAL_NOT_INITIALIZED
    int ERROR_SERIAL_WRITING -> ERROR_SERIAL_WRITING
    int ERROR_INVALID_API_KEY -> ERROR_INVALID_API_KEY
    int ERROR_UNABLE_TO_REQUEST_DIRECTIONS -> ERROR_UNABLE_TO_REQUEST_DIRECTIONS
    int ERROR_ROUTING_SERVICE_ERROR -> ERROR_ROUTING_SERVICE_ERROR
    int ERROR_NO_ROUTE_FOUND -> ERROR_NO_ROUTE_FOUND
    java.util.Map errorMessages -> l
    void <init>() -> <init>
    java.lang.String formatMessage(int,java.lang.Object[]) -> formatMessage
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.Ev3BinaryParser -> com.google.appinventor.components.runtime.util.Ev3BinaryParser:
    byte PRIMPAR_SHORT -> b
    byte PRIMPAR_LONG -> c
    byte PRIMPAR_CONST -> d
    byte PRIMPAR_VARIABEL -> e
    byte PRIMPAR_LOCAL -> f
    byte PRIMPAR_GLOBAL -> g
    byte PRIMPAR_HANDLE -> h
    byte PRIMPAR_ADDR -> i
    byte PRIMPAR_INDEX -> j
    byte PRIMPAR_CONST_SIGN -> k
    byte PRIMPAR_VALUE -> l
    byte PRIMPAR_BYTES -> m
    byte PRIMPAR_STRING_OLD -> n
    byte PRIMPAR_1_BYTE -> o
    byte PRIMPAR_2_BYTES -> p
    byte PRIMPAR_4_BYTES -> q
    byte PRIMPAR_STRING -> r
    void <init>() -> <init>
    byte[] pack(java.lang.String,java.lang.Object[]) -> pack
    java.lang.Object[] unpack(java.lang.String,byte[]) -> unpack
    byte[] encodeLC0(byte) -> encodeLC0
    byte[] encodeLC1(byte) -> encodeLC1
    byte[] encodeLC2(short) -> encodeLC2
    byte[] encodeLC4(int) -> encodeLC4
    byte[] encodeLV0(int) -> encodeLV0
    byte[] encodeLV1(int) -> encodeLV1
    byte[] encodeLV2(int) -> encodeLV2
    byte[] encodeLV4(int) -> encodeLV4
    byte[] encodeGV0(int) -> encodeGV0
    byte[] encodeGV1(int) -> encodeGV1
    byte[] encodeGV2(int) -> encodeGV2
    byte[] encodeGV4(int) -> encodeGV4
    byte[] encodeSystemCommand(byte,boolean,java.lang.Object[]) -> encodeSystemCommand
    byte[] encodeDirectCommand(byte,boolean,int,int,java.lang.String,java.lang.Object[]) -> encodeDirectCommand
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.Ev3BinaryParser$FormatLiteral -> com.google.appinventor.components.runtime.util.m:
    char symbol -> a
    int size -> bX
    void <init>(char,int) -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants -> com.google.appinventor.components.runtime.util.Ev3Constants:
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$DataFormat -> com.google.appinventor.components.runtime.util.Ev3Constants$DataFormat:
    byte DATA_PCT -> DATA_PCT
    byte DATA_RAW -> DATA_RAW
    byte DATA_SI -> DATA_SI
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$DirectCommandType -> com.google.appinventor.components.runtime.util.Ev3Constants$DirectCommandType:
    byte DIRECT_COMMAND_REPLY -> DIRECT_COMMAND_REPLY
    byte DIRECT_COMMAND_NO_REPLY -> DIRECT_COMMAND_NO_REPLY
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$DirectReplyType -> com.google.appinventor.components.runtime.util.Ev3Constants$DirectReplyType:
    byte DIRECT_REPLY -> DIRECT_REPLY
    byte DIRECT_REPLY_ERROR -> DIRECT_REPLY_ERROR
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$FontType -> com.google.appinventor.components.runtime.util.Ev3Constants$FontType:
    byte NORMAL_FONT -> NORMAL_FONT
    byte SMALL_FONT -> SMALL_FONT
    byte LARGE_FONT -> LARGE_FONT
    byte TINY_FONT -> TINY_FONT
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$InputDeviceSubcode -> com.google.appinventor.components.runtime.util.Ev3Constants$InputDeviceSubcode:
    byte GET_FORMAT -> GET_FORMAT
    byte CAL_MINMAX -> CAL_MINMAX
    byte CAL_DEFAULT -> CAL_DEFAULT
    byte GET_TYPEMODE -> GET_TYPEMODE
    byte GET_SYMBOL -> GET_SYMBOL
    byte CAL_MIN -> CAL_MIN
    byte CAL_MAX -> CAL_MAX
    byte SETUP -> SETUP
    byte CLR_ALL -> CLR_ALL
    byte GET_RAW -> GET_RAW
    byte GET_CONNECTION -> GET_CONNECTION
    byte STOP_ALL -> STOP_ALL
    byte GET_NAME -> GET_NAME
    byte GET_MODENAME -> GET_MODENAME
    byte SET_RAW -> SET_RAW
    byte GET_FIGURES -> GET_FIGURES
    byte GET_CHANGES -> GET_CHANGES
    byte CLR_CHANGES -> CLR_CHANGES
    byte READY_PCT -> READY_PCT
    byte READY_RAW -> READY_RAW
    byte READY_SI -> READY_SI
    byte GET_MINMAX -> GET_MINMAX
    byte GET_BUMPS -> GET_BUMPS
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$Opcode -> com.google.appinventor.components.runtime.util.Ev3Constants$Opcode:
    byte ERROR -> ERROR
    byte NOP -> NOP
    byte PROGRAM_STOP -> PROGRAM_STOP
    byte PROGRAM_START -> PROGRAM_START
    byte OBJECT_STOP -> OBJECT_STOP
    byte OBJECT_START -> OBJECT_START
    byte OBJECT_TRIG -> OBJECT_TRIG
    byte OBJECT_WAIT -> OBJECT_WAIT
    byte RETURN -> RETURN
    byte CALL -> CALL
    byte OBJECT_END -> OBJECT_END
    byte SLEEP -> SLEEP
    byte PROGRAM_INFO -> PROGRAM_INFO
    byte LABEL -> LABEL
    byte PROBE -> PROBE
    byte DO -> DO
    byte ADD8 -> ADD8
    byte ADD16 -> ADD16
    byte ADD32 -> ADD32
    byte ADDF -> ADDF
    byte SUB8 -> SUB8
    byte SUB16 -> SUB16
    byte SUB32 -> SUB32
    byte SUBF -> SUBF
    byte MUL8 -> MUL8
    byte MUL16 -> MUL16
    byte MUL32 -> MUL32
    byte MULF -> MULF
    byte DIV8 -> DIV8
    byte DIV16 -> DIV16
    byte DIV32 -> DIV32
    byte DIVF -> DIVF
    byte OR8 -> OR8
    byte OR16 -> OR16
    byte OR32 -> OR32
    byte AND8 -> AND8
    byte AND16 -> AND16
    byte AND32 -> AND32
    byte XOR8 -> XOR8
    byte XOR16 -> XOR16
    byte XOR32 -> XOR32
    byte RL8 -> RL8
    byte RL16 -> RL16
    byte RL32 -> RL32
    byte INIT_BYTES -> INIT_BYTES
    byte MOVE8_8 -> MOVE8_8
    byte MOVE8_16 -> MOVE8_16
    byte MOVE8_32 -> MOVE8_32
    byte MOVE8_F -> MOVE8_F
    byte MOVE16_8 -> MOVE16_8
    byte MOVE16_16 -> MOVE16_16
    byte MOVE16_32 -> MOVE16_32
    byte MOVE16_F -> MOVE16_F
    byte MOVE32_8 -> MOVE32_8
    byte MOVE32_16 -> MOVE32_16
    byte MOVE32_32 -> MOVE32_32
    byte MOVE32_F -> MOVE32_F
    byte MOVEF_8 -> MOVEF_8
    byte MOVEF_16 -> MOVEF_16
    byte MOVEF_32 -> MOVEF_32
    byte MOVEF_F -> MOVEF_F
    byte JR -> JR
    byte JR_FALSE -> JR_FALSE
    byte JR_TRUE -> JR_TRUE
    byte JR_NAN -> JR_NAN
    byte CP_LT8 -> CP_LT8
    byte CP_LT16 -> CP_LT16
    byte CP_LT32 -> CP_LT32
    byte CP_LTF -> CP_LTF
    byte CP_GT8 -> CP_GT8
    byte CP_GT16 -> CP_GT16
    byte CP_GT32 -> CP_GT32
    byte CP_GTF -> CP_GTF
    byte CP_EQ8 -> CP_EQ8
    byte CP_EQ16 -> CP_EQ16
    byte CP_EQ32 -> CP_EQ32
    byte CP_EQF -> CP_EQF
    byte CP_NEQ8 -> CP_NEQ8
    byte CP_NEQ16 -> CP_NEQ16
    byte CP_NEQ32 -> CP_NEQ32
    byte CP_NEQF -> CP_NEQF
    byte CP_LTEQ8 -> CP_LTEQ8
    byte CP_LTEQ16 -> CP_LTEQ16
    byte CP_LTEQ32 -> CP_LTEQ32
    byte CP_LTEQF -> CP_LTEQF
    byte CP_GTEQ8 -> CP_GTEQ8
    byte CP_GTEQ16 -> CP_GTEQ16
    byte CP_GTEQ32 -> CP_GTEQ32
    byte CP_GTEQF -> CP_GTEQF
    byte SELECT8 -> SELECT8
    byte SELECT16 -> SELECT16
    byte SELECT32 -> SELECT32
    byte SELECTF -> SELECTF
    byte SYSTEM -> SYSTEM
    byte PORT_CNV_OUTPUT -> PORT_CNV_OUTPUT
    byte PORT_CNV_INPUT -> PORT_CNV_INPUT
    byte NOTE_TO_FREQ -> NOTE_TO_FREQ
    byte JR_LT8 -> JR_LT8
    byte JR_LT16 -> JR_LT16
    byte JR_LT32 -> JR_LT32
    byte JR_LTF -> JR_LTF
    byte JR_GT8 -> JR_GT8
    byte JR_GT16 -> JR_GT16
    byte JR_GT32 -> JR_GT32
    byte JR_GTF -> JR_GTF
    byte JR_EQ8 -> JR_EQ8
    byte JR_EQ16 -> JR_EQ16
    byte JR_EQ32 -> JR_EQ32
    byte JR_EQF -> JR_EQF
    byte JR_NEQ8 -> JR_NEQ8
    byte JR_NEQ16 -> JR_NEQ16
    byte JR_NEQ32 -> JR_NEQ32
    byte JR_NEQF -> JR_NEQF
    byte JR_LTEQ8 -> JR_LTEQ8
    byte JR_LTEQ16 -> JR_LTEQ16
    byte JR_LTEQ32 -> JR_LTEQ32
    byte JR_LTEQF -> JR_LTEQF
    byte JR_GTEQ8 -> JR_GTEQ8
    byte JR_GTEQ16 -> JR_GTEQ16
    byte JR_GTEQ32 -> JR_GTEQ32
    byte JR_GTEQF -> JR_GTEQF
    byte INFO -> INFO
    byte STRINGS -> STRINGS
    byte MEMORY_WRITE -> MEMORY_WRITE
    byte MEMORY_READ -> MEMORY_READ
    byte UI_FLUSH -> UI_FLUSH
    byte UI_READ -> UI_READ
    byte UI_WRITE -> UI_WRITE
    byte UI_BUTTON -> UI_BUTTON
    byte UI_DRAW -> UI_DRAW
    byte TIMER_WAIT -> TIMER_WAIT
    byte TIMER_READY -> TIMER_READY
    byte TIMER_READ -> TIMER_READ
    byte BP0 -> BP0
    byte BP1 -> BP1
    byte BP2 -> BP2
    byte BP3 -> BP3
    byte BP_SET -> BP_SET
    byte MATH -> MATH
    byte RANDOM -> RANDOM
    byte TIMER_READ_US -> TIMER_READ_US
    byte KEEP_ALIVE -> KEEP_ALIVE
    byte COM_READ -> COM_READ
    byte COM_WRITE -> COM_WRITE
    byte SOUND -> SOUND
    byte SOUND_TEST -> SOUND_TEST
    byte SOUND_READY -> SOUND_READY
    byte INPUT_SAMPLE -> INPUT_SAMPLE
    byte INPUT_DEVICE_LIST -> INPUT_DEVICE_LIST
    byte INPUT_DEVICE -> INPUT_DEVICE
    byte INPUT_READ -> INPUT_READ
    byte INPUT_TEST -> INPUT_TEST
    byte INPUT_READY -> INPUT_READY
    byte INPUT_READSI -> INPUT_READSI
    byte INPUT_READEXT -> INPUT_READEXT
    byte INPUT_WRITE -> INPUT_WRITE
    byte OUTPUT_GET_TYPE -> OUTPUT_GET_TYPE
    byte OUTPUT_SET_TYPE -> OUTPUT_SET_TYPE
    byte OUTPUT_RESET -> OUTPUT_RESET
    byte OUTPUT_STOP -> OUTPUT_STOP
    byte OUTPUT_POWER -> OUTPUT_POWER
    byte OUTPUT_SPEED -> OUTPUT_SPEED
    byte OUTPUT_START -> OUTPUT_START
    byte OUTPUT_POLARITY -> OUTPUT_POLARITY
    byte OUTPUT_READ -> OUTPUT_READ
    byte OUTPUT_TEST -> OUTPUT_TEST
    byte OUTPUT_READY -> OUTPUT_READY
    byte OUTPUT_POSITION -> OUTPUT_POSITION
    byte OUTPUT_STEP_POWER -> OUTPUT_STEP_POWER
    byte OUTPUT_TIME_POWER -> OUTPUT_TIME_POWER
    byte OUTPUT_STEP_SPEED -> OUTPUT_STEP_SPEED
    byte OUTPUT_TIME_SPEED -> OUTPUT_TIME_SPEED
    byte OUTPUT_STEP_SYNC -> OUTPUT_STEP_SYNC
    byte OUTPUT_TIME_SYNC -> OUTPUT_TIME_SYNC
    byte OUTPUT_CLR_COUNT -> OUTPUT_CLR_COUNT
    byte OUTPUT_GET_COUNT -> OUTPUT_GET_COUNT
    byte OUTPUT_PRG_STOP -> OUTPUT_PRG_STOP
    byte FILE -> FILE
    byte ARRAY -> ARRAY
    byte ARRAY_WRITE -> ARRAY_WRITE
    byte ARRAY_READ -> ARRAY_READ
    byte ARRAY_APPEND -> ARRAY_APPEND
    byte MEMORY_USAGE -> MEMORY_USAGE
    byte FILENAME -> FILENAME
    byte READ8 -> READ8
    byte READ16 -> READ16
    byte READ32 -> READ32
    byte READF -> READF
    byte WRITE8 -> WRITE8
    byte WRITE16 -> WRITE16
    byte WRITE32 -> WRITE32
    byte WRITEF -> WRITEF
    byte COM_READY -> COM_READY
    byte COM_READDATA -> COM_READDATA
    byte COM_WRITEDATA -> COM_WRITEDATA
    byte COM_GET -> COM_GET
    byte COM_SET -> COM_SET
    byte COM_TEST -> COM_TEST
    byte COM_REMOVE -> COM_REMOVE
    byte COM_WRITEFILE -> COM_WRITEFILE
    byte MAILBOX_OPEN -> MAILBOX_OPEN
    byte MAILBOX_WRITE -> MAILBOX_WRITE
    byte MAILBOX_READ -> MAILBOX_READ
    byte MAILBOX_TEST -> MAILBOX_TEST
    byte MAILBOX_READY -> MAILBOX_READY
    byte MAILBOX_CLOSE -> MAILBOX_CLOSE
    byte TST -> TST
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$SoundSubcode -> com.google.appinventor.components.runtime.util.Ev3Constants$SoundSubcode:
    byte BREAK -> BREAK
    byte TONE -> TONE
    byte PLAY -> PLAY
    byte REPEAT -> REPEAT
    byte SERVICE -> SERVICE
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$SystemCommand -> com.google.appinventor.components.runtime.util.Ev3Constants$SystemCommand:
    byte BEGIN_DOWNLOAD -> BEGIN_DOWNLOAD
    byte CONTINUE_DOWNLOAD -> CONTINUE_DOWNLOAD
    byte BEGIN_UPLOAD -> BEGIN_UPLOAD
    byte CONTINUE_UPLOAD -> CONTINUE_UPLOAD
    byte BEGIN_GETFILE -> BEGIN_GETFILE
    byte CONTINUE_GETFILE -> CONTINUE_GETFILE
    byte CLOSE_FILEHANDLE -> CLOSE_FILEHANDLE
    byte LIST_FILES -> LIST_FILES
    byte CONTINUE_LIST_FILES -> CONTINUE_LIST_FILES
    byte CREATE_DIR -> CREATE_DIR
    byte DELETE_FILE -> DELETE_FILE
    byte LIST_OPEN_HANDLES -> LIST_OPEN_HANDLES
    byte WRITEMAILBOX -> WRITEMAILBOX
    byte BLUETOOTHPIN -> BLUETOOTHPIN
    byte ENTERFWUPDATE -> ENTERFWUPDATE
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$SystemCommandType -> com.google.appinventor.components.runtime.util.Ev3Constants$SystemCommandType:
    byte SYSTEM_COMMAND_REPLY -> SYSTEM_COMMAND_REPLY
    byte SYSTEM_COMMAND_NO_REPLY -> SYSTEM_COMMAND_NO_REPLY
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$SystemReplyStatus -> com.google.appinventor.components.runtime.util.Ev3Constants$SystemReplyStatus:
    byte SUCCESS -> SUCCESS
    byte UNKNOWN_HANDLE -> UNKNOWN_HANDLE
    byte HANDLE_NOT_READY -> HANDLE_NOT_READY
    byte CORRUPT_FILE -> CORRUPT_FILE
    byte NO_HANDLES_AVAILABLE -> NO_HANDLES_AVAILABLE
    byte NO_PERMISSION -> NO_PERMISSION
    byte ILLEGAL_PATH -> ILLEGAL_PATH
    byte FILE_EXITS -> FILE_EXITS
    byte END_OF_FILE -> END_OF_FILE
    byte SIZE_ERROR -> SIZE_ERROR
    byte UNKNOWN_ERROR -> UNKNOWN_ERROR
    byte ILLEGAL_FILENAME -> ILLEGAL_FILENAME
    byte ILLEGAL_CONNECTION -> ILLEGAL_CONNECTION
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$SystemReplyType -> com.google.appinventor.components.runtime.util.Ev3Constants$SystemReplyType:
    byte SYSTEM_REPLY -> SYSTEM_REPLY
    byte SYSTEM_REPLY_ERROR -> SYSTEM_REPLY_ERROR
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$UIButtonSubcode -> com.google.appinventor.components.runtime.util.Ev3Constants$UIButtonSubcode:
    byte SHORTPRESS -> SHORTPRESS
    byte LONGPRESS -> LONGPRESS
    byte WAIT_FOR_PRESS -> WAIT_FOR_PRESS
    byte FLUSH -> FLUSH
    byte PRESS -> PRESS
    byte RELEASE -> RELEASE
    byte GET_HORZ -> GET_HORZ
    byte GET_VERT -> GET_VERT
    byte PRESSED -> PRESSED
    byte SET_BACK_BLOCK -> SET_BACK_BLOCK
    byte GET_BACK_BLOCK -> GET_BACK_BLOCK
    byte TESTSHORTPRESS -> TESTSHORTPRESS
    byte TESTLONGPRESS -> TESTLONGPRESS
    byte GET_BUMBED -> GET_BUMBED
    byte GET_CLICK -> GET_CLICK
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$UIDrawSubcode -> com.google.appinventor.components.runtime.util.Ev3Constants$UIDrawSubcode:
    byte UPDATE -> UPDATE
    byte CLEAN -> CLEAN
    byte PIXEL -> PIXEL
    byte LINE -> LINE
    byte CIRCLE -> CIRCLE
    byte TEXT -> TEXT
    byte ICON -> ICON
    byte PICTURE -> PICTURE
    byte VALUE -> VALUE
    byte FILLRECT -> FILLRECT
    byte RECT -> RECT
    byte NOTIFICATION -> NOTIFICATION
    byte QUESTION -> QUESTION
    byte KEYBOARD -> KEYBOARD
    byte BROWSE -> BROWSE
    byte VERTBAR -> VERTBAR
    byte INVERSERECT -> INVERSERECT
    byte SELECT_FONT -> SELECT_FONT
    byte TOPLINE -> TOPLINE
    byte FILLWINDOW -> FILLWINDOW
    byte SCROLL -> SCROLL
    byte DOTLINE -> DOTLINE
    byte VIEW_VALUE -> VIEW_VALUE
    byte VIEW_UNIT -> VIEW_UNIT
    byte FILLCIRCLE -> FILLCIRCLE
    byte STORE -> STORE
    byte RESTORE -> RESTORE
    byte ICON_QUESTION -> ICON_QUESTION
    byte BMPFILE -> BMPFILE
    byte POPUP -> POPUP
    byte GRAPH_SETUP -> GRAPH_SETUP
    byte GRAPH_DRAW -> GRAPH_DRAW
    byte TEXTBOX -> TEXTBOX
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$UIReadSubcode -> com.google.appinventor.components.runtime.util.Ev3Constants$UIReadSubcode:
    byte GET_VBATT -> GET_VBATT
    byte GET_IBATT -> GET_IBATT
    byte GET_OS_VERS -> GET_OS_VERS
    byte GET_EVENT -> GET_EVENT
    byte GET_TBATT -> GET_TBATT
    byte GET_IINT -> GET_IINT
    byte GET_IMOTOR -> GET_IMOTOR
    byte GET_STRING -> GET_STRING
    byte GET_HW_VERS -> GET_HW_VERS
    byte GET_FW_VERS -> GET_FW_VERS
    byte GET_FW_BUILD -> GET_FW_BUILD
    byte GET_OS_BUILD -> GET_OS_BUILD
    byte GET_ADDRESS -> GET_ADDRESS
    byte GET_CODE -> GET_CODE
    byte KEY -> KEY
    byte GET_SHUTDOWN -> GET_SHUTDOWN
    byte GET_WARNING -> GET_WARNING
    byte GET_LBATT -> GET_LBATT
    byte TEXTBOX_READ -> TEXTBOX_READ
    byte GET_VERSION -> GET_VERSION
    byte GET_IP -> GET_IP
    byte GET_POWER -> GET_POWER
    byte GET_SDCARD -> GET_SDCARD
    byte GET_USBSTICK -> GET_USBSTICK
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.Ev3Constants$UIWriteSubcode -> com.google.appinventor.components.runtime.util.Ev3Constants$UIWriteSubcode:
    byte WRITE_FLUSH -> WRITE_FLUSH
    byte FLOATVALUE -> FLOATVALUE
    byte STAMP -> STAMP
    byte PUT_STRING -> PUT_STRING
    byte VALUE8 -> VALUE8
    byte VALUE16 -> VALUE16
    byte VALUE32 -> VALUE32
    byte VALUEF -> VALUEF
    byte ADDRESS -> ADDRESS
    byte CODE -> CODE
    byte DOWNLOAD_END -> DOWNLOAD_END
    byte SCREEN_BLOCK -> SCREEN_BLOCK
    byte TEXTBOX_APPEND -> TEXTBOX_APPEND
    byte SET_BUSY -> SET_BUSY
    byte SET_TESTPIN -> SET_TESTPIN
    byte INIT_RUN -> INIT_RUN
    byte UPDATE_RUN -> UPDATE_RUN
    byte LED -> LED
    byte POWER -> POWER
    byte GRAPH_SAMPLE -> GRAPH_SAMPLE
    byte TERMINAL -> TERMINAL
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.ExternalTextToSpeech -> com.google.appinventor.components.runtime.util.ExternalTextToSpeech:
    int requestCode -> requestCode
    com.google.appinventor.components.runtime.ComponentContainer container -> g
    com.google.appinventor.components.runtime.util.ITextToSpeech$TextToSpeechCallback callback -> a
    void <init>(com.google.appinventor.components.runtime.ComponentContainer,com.google.appinventor.components.runtime.util.ITextToSpeech$TextToSpeechCallback) -> <init>
    void speak(java.lang.String,java.util.Locale) -> speak
    void onDestroy() -> onDestroy
    void onStop() -> onStop
    void onResume() -> onResume
    void setPitch(float) -> setPitch
    void setSpeechRate(float) -> setSpeechRate
    void resultReturned(int,int,android.content.Intent) -> resultReturned
    int isLanguageAvailable(java.util.Locale) -> isLanguageAvailable
    boolean isInitialized() -> isInitialized
com.google.appinventor.components.runtime.util.FileUtil -> com.google.appinventor.components.runtime.util.FileUtil:
    java.lang.String LOG_TAG -> cW
    void <init>() -> <init>
    java.lang.String getFileUrl(java.lang.String) -> getFileUrl
    byte[] readFile(java.lang.String) -> readFile
    byte[] readFile(com.google.appinventor.components.runtime.Form,java.lang.String) -> readFile
    java.io.FileInputStream openFile(java.lang.String) -> openFile
    java.io.FileInputStream openFile(com.google.appinventor.components.runtime.Form,java.lang.String) -> openFile
    java.io.FileInputStream openFile(java.io.File) -> openFile
    java.io.FileInputStream openFile(com.google.appinventor.components.runtime.Form,java.io.File) -> openFile
    java.io.FileInputStream openFile(java.net.URI) -> openFile
    java.io.FileInputStream openFile(com.google.appinventor.components.runtime.Form,java.net.URI) -> openFile
    java.lang.String downloadUrlToFile(java.lang.String,java.lang.String) -> downloadUrlToFile
    java.lang.String writeFile(byte[],java.lang.String) -> writeFile
    java.lang.String copyFile(java.lang.String,java.lang.String) -> copyFile
    java.lang.String writeStreamToFile(java.io.InputStream,java.lang.String) -> writeStreamToFile
    void copy(java.io.InputStream,java.io.OutputStream) -> a
    java.io.File getPictureFile(java.lang.String) -> getPictureFile
    java.io.File getPictureFile(com.google.appinventor.components.runtime.Form,java.lang.String) -> getPictureFile
    java.io.File getRecordingFile(java.lang.String) -> getRecordingFile
    java.io.File getRecordingFile(com.google.appinventor.components.runtime.Form,java.lang.String) -> getRecordingFile
    java.io.File getDownloadFile(java.lang.String) -> getDownloadFile
    java.io.File getDownloadFile(com.google.appinventor.components.runtime.Form,java.lang.String) -> getDownloadFile
    java.io.File getFile(com.google.appinventor.components.runtime.Form,java.lang.String,java.lang.String) -> a
    java.io.File getExternalFile(java.lang.String) -> getExternalFile
    java.io.File getExternalFile(com.google.appinventor.components.runtime.Form,java.lang.String) -> getExternalFile
    void checkExternalStorageWriteable() -> checkExternalStorageWriteable
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.FileUtil$FileException -> com.google.appinventor.components.runtime.util.FileUtil$FileException:
    int msgNumber -> bY
    void <init>(int) -> <init>
    int getErrorMessageNumber() -> getErrorMessageNumber
com.google.appinventor.components.runtime.util.FroyoUtil -> com.google.appinventor.components.runtime.util.FroyoUtil:
    void <init>() -> <init>
    int getRotation(android.view.Display) -> getRotation
    android.media.AudioManager setAudioManager(android.app.Activity) -> setAudioManager
    java.lang.Object setAudioFocusChangeListener(com.google.appinventor.components.runtime.Player) -> setAudioFocusChangeListener
    boolean focusRequestGranted(android.media.AudioManager,java.lang.Object) -> focusRequestGranted
    void abandonFocus(android.media.AudioManager,java.lang.Object) -> abandonFocus
    android.webkit.WebViewClient getWebViewClient(boolean,boolean,com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.Component) -> getWebViewClient
com.google.appinventor.components.runtime.util.FroyoUtil$1 -> com.google.appinventor.components.runtime.util.n:
    boolean playbackFlag -> bH
    com.google.appinventor.components.runtime.Player val$player -> b
    void <init>(com.google.appinventor.components.runtime.Player) -> <init>
    void onAudioFocusChange(int) -> onAudioFocusChange
com.google.appinventor.components.runtime.util.FroyoWebViewClient -> com.google.appinventor.components.runtime.util.FroyoWebViewClient:
    boolean followLinks -> bI
    boolean ignoreErrors -> bJ
    com.google.appinventor.components.runtime.Form form -> w
    com.google.appinventor.components.runtime.Component component -> g
    void <init>(boolean,boolean,com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.Component) -> <init>
    com.google.appinventor.components.runtime.Component getComponent() -> getComponent
    com.google.appinventor.components.runtime.Form getForm() -> getForm
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    com.google.appinventor.components.runtime.Component access$000(com.google.appinventor.components.runtime.util.FroyoWebViewClient) -> a
com.google.appinventor.components.runtime.util.FroyoWebViewClient$1 -> com.google.appinventor.components.runtime.util.o:
    int val$errorCode -> bZ
    java.lang.String val$description -> cX
    java.lang.String val$failingUrl -> cY
    com.google.appinventor.components.runtime.util.FroyoWebViewClient this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.FroyoWebViewClient,int,java.lang.String,java.lang.String) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.FullScreenVideoUtil -> com.google.appinventor.components.runtime.util.FullScreenVideoUtil:
    int FULLSCREEN_VIDEO_DIALOG_FLAG -> FULLSCREEN_VIDEO_DIALOG_FLAG
    int FULLSCREEN_VIDEO_ACTION_SEEK -> FULLSCREEN_VIDEO_ACTION_SEEK
    int FULLSCREEN_VIDEO_ACTION_PLAY -> FULLSCREEN_VIDEO_ACTION_PLAY
    int FULLSCREEN_VIDEO_ACTION_PAUSE -> FULLSCREEN_VIDEO_ACTION_PAUSE
    int FULLSCREEN_VIDEO_ACTION_STOP -> FULLSCREEN_VIDEO_ACTION_STOP
    int FULLSCREEN_VIDEO_ACTION_SOURCE -> FULLSCREEN_VIDEO_ACTION_SOURCE
    int FULLSCREEN_VIDEO_ACTION_FULLSCREEN -> FULLSCREEN_VIDEO_ACTION_FULLSCREEN
    int FULLSCREEN_VIDEO_ACTION_DURATION -> FULLSCREEN_VIDEO_ACTION_DURATION
    java.lang.String VIDEOPLAYER_FULLSCREEN -> VIDEOPLAYER_FULLSCREEN
    java.lang.String VIDEOPLAYER_PLAYING -> VIDEOPLAYER_PLAYING
    java.lang.String VIDEOPLAYER_POSITION -> VIDEOPLAYER_POSITION
    java.lang.String VIDEOPLAYER_SOURCE -> VIDEOPLAYER_SOURCE
    java.lang.String ACTION_SUCESS -> ACTION_SUCESS
    java.lang.String ACTION_DATA -> ACTION_DATA
    android.app.Dialog mFullScreenVideoDialog -> a
    android.widget.FrameLayout mFullScreenVideoHolder -> c
    android.widget.VideoView mFullScreenVideoView -> a
    com.google.appinventor.components.runtime.util.CustomMediaController mFullScreenVideoController -> a
    android.widget.FrameLayout$LayoutParams mMediaControllerParams -> a
    com.google.appinventor.components.runtime.Form mForm -> x
    com.google.appinventor.components.runtime.VideoPlayer mFullScreenPlayer -> c
    android.os.Bundle mFullScreenVideoBundle -> a
    android.os.Handler mHandler -> n
    void <init>(com.google.appinventor.components.runtime.Form,android.os.Handler) -> <init>
    android.os.Bundle performAction(int,com.google.appinventor.components.runtime.VideoPlayer,java.lang.Object) -> performAction
    android.os.Bundle doFullScreenVideoAction(com.google.appinventor.components.runtime.VideoPlayer,android.os.Bundle) -> a
    android.app.Dialog createFullScreenVideoDialog() -> createFullScreenVideoDialog
    void prepareFullScreenVideoDialog(android.app.Dialog) -> prepareFullScreenVideoDialog
    boolean dialogInitialized() -> dialogInitialized
    boolean showing() -> showing
    boolean setSource(java.lang.String,boolean) -> setSource
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void onPrepared(android.media.MediaPlayer) -> onPrepared
    void startDialog() -> startDialog
    android.widget.VideoView access$000(com.google.appinventor.components.runtime.util.FullScreenVideoUtil) -> a
    android.os.Bundle access$100(com.google.appinventor.components.runtime.util.FullScreenVideoUtil) -> a
    com.google.appinventor.components.runtime.VideoPlayer access$200(com.google.appinventor.components.runtime.util.FullScreenVideoUtil) -> a
com.google.appinventor.components.runtime.util.FullScreenVideoUtil$1 -> com.google.appinventor.components.runtime.util.p:
    com.google.appinventor.components.runtime.util.FullScreenVideoUtil this$0 -> b
    void <init>(com.google.appinventor.components.runtime.util.FullScreenVideoUtil,android.content.Context,int) -> <init>
    void onBackPressed() -> onBackPressed
    void onStart() -> onStart
com.google.appinventor.components.runtime.util.FullScreenVideoUtil$2 -> com.google.appinventor.components.runtime.util.q:
    com.google.appinventor.components.runtime.util.FullScreenVideoUtil this$0 -> c
    void <init>(com.google.appinventor.components.runtime.util.FullScreenVideoUtil) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.google.appinventor.components.runtime.util.FullScreenVideoUtil$3 -> com.google.appinventor.components.runtime.util.r:
    com.google.appinventor.components.runtime.util.FullScreenVideoUtil this$0 -> d
    void <init>(com.google.appinventor.components.runtime.util.FullScreenVideoUtil) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.GameInstance -> com.google.appinventor.components.runtime.util.GameInstance:
    java.lang.String instanceId -> cZ
    java.lang.String leader -> da
    java.util.List players -> r
    java.util.Map messageTimes -> m
    void <init>(java.lang.String) -> <init>
    java.lang.String getInstanceId() -> getInstanceId
    java.lang.String getLeader() -> getLeader
    void setLeader(java.lang.String) -> setLeader
    com.google.appinventor.components.runtime.util.PlayerListDelta setPlayers(java.util.List) -> setPlayers
    java.util.List getPlayers() -> getPlayers
    java.lang.String getMessageTime(java.lang.String) -> getMessageTime
    void putMessageTime(java.lang.String,java.lang.String) -> putMessageTime
com.google.appinventor.components.runtime.util.GeoJSONUtil -> com.google.appinventor.components.runtime.util.GeoJSONUtil:
    java.util.Map colors -> n
    java.util.Map SUPPORTED_PROPERTIES -> o
    void <init>() -> <init>
    int parseColor(java.lang.String) -> c
    int parseColorHex(java.lang.String) -> d
    int charToHex(char) -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature processGeoJSONFeature(java.lang.String,com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.YailList) -> processGeoJSONFeature
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature processGeometry(java.lang.String,com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapFeature processCoordinates(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,java.lang.String,com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapMarker markerFromGeoJSON(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapLineString lineStringFromGeoJSON(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapPolygon polygonFromGeoJSON(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapPolygon multipolygonFromGeoJSON(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer,com.google.appinventor.components.runtime.util.YailList) -> b
    void processProperties(java.lang.String,com.google.appinventor.components.runtime.util.MapFactory$MapFeature,com.google.appinventor.components.runtime.util.YailList) -> a
    boolean parseBooleanOrString(java.lang.Object) -> b
    int parseIntegerOrString(java.lang.Object) -> a
    float parseFloatOrString(java.lang.Object) -> a
    java.util.List getGeoJSONFeatures(java.lang.String,java.lang.String) -> getGeoJSONFeatures
    java.lang.String getGeoJSONType(java.lang.String,java.lang.String) -> getGeoJSONType
    com.google.appinventor.components.runtime.util.YailList jsonObjectToYail(java.lang.String,org.json.JSONObject) -> a
    com.google.appinventor.components.runtime.util.YailList jsonArrayToYail(java.lang.String,org.json.JSONArray) -> a
    java.lang.String stripBOM(java.lang.String) -> h
    void writeFeaturesAsGeoJSON(java.util.List,java.lang.String) -> writeFeaturesAsGeoJSON
    com.google.appinventor.components.runtime.util.YailList swapCoordinates(com.google.appinventor.components.runtime.util.YailList) -> swapCoordinates
    java.util.List swapCoordinates2(java.util.List) -> swapCoordinates2
    gnu.lists.LList swapNestedCoordinates(gnu.lists.LList) -> swapNestedCoordinates
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.GeoJSONUtil$1 -> com.google.appinventor.components.runtime.util.s:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$10 -> com.google.appinventor.components.runtime.util.t:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$11 -> com.google.appinventor.components.runtime.util.u:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$12 -> com.google.appinventor.components.runtime.util.v:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$13 -> com.google.appinventor.components.runtime.util.w:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$14 -> com.google.appinventor.components.runtime.util.x:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$15 -> com.google.appinventor.components.runtime.util.y:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$2 -> com.google.appinventor.components.runtime.util.z:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$3 -> com.google.appinventor.components.runtime.util.A:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$4 -> com.google.appinventor.components.runtime.util.B:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$5 -> com.google.appinventor.components.runtime.util.C:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$6 -> com.google.appinventor.components.runtime.util.D:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$7 -> com.google.appinventor.components.runtime.util.E:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$8 -> com.google.appinventor.components.runtime.util.F:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$9 -> com.google.appinventor.components.runtime.util.G:
    void <init>() -> <init>
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeoJSONUtil$FeatureWriter -> com.google.appinventor.components.runtime.util.H:
    java.io.PrintStream out -> a
    void <init>(java.io.PrintStream) -> <init>
    void writeType(java.lang.String) -> r
    void writeProperty(java.lang.String,java.lang.Object) -> b
    void writeProperty(java.lang.String,java.lang.String) -> c
    void writeColorProperty(java.lang.String,int) -> c
    void writePointGeometry(org.osmdroid.util.GeoPoint) -> a
    void writePropertiesHeader(java.lang.String) -> s
    void writeProperties(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> a
    void writeProperties(com.google.appinventor.components.runtime.util.MapFactory$HasStroke) -> a
    void writeProperties(com.google.appinventor.components.runtime.util.MapFactory$HasFill) -> a
    void writePoints(java.util.List) -> a
    void writeLineGeometry(com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> a
    void writeMultipolygonGeometryNoHoles(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> a
    void writePolygonGeometryNoHoles(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> b
    void writePolygonGeometry(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> c
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> a
    java.lang.Void visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> a
    boolean hasAltitude(org.osmdroid.util.GeoPoint) -> a
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
    void <init>(java.io.PrintStream,com.google.appinventor.components.runtime.util.GeoJSONUtil$1) -> <init>
com.google.appinventor.components.runtime.util.GeoJSONUtil$PropertyApplication -> com.google.appinventor.components.runtime.util.I:
    void apply(com.google.appinventor.components.runtime.util.MapFactory$MapFeature,java.lang.Object) -> a
com.google.appinventor.components.runtime.util.GeometryUtil -> com.google.appinventor.components.runtime.util.GeometryUtil:
    double EARTH_RADIUS -> EARTH_RADIUS
    double ONE_DEG_IN_METERS -> ONE_DEG_IN_METERS
    int WEB_MERCATOR_SRID -> WEB_MERCATOR_SRID
    org.locationtech.jts.geom.GeometryFactory FACTORY -> a
    void <init>() -> <init>
    double coerceToDouble(java.lang.Object) -> coerceToDouble
    org.osmdroid.util.GeoPoint coerceToPoint(java.lang.Object,java.lang.Object) -> coerceToPoint
    com.google.appinventor.components.runtime.util.YailList asYailList(org.osmdroid.api.IGeoPoint) -> asYailList
    com.google.appinventor.components.runtime.util.YailList pointsListToYailList(java.util.List) -> pointsListToYailList
    org.osmdroid.util.GeoPoint pointFromYailList(com.google.appinventor.components.runtime.util.YailList) -> pointFromYailList
    java.util.List pointsFromYailList(com.google.appinventor.components.runtime.util.YailList) -> pointsFromYailList
    org.locationtech.jts.geom.Geometry createGeometry(org.osmdroid.util.GeoPoint) -> createGeometry
    org.locationtech.jts.geom.Geometry createGeometry(java.util.List) -> createGeometry
    org.locationtech.jts.geom.Geometry createGeometry(double,double,double,double) -> createGeometry
    org.locationtech.jts.geom.Geometry createGeometry(java.util.List,java.util.List) -> createGeometry
    org.osmdroid.util.GeoPoint getMidpoint(java.util.List) -> getMidpoint
    org.osmdroid.util.GeoPoint getCentroid(java.util.List,java.util.List) -> getCentroid
    org.locationtech.jts.geom.Polygon ringToPolygon(java.util.List) -> ringToPolygon
    org.locationtech.jts.geom.Coordinate[] pointsToCoordinates(java.util.List) -> pointsToCoordinates
    org.locationtech.jts.geom.LinearRing geoPointsToLinearRing(java.util.List) -> geoPointsToLinearRing
    org.locationtech.jts.geom.Polygon ringToPolygon(java.util.List,java.util.List) -> ringToPolygon
    org.osmdroid.util.GeoPoint jtsPointToGeoPoint(org.locationtech.jts.geom.Point) -> jtsPointToGeoPoint
    org.locationtech.jts.geom.Coordinate geoPointToCoordinate(org.osmdroid.util.GeoPoint) -> geoPointToCoordinate
    double distanceBetween(org.osmdroid.api.IGeoPoint,org.osmdroid.api.IGeoPoint) -> distanceBetween
    double distanceBetween(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,org.osmdroid.util.GeoPoint) -> distanceBetween
    double distanceBetween(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> distanceBetween
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,org.osmdroid.util.GeoPoint) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,org.osmdroid.util.GeoPoint) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,org.osmdroid.util.GeoPoint) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,org.osmdroid.util.GeoPoint) -> distanceBetweenEdges
    double distanceBetweenEdges(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenEdges
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,org.osmdroid.util.GeoPoint) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,org.osmdroid.util.GeoPoint) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,org.osmdroid.util.GeoPoint) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,org.osmdroid.util.GeoPoint) -> distanceBetweenCentroids
    double distanceBetweenCentroids(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> distanceBetweenCentroids
    double bearingTo(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> bearingTo
    double bearingToEdge(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> bearingToEdge
    double bearingToEdge(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> bearingToEdge
    double bearingToEdge(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> bearingToEdge
    double bearingToEdge(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> bearingToEdge
    double bearingToCentroid(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> bearingToCentroid
    double bearingToCentroid(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> bearingToCentroid
    double bearingToCentroid(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> bearingToCentroid
    double bearingToCentroid(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> bearingToCentroid
    boolean isValidLatitude(double) -> isValidLatitude
    boolean isValidLongitude(double) -> isValidLongitude
    java.util.List polygonToList(org.json.JSONArray) -> polygonToList
    java.util.List multiPolygonToList(org.json.JSONArray) -> multiPolygonToList
    com.google.appinventor.components.runtime.util.YailList multiPolygonToYailList(java.util.List) -> multiPolygonToYailList
    java.util.List multiPolygonFromYailList(com.google.appinventor.components.runtime.util.YailList) -> multiPolygonFromYailList
    java.util.List multiPolygonHolesFromYailList(com.google.appinventor.components.runtime.util.YailList) -> multiPolygonHolesFromYailList
    java.util.List multiPolygonHolesToList(org.json.JSONArray) -> multiPolygonHolesToList
    boolean isPolygon(com.google.appinventor.components.runtime.util.YailList) -> isPolygon
    boolean isMultiPolygon(com.google.appinventor.components.runtime.util.YailList) -> isMultiPolygon
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.GingerbreadUtil -> com.google.appinventor.components.runtime.util.GingerbreadUtil:
    void <init>() -> <init>
    java.net.CookieHandler newCookieManager() -> newCookieManager
    boolean clearCookies(java.net.CookieHandler) -> clearCookies
    android.nfc.NfcAdapter newNfcAdapter(android.content.Context) -> newNfcAdapter
    void enableNFCWriteMode(android.app.Activity,android.nfc.NfcAdapter,java.lang.String) -> enableNFCWriteMode
    void disableNFCAdapter(android.app.Activity,android.nfc.NfcAdapter) -> disableNFCAdapter
    android.nfc.NdefRecord createTextRecord(java.lang.String,boolean) -> createTextRecord
    void resolveNFCIntent(android.content.Intent,com.google.appinventor.components.runtime.NearField) -> resolveNFCIntent
    boolean writeNFCTag(android.nfc.NdefMessage,android.nfc.Tag) -> writeNFCTag
com.google.appinventor.components.runtime.util.HoneycombMR1Util -> com.google.appinventor.components.runtime.util.HoneycombMR1Util:
    void <init>() -> <init>
    android.net.Uri getContentUri() -> getContentUri
    android.net.Uri getPhoneContentUri() -> getPhoneContentUri
    android.net.Uri getDataContentUri() -> getDataContentUri
    java.lang.String[] getContactProjection() -> getContactProjection
    java.lang.String[] getNameProjection() -> getNameProjection
    java.lang.String[] getDataProjection() -> getDataProjection
    java.lang.String[] getEmailAdapterProjection() -> getEmailAdapterProjection
    int getIdIndex(android.database.Cursor) -> getIdIndex
    int getContactIdIndex(android.database.Cursor) -> getContactIdIndex
    int getNameIndex(android.database.Cursor) -> getNameIndex
    int getThumbnailIndex(android.database.Cursor) -> getThumbnailIndex
    int getPhotoIndex(android.database.Cursor) -> getPhotoIndex
    int getPhoneIndex(android.database.Cursor) -> getPhoneIndex
    int getEmailIndex(android.database.Cursor) -> getEmailIndex
    int getMimeIndex(android.database.Cursor) -> getMimeIndex
    java.lang.String getPhoneType() -> getPhoneType
    java.lang.String getEmailType() -> getEmailType
    java.lang.String getDisplayName() -> getDisplayName
    java.lang.String getEmailAddress() -> getEmailAddress
    java.lang.String getDataMimeType() -> getDataMimeType
    android.database.Cursor getDataCursor(java.lang.String,android.app.Activity,java.lang.String[]) -> getDataCursor
    java.io.InputStream openContactPhotoInputStreamHelper(android.content.ContentResolver,android.net.Uri) -> openContactPhotoInputStreamHelper
    java.lang.String getTimesContacted() -> getTimesContacted
com.google.appinventor.components.runtime.util.HoneycombUtil -> com.google.appinventor.components.runtime.util.HoneycombUtil:
    int VIEWGROUP_MEASURED_HEIGHT_STATE_SHIFT -> VIEWGROUP_MEASURED_HEIGHT_STATE_SHIFT
    void <init>() -> <init>
    int combineMeasuredStates(android.view.ViewGroup,int,int) -> combineMeasuredStates
    int getMeasuredState(android.view.View) -> getMeasuredState
    int resolveSizeAndState(android.view.ViewGroup,int,int,int) -> resolveSizeAndState
    void viewSetRotate(android.view.View,double) -> viewSetRotate
    android.widget.Spinner makeSpinner(android.content.Context) -> makeSpinner
com.google.appinventor.components.runtime.util.HoneycombWebViewClient -> com.google.appinventor.components.runtime.util.HoneycombWebViewClient:
    java.lang.String TAG -> db
    void <init>(boolean,boolean,com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.WebViewer) -> <init>
    android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String) -> shouldInterceptRequest
    android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest) -> shouldInterceptRequest
    android.webkit.WebResourceResponse handleAppRequest(java.lang.String) -> handleAppRequest
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.IOUtils -> com.google.appinventor.components.runtime.util.IOUtils:
    void <init>() -> <init>
    void closeQuietly(java.lang.String,java.io.Closeable) -> closeQuietly
com.google.appinventor.components.runtime.util.ITextToSpeech -> com.google.appinventor.components.runtime.util.ITextToSpeech:
    void speak(java.lang.String,java.util.Locale) -> speak
    void onStop() -> onStop
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void setPitch(float) -> setPitch
    void setSpeechRate(float) -> setSpeechRate
    int isLanguageAvailable(java.util.Locale) -> isLanguageAvailable
    boolean isInitialized() -> isInitialized
com.google.appinventor.components.runtime.util.ITextToSpeech$TextToSpeechCallback -> com.google.appinventor.components.runtime.util.ITextToSpeech$TextToSpeechCallback:
    void onSuccess() -> onSuccess
    void onFailure() -> onFailure
com.google.appinventor.components.runtime.util.IceCreamSandwichUtil -> com.google.appinventor.components.runtime.util.IceCreamSandwichUtil:
    void <init>() -> <init>
    void setAllCaps(android.widget.TextView,boolean) -> setAllCaps
com.google.appinventor.components.runtime.util.ImageViewUtil -> com.google.appinventor.components.runtime.util.ImageViewUtil:
    void <init>() -> <init>
    void setMenuButtonColor(android.app.Activity,int) -> setMenuButtonColor
    android.widget.ImageView findOverflowMenuView(android.app.Activity) -> a
com.google.appinventor.components.runtime.util.InternalTextToSpeech -> com.google.appinventor.components.runtime.util.InternalTextToSpeech:
    android.app.Activity activity -> m
    com.google.appinventor.components.runtime.util.ITextToSpeech$TextToSpeechCallback callback -> b
    android.speech.tts.TextToSpeech tts -> a
    boolean isTtsInitialized -> bK
    android.os.Handler mHandler -> n
    int nextUtteranceId -> ca
    int ttsRetryDelay -> cb
    int ttsMaxRetries -> cc
    void <init>(android.app.Activity,com.google.appinventor.components.runtime.util.ITextToSpeech$TextToSpeechCallback) -> <init>
    void initializeTts() -> ac
    void speak(java.lang.String,java.util.Locale) -> speak
    boolean isInitialized() -> isInitialized
    void speak(java.lang.String,java.util.Locale,int) -> a
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void setPitch(float) -> setPitch
    void setSpeechRate(float) -> setSpeechRate
    int isLanguageAvailable(java.util.Locale) -> isLanguageAvailable
    boolean access$002(com.google.appinventor.components.runtime.util.InternalTextToSpeech,boolean) -> a
    com.google.appinventor.components.runtime.util.ITextToSpeech$TextToSpeechCallback access$100(com.google.appinventor.components.runtime.util.InternalTextToSpeech) -> a
    android.app.Activity access$200(com.google.appinventor.components.runtime.util.InternalTextToSpeech) -> a
    void access$300(com.google.appinventor.components.runtime.util.InternalTextToSpeech,java.lang.String,java.util.Locale,int) -> a
com.google.appinventor.components.runtime.util.InternalTextToSpeech$1 -> com.google.appinventor.components.runtime.util.J:
    com.google.appinventor.components.runtime.util.InternalTextToSpeech this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.InternalTextToSpeech) -> <init>
    void onInit(int) -> onInit
com.google.appinventor.components.runtime.util.InternalTextToSpeech$2 -> com.google.appinventor.components.runtime.util.K:
    com.google.appinventor.components.runtime.util.InternalTextToSpeech this$0 -> b
    void <init>(com.google.appinventor.components.runtime.util.InternalTextToSpeech) -> <init>
    void onUtteranceCompleted(java.lang.String) -> onUtteranceCompleted
com.google.appinventor.components.runtime.util.InternalTextToSpeech$2$1 -> com.google.appinventor.components.runtime.util.L:
    com.google.appinventor.components.runtime.util.InternalTextToSpeech$2 this$1 -> a
    void <init>(com.google.appinventor.components.runtime.util.InternalTextToSpeech$2) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.InternalTextToSpeech$3 -> com.google.appinventor.components.runtime.util.M:
    int val$retries -> cd
    java.lang.String val$message -> dc
    java.util.Locale val$loc -> a
    com.google.appinventor.components.runtime.util.InternalTextToSpeech this$0 -> c
    void <init>(com.google.appinventor.components.runtime.util.InternalTextToSpeech,int,java.lang.String,java.util.Locale) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.JavaStringUtils -> com.google.appinventor.components.runtime.util.JavaStringUtils:
    java.lang.String LOG_TAG_JOIN_STRINGS -> LOG_TAG_JOIN_STRINGS
    com.google.appinventor.components.runtime.util.JavaStringUtils$MappingOrder mappingOrderDictionary -> a
    com.google.appinventor.components.runtime.util.JavaStringUtils$MappingOrder mappingOrderLongestStringFirst -> b
    com.google.appinventor.components.runtime.util.JavaStringUtils$MappingOrder mappingOrderEarliestOccurrence -> c
    java.util.Comparator rangeComparator -> a
    void <init>() -> <init>
    java.lang.String joinStrings(java.util.List,java.lang.String) -> joinStrings
    java.lang.String join(java.util.List,java.lang.String) -> a
    java.lang.String replaceAllMappingsDictionaryOrder(java.lang.String,java.util.Map) -> replaceAllMappingsDictionaryOrder
    java.lang.String replaceAllMappingsLongestStringOrder(java.lang.String,java.util.Map) -> replaceAllMappingsLongestStringOrder
    java.lang.String replaceAllMappingsEarliestOccurrenceOrder(java.lang.String,java.util.Map) -> replaceAllMappingsEarliestOccurrenceOrder
    java.lang.String replaceAllMappings(java.lang.String,java.util.Map,com.google.appinventor.components.runtime.util.JavaStringUtils$MappingOrder) -> replaceAllMappings
    java.lang.String applyMappings(java.lang.String,java.util.Map,java.util.List) -> a
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.JavaStringUtils$1 -> com.google.appinventor.components.runtime.util.N:
com.google.appinventor.components.runtime.util.JavaStringUtils$MappingEarliestOccurrenceFirstOrder -> com.google.appinventor.components.runtime.util.O:
    void <init>() -> <init>
    void changeOrder(java.util.List,java.lang.String) -> a
    void <init>(com.google.appinventor.components.runtime.util.JavaStringUtils$1) -> <init>
com.google.appinventor.components.runtime.util.JavaStringUtils$MappingEarliestOccurrenceFirstOrder$1 -> com.google.appinventor.components.runtime.util.P:
    java.util.Map val$occurrenceIndices -> p
    com.google.appinventor.components.runtime.util.JavaStringUtils$MappingEarliestOccurrenceFirstOrder this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.JavaStringUtils$MappingEarliestOccurrenceFirstOrder,java.util.Map) -> <init>
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.appinventor.components.runtime.util.JavaStringUtils$MappingLongestStringFirstOrder -> com.google.appinventor.components.runtime.util.Q:
    void <init>() -> <init>
    void changeOrder(java.util.List,java.lang.String) -> a
    void <init>(com.google.appinventor.components.runtime.util.JavaStringUtils$1) -> <init>
com.google.appinventor.components.runtime.util.JavaStringUtils$MappingLongestStringFirstOrder$1 -> com.google.appinventor.components.runtime.util.R:
    com.google.appinventor.components.runtime.util.JavaStringUtils$MappingLongestStringFirstOrder this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.JavaStringUtils$MappingLongestStringFirstOrder) -> <init>
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.appinventor.components.runtime.util.JavaStringUtils$MappingOrder -> com.google.appinventor.components.runtime.util.S:
    void <init>() -> <init>
    void changeOrder(java.util.List,java.lang.String) -> a
    void <init>(com.google.appinventor.components.runtime.util.JavaStringUtils$1) -> <init>
com.google.appinventor.components.runtime.util.JavaStringUtils$Range -> com.google.appinventor.components.runtime.util.T:
    int start -> ce
    int end -> cf
    java.lang.String text -> dd
    void <init>(int,int,java.lang.String) -> <init>
com.google.appinventor.components.runtime.util.JavaStringUtils$RangeComparator -> com.google.appinventor.components.runtime.util.U:
    void <init>() -> <init>
    int compare(com.google.appinventor.components.runtime.util.JavaStringUtils$Range,com.google.appinventor.components.runtime.util.JavaStringUtils$Range) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(com.google.appinventor.components.runtime.util.JavaStringUtils$1) -> <init>
com.google.appinventor.components.runtime.util.JellybeanUtil -> com.google.appinventor.components.runtime.util.JellybeanUtil:
    void <init>() -> <init>
    void getRealSize(android.view.Display,android.graphics.Point) -> getRealSize
com.google.appinventor.components.runtime.util.JsonUtil -> com.google.appinventor.components.runtime.util.JsonUtil:
    void <init>() -> <init>
    java.util.List getStringListFromJsonArray(org.json.JSONArray) -> getStringListFromJsonArray
    java.util.List getListFromJsonArray(org.json.JSONArray) -> getListFromJsonArray
    java.util.List getListFromJsonArray(org.json.JSONArray,boolean) -> getListFromJsonArray
    java.util.List getListFromJsonObject(org.json.JSONObject) -> getListFromJsonObject
    com.google.appinventor.components.runtime.util.YailDictionary getDictionaryFromJsonObject(org.json.JSONObject) -> getDictionaryFromJsonObject
    java.lang.Object convertJsonItem(java.lang.Object) -> convertJsonItem
    java.lang.Object convertJsonItem(java.lang.Object,boolean) -> convertJsonItem
    java.lang.String getJsonRepresentation(java.lang.Object) -> getJsonRepresentation
    java.lang.Object getObjectFromJson(java.lang.String) -> getObjectFromJson
    java.lang.Object getObjectFromJson(java.lang.String,boolean) -> getObjectFromJson
    java.lang.String getJsonRepresentationIfValueFileName(java.lang.Object) -> getJsonRepresentationIfValueFileName
    java.lang.String getJsonRepresentationIfValueFileName(android.content.Context,java.lang.Object) -> getJsonRepresentationIfValueFileName
    java.lang.String writeFile(android.content.Context,java.lang.String,java.lang.String) -> a
    void trimDirectory(int,java.io.File) -> a
    java.lang.String encodeJsonObject(java.lang.Object) -> encodeJsonObject
com.google.appinventor.components.runtime.util.JsonUtil$1 -> com.google.appinventor.components.runtime.util.V:
    void <init>() -> <init>
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.appinventor.components.runtime.util.KitkatUtil -> com.google.appinventor.components.runtime.util.KitkatUtil:
    void <init>() -> <init>
    java.util.List getMessagesFromIntent(android.content.Intent) -> getMessagesFromIntent
    int getMinWidth(android.widget.TextView) -> getMinWidth
    int getMinHeight(android.widget.TextView) -> getMinHeight
com.google.appinventor.components.runtime.util.LollipopUtil -> com.google.appinventor.components.runtime.util.LollipopUtil:
    void <init>() -> <init>
    java.lang.String formatNumber(java.lang.String) -> formatNumber
com.google.appinventor.components.runtime.util.MapFactory -> com.google.appinventor.components.runtime.util.MapFactory:
    void <init>() -> <init>
    com.google.appinventor.components.runtime.util.MapFactory$MapController newMap(com.google.appinventor.components.runtime.Form) -> newMap
com.google.appinventor.components.runtime.util.MapFactory$HasFill -> com.google.appinventor.components.runtime.util.MapFactory$HasFill:
    void FillColor(int) -> FillColor
    int FillColor() -> FillColor
    void FillOpacity(float) -> FillOpacity
    float FillOpacity() -> FillOpacity
com.google.appinventor.components.runtime.util.MapFactory$HasStroke -> com.google.appinventor.components.runtime.util.MapFactory$HasStroke:
    void StrokeColor(int) -> StrokeColor
    int StrokeColor() -> StrokeColor
    void StrokeOpacity(float) -> StrokeOpacity
    float StrokeOpacity() -> StrokeOpacity
    void StrokeWidth(int) -> StrokeWidth
    int StrokeWidth() -> StrokeWidth
com.google.appinventor.components.runtime.util.MapFactory$MapCircle -> com.google.appinventor.components.runtime.util.MapFactory$MapCircle:
    void Radius(double) -> Radius
    double Radius() -> Radius
    void Latitude(double) -> Latitude
    double Latitude() -> Latitude
    void Longitude(double) -> Longitude
    double Longitude() -> Longitude
    void SetLocation(double,double) -> SetLocation
    void updateCenter(double,double) -> updateCenter
com.google.appinventor.components.runtime.util.MapFactory$MapController -> com.google.appinventor.components.runtime.util.MapFactory$MapController:
    android.view.View getView() -> getView
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    void setCenter(double,double) -> setCenter
    void setZoom(int) -> setZoom
    int getZoom() -> getZoom
    com.google.appinventor.components.runtime.util.MapFactory$MapType getMapType() -> getMapType
    void setMapType(com.google.appinventor.components.runtime.util.MapFactory$MapType) -> setMapType
    void setCompassEnabled(boolean) -> setCompassEnabled
    boolean isCompassEnabled() -> isCompassEnabled
    void setZoomEnabled(boolean) -> setZoomEnabled
    boolean isZoomEnabled() -> isZoomEnabled
    void setZoomControlEnabled(boolean) -> setZoomControlEnabled
    boolean isZoomControlEnabled() -> isZoomControlEnabled
    void setShowUserEnabled(boolean) -> setShowUserEnabled
    boolean isShowUserEnabled() -> isShowUserEnabled
    void setRotationEnabled(boolean) -> setRotationEnabled
    boolean isRotationEnabled() -> isRotationEnabled
    void setPanEnabled(boolean) -> setPanEnabled
    boolean isPanEnabled() -> isPanEnabled
    void panTo(double,double,int,double) -> panTo
    void addEventListener(com.google.appinventor.components.runtime.util.MapFactory$MapEventListener) -> addEventListener
    org.osmdroid.util.BoundingBox getBoundingBox() -> getBoundingBox
    void setBoundingBox(org.osmdroid.util.BoundingBox) -> setBoundingBox
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> addFeature
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> addFeature
    void removeFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> removeFeature
    void showFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> showFeature
    void hideFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> hideFeature
    boolean isFeatureVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> isFeatureVisible
    boolean isFeatureCollectionVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureCollection) -> isFeatureCollectionVisible
    void setFeatureCollectionVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureCollection,boolean) -> setFeatureCollectionVisible
    void showInfobox(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> showInfobox
    void hideInfobox(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> hideInfobox
    boolean isInfoboxVisible(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> isInfoboxVisible
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> updateFeaturePosition
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapLineString) -> updateFeaturePosition
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> updateFeaturePosition
    void updateFeatureHoles(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon) -> updateFeatureHoles
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapCircle) -> updateFeaturePosition
    void updateFeaturePosition(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle) -> updateFeaturePosition
    void updateFeatureFill(com.google.appinventor.components.runtime.util.MapFactory$HasFill) -> updateFeatureFill
    void updateFeatureStroke(com.google.appinventor.components.runtime.util.MapFactory$HasStroke) -> updateFeatureStroke
    void updateFeatureText(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> updateFeatureText
    void updateFeatureDraggable(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> updateFeatureDraggable
    void updateFeatureImage(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> updateFeatureImage
    void updateFeatureSize(com.google.appinventor.components.runtime.util.MapFactory$MapMarker) -> updateFeatureSize
    com.google.appinventor.components.runtime.LocationSensor$LocationSensorListener getLocationListener() -> getLocationListener
    int getOverlayCount() -> getOverlayCount
    void setRotation(float) -> setRotation
    float getRotation() -> getRotation
    void setScaleVisible(boolean) -> setScaleVisible
    boolean isScaleVisible() -> isScaleVisible
    void setScaleUnits(com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits) -> setScaleUnits
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits getScaleUnits() -> getScaleUnits
com.google.appinventor.components.runtime.util.MapFactory$MapEventListener -> com.google.appinventor.components.runtime.util.MapFactory$MapEventListener:
    void onReady(com.google.appinventor.components.runtime.util.MapFactory$MapController) -> onReady
    void onBoundsChanged() -> onBoundsChanged
    void onZoom() -> onZoom
    void onSingleTap(double,double) -> onSingleTap
    void onDoubleTap(double,double) -> onDoubleTap
    void onLongPress(double,double) -> onLongPress
    void onFeatureClick(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureClick
    void onFeatureLongPress(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureLongPress
    void onFeatureStartDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureStartDrag
    void onFeatureDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureDrag
    void onFeatureStopDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> onFeatureStopDrag
com.google.appinventor.components.runtime.util.MapFactory$MapFeature -> com.google.appinventor.components.runtime.util.MapFactory$MapFeature:
    java.lang.String Type() -> Type
    boolean Visible() -> Visible
    void Visible(boolean) -> Visible
    void Draggable(boolean) -> Draggable
    boolean Draggable() -> Draggable
    void Title(java.lang.String) -> Title
    java.lang.String Title() -> Title
    void Description(java.lang.String) -> Description
    java.lang.String Description() -> Description
    void EnableInfobox(boolean) -> EnableInfobox
    boolean EnableInfobox() -> EnableInfobox
    void ShowInfobox() -> ShowInfobox
    void HideInfobox() -> HideInfobox
    void Click() -> Click
    void LongClick() -> LongClick
    void StartDrag() -> StartDrag
    void Drag() -> Drag
    void StopDrag() -> StopDrag
    java.lang.Object accept(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor,java.lang.Object[]) -> accept
    org.osmdroid.api.IGeoPoint getCentroid() -> getCentroid
    org.locationtech.jts.geom.Geometry getGeometry() -> getGeometry
    void setMap(com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer) -> setMap
    void removeFromMap() -> removeFromMap
com.google.appinventor.components.runtime.util.MapFactory$MapFeatureCollection -> com.google.appinventor.components.runtime.util.MapFactory$MapFeatureCollection:
    boolean Visible() -> Visible
    com.google.appinventor.components.runtime.util.YailList Features() -> Features
    void Source(java.lang.String) -> Source
    java.lang.String Source() -> Source
    void LoadFromURL(java.lang.String) -> LoadFromURL
    void GotFeatures(java.lang.String,com.google.appinventor.components.runtime.util.YailList) -> GotFeatures
    void LoadError(java.lang.String,int,java.lang.String) -> LoadError
com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer -> com.google.appinventor.components.runtime.util.MapFactory$MapFeatureContainer:
    void Features(com.google.appinventor.components.runtime.util.YailList) -> Features
    com.google.appinventor.components.runtime.util.YailList Features() -> Features
    void FeatureClick(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureClick
    void FeatureLongClick(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureLongClick
    void FeatureStartDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureStartDrag
    void FeatureDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureDrag
    void FeatureStopDrag(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> FeatureStopDrag
    com.google.appinventor.components.runtime.Map getMap() -> getMap
    void addFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> addFeature
    java.util.Iterator iterator() -> iterator
    void removeFeature(com.google.appinventor.components.runtime.util.MapFactory$MapFeature) -> removeFeature
com.google.appinventor.components.runtime.util.MapFactory$MapFeatureType -> com.google.appinventor.components.runtime.util.MapFactory$MapFeatureType:
    java.lang.String TYPE_MARKER -> TYPE_MARKER
    java.lang.String TYPE_CIRCLE -> TYPE_CIRCLE
    java.lang.String TYPE_RECTANGLE -> TYPE_RECTANGLE
    java.lang.String TYPE_POINT -> TYPE_POINT
    java.lang.String TYPE_LINESTRING -> TYPE_LINESTRING
    java.lang.String TYPE_POLYGON -> TYPE_POLYGON
    java.lang.String TYPE_MULTIPOINT -> TYPE_MULTIPOINT
    java.lang.String TYPE_MULTILINESTRING -> TYPE_MULTILINESTRING
    java.lang.String TYPE_MULTIPOLYGON -> TYPE_MULTIPOLYGON
    void <init>() -> <init>
com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor -> com.google.appinventor.components.runtime.util.MapFactory$MapFeatureVisitor:
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapMarker,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapLineString,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapPolygon,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapCircle,java.lang.Object[]) -> visit
    java.lang.Object visit(com.google.appinventor.components.runtime.util.MapFactory$MapRectangle,java.lang.Object[]) -> visit
com.google.appinventor.components.runtime.util.MapFactory$MapLineString -> com.google.appinventor.components.runtime.util.MapFactory$MapLineString:
    com.google.appinventor.components.runtime.util.YailList Points() -> Points
    void Points(com.google.appinventor.components.runtime.util.YailList) -> Points
    java.util.List getPoints() -> getPoints
    void updatePoints(java.util.List) -> updatePoints
com.google.appinventor.components.runtime.util.MapFactory$MapMarker -> com.google.appinventor.components.runtime.util.MapFactory$MapMarker:
    void ImageAsset(java.lang.String) -> ImageAsset
    java.lang.String ImageAsset() -> ImageAsset
    void Latitude(double) -> Latitude
    double Latitude() -> Latitude
    void Longitude(double) -> Longitude
    double Longitude() -> Longitude
    void AnchorHorizontal(int) -> AnchorHorizontal
    int AnchorHorizontal() -> AnchorHorizontal
    void AnchorVertical(int) -> AnchorVertical
    int AnchorVertical() -> AnchorVertical
    void ShowShadow(boolean) -> ShowShadow
    boolean ShowShadow() -> ShowShadow
    void Width(int) -> Width
    int Width() -> Width
    void Height(int) -> Height
    int Height() -> Height
    void SetLocation(double,double) -> SetLocation
    org.osmdroid.api.IGeoPoint getLocation() -> getLocation
    void updateLocation(double,double) -> updateLocation
com.google.appinventor.components.runtime.util.MapFactory$MapPolygon -> com.google.appinventor.components.runtime.util.MapFactory$MapPolygon:
    com.google.appinventor.components.runtime.util.YailList Points() -> Points
    void Points(com.google.appinventor.components.runtime.util.YailList) -> Points
    com.google.appinventor.components.runtime.util.YailList HolePoints() -> HolePoints
    void HolePoints(com.google.appinventor.components.runtime.util.YailList) -> HolePoints
    java.util.List getPoints() -> getPoints
    java.util.List getHolePoints() -> getHolePoints
    void updatePoints(java.util.List) -> updatePoints
    void updateHolePoints(java.util.List) -> updateHolePoints
com.google.appinventor.components.runtime.util.MapFactory$MapRectangle -> com.google.appinventor.components.runtime.util.MapFactory$MapRectangle:
    void EastLongitude(double) -> EastLongitude
    double EastLongitude() -> EastLongitude
    void NorthLatitude(double) -> NorthLatitude
    double NorthLatitude() -> NorthLatitude
    void SouthLatitude(double) -> SouthLatitude
    double SouthLatitude() -> SouthLatitude
    void WestLongitude(double) -> WestLongitude
    double WestLongitude() -> WestLongitude
    com.google.appinventor.components.runtime.util.YailList Center() -> Center
    com.google.appinventor.components.runtime.util.YailList Bounds() -> Bounds
    void SetCenter(double,double) -> SetCenter
    void updateBounds(double,double,double,double) -> updateBounds
com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits -> com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits:
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits UNKNOWN -> UNKNOWN
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits METRIC -> METRIC
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits IMPERIAL -> IMPERIAL
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits[] $VALUES -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits[] values() -> values
    com.google.appinventor.components.runtime.util.MapFactory$MapScaleUnits valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.MapFactory$MapType -> com.google.appinventor.components.runtime.util.MapFactory$MapType:
    com.google.appinventor.components.runtime.util.MapFactory$MapType UNKNOWN -> UNKNOWN
    com.google.appinventor.components.runtime.util.MapFactory$MapType ROADS -> ROADS
    com.google.appinventor.components.runtime.util.MapFactory$MapType AERIAL -> AERIAL
    com.google.appinventor.components.runtime.util.MapFactory$MapType TERRAIN -> TERRAIN
    com.google.appinventor.components.runtime.util.MapFactory$MapType[] $VALUES -> a
    com.google.appinventor.components.runtime.util.MapFactory$MapType[] values() -> values
    com.google.appinventor.components.runtime.util.MapFactory$MapType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.MediaUtil -> com.google.appinventor.components.runtime.util.MediaUtil:
    java.util.Map tempFileMap -> q
    java.util.concurrent.ConcurrentHashMap pathCache -> a
    void <init>() -> <init>
    java.lang.String fileUrlToFilePath(java.lang.String) -> i
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource determineMediaSource(com.google.appinventor.components.runtime.Form,java.lang.String) -> a
    boolean isExternalFileUrl(java.lang.String) -> isExternalFileUrl
    boolean isExternalFileUrl(android.content.Context,java.lang.String) -> isExternalFileUrl
    boolean isExternalFile(java.lang.String) -> isExternalFile
    boolean isExternalFile(android.content.Context,java.lang.String) -> isExternalFile
    java.lang.String findCaseinsensitivePath(com.google.appinventor.components.runtime.Form,java.lang.String) -> a
    java.lang.String findCaseinsensitivePathWithoutCache(com.google.appinventor.components.runtime.Form,java.lang.String) -> b
    java.io.InputStream getAssetsIgnoreCaseInputStream(com.google.appinventor.components.runtime.Form,java.lang.String) -> a
    java.io.InputStream openMedia(com.google.appinventor.components.runtime.Form,java.lang.String,com.google.appinventor.components.runtime.util.MediaUtil$MediaSource) -> a
    java.io.InputStream openMedia(com.google.appinventor.components.runtime.Form,java.lang.String) -> openMedia
    java.io.File copyMediaToTempFile(com.google.appinventor.components.runtime.Form,java.lang.String) -> copyMediaToTempFile
    java.io.File copyMediaToTempFile(com.google.appinventor.components.runtime.Form,java.lang.String,com.google.appinventor.components.runtime.util.MediaUtil$MediaSource) -> a
    java.io.File cacheMediaTempFile(com.google.appinventor.components.runtime.Form,java.lang.String,com.google.appinventor.components.runtime.util.MediaUtil$MediaSource) -> b
    android.graphics.drawable.BitmapDrawable getBitmapDrawable(com.google.appinventor.components.runtime.Form,java.lang.String) -> getBitmapDrawable
    void getBitmapDrawableAsync(com.google.appinventor.components.runtime.Form,java.lang.String,com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> getBitmapDrawableAsync
    android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> a
    android.graphics.BitmapFactory$Options getBitmapOptions(com.google.appinventor.components.runtime.Form,java.io.InputStream,java.lang.String) -> a
    android.content.res.AssetFileDescriptor getAssetsIgnoreCaseAfd(com.google.appinventor.components.runtime.Form,java.lang.String) -> a
    int loadSoundPool(android.media.SoundPool,com.google.appinventor.components.runtime.Form,java.lang.String) -> loadSoundPool
    void loadMediaPlayer(android.media.MediaPlayer,com.google.appinventor.components.runtime.Form,java.lang.String) -> loadMediaPlayer
    void loadVideoView(android.widget.VideoView,com.google.appinventor.components.runtime.Form,java.lang.String) -> loadVideoView
    java.io.InputStream access$100(com.google.appinventor.components.runtime.Form,java.lang.String,com.google.appinventor.components.runtime.util.MediaUtil$MediaSource) -> b
    android.graphics.BitmapFactory$Options access$200(com.google.appinventor.components.runtime.Form,java.io.InputStream,java.lang.String) -> b
    android.graphics.Bitmap access$300(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> b
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.MediaUtil$1 -> com.google.appinventor.components.runtime.util.W:
    com.google.appinventor.components.runtime.util.MediaUtil$Synchronizer val$syncer -> a
    void <init>(com.google.appinventor.components.runtime.util.MediaUtil$Synchronizer) -> <init>
    void onFailure(java.lang.String) -> onFailure
    void onSuccess(android.graphics.drawable.BitmapDrawable) -> a
    void onSuccess(java.lang.Object) -> onSuccess
com.google.appinventor.components.runtime.util.MediaUtil$2 -> com.google.appinventor.components.runtime.util.X:
    java.lang.String val$mediaPath -> de
    com.google.appinventor.components.runtime.Form val$form -> y
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource val$mediaSource -> a
    com.google.appinventor.components.runtime.util.AsyncCallbackPair val$continuation -> a
    void <init>(java.lang.String,com.google.appinventor.components.runtime.Form,com.google.appinventor.components.runtime.util.MediaUtil$MediaSource,com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.MediaUtil$3 -> com.google.appinventor.components.runtime.util.Y:
    int[] $SwitchMap$com$google$appinventor$components$runtime$util$MediaUtil$MediaSource -> c
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.MediaUtil$FlushedInputStream -> com.google.appinventor.components.runtime.util.Z:
    void <init>(java.io.InputStream) -> <init>
    long skip(long) -> skip
com.google.appinventor.components.runtime.util.MediaUtil$MediaSource -> com.google.appinventor.components.runtime.util.aa:
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource ASSET -> b
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource REPL_ASSET -> c
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource SDCARD -> d
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource FILE_URL -> e
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource URL -> f
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource CONTENT_URI -> g
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource CONTACT_URI -> h
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource[] $VALUES -> a
    com.google.appinventor.components.runtime.util.MediaUtil$MediaSource[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.MediaUtil$Synchronizer -> com.google.appinventor.components.runtime.util.ab:
    boolean finished -> bL
    java.lang.Object result -> t
    java.lang.String error -> df
    void <init>() -> <init>
    void waitfor() -> ad
    void wakeup(java.lang.Object) -> a
    void error(java.lang.String) -> t
    java.lang.Object getResult() -> b
    java.lang.String getError() -> i
    void <init>(com.google.appinventor.components.runtime.util.MediaUtil$1) -> <init>
com.google.appinventor.components.runtime.util.MemoryLeakUtil -> com.google.appinventor.components.runtime.util.MemoryLeakUtil:
    java.util.concurrent.atomic.AtomicInteger prefixGenerator -> a
    java.util.Map TRACKED_OBJECTS -> r
    void <init>() -> <init>
    java.lang.String trackObject(java.lang.String,java.lang.Object) -> trackObject
    boolean isTrackedObjectCollected(java.lang.String,boolean) -> isTrackedObjectCollected
    void checkAllTrackedObjects(boolean,boolean) -> checkAllTrackedObjects
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.NanoHTTPD -> com.google.appinventor.components.runtime.util.NanoHTTPD:
    java.lang.String HTTP_OK -> HTTP_OK
    java.lang.String HTTP_PARTIALCONTENT -> HTTP_PARTIALCONTENT
    java.lang.String HTTP_RANGE_NOT_SATISFIABLE -> HTTP_RANGE_NOT_SATISFIABLE
    java.lang.String HTTP_REDIRECT -> HTTP_REDIRECT
    java.lang.String HTTP_NOTMODIFIED -> HTTP_NOTMODIFIED
    java.lang.String HTTP_FORBIDDEN -> HTTP_FORBIDDEN
    java.lang.String HTTP_NOTFOUND -> HTTP_NOTFOUND
    java.lang.String HTTP_BADREQUEST -> HTTP_BADREQUEST
    java.lang.String HTTP_INTERNALERROR -> HTTP_INTERNALERROR
    java.lang.String HTTP_NOTIMPLEMENTED -> HTTP_NOTIMPLEMENTED
    java.lang.String MIME_PLAINTEXT -> MIME_PLAINTEXT
    java.lang.String MIME_HTML -> MIME_HTML
    java.lang.String MIME_DEFAULT_BINARY -> MIME_DEFAULT_BINARY
    java.lang.String MIME_XML -> MIME_XML
    java.util.concurrent.ThreadPoolExecutor myExecutor -> a
    int myTcpPort -> cg
    java.net.ServerSocket myServerSocket -> a
    java.lang.Thread myThread -> a
    java.io.File myRootDir -> c
    java.util.Hashtable theMimeTypes -> a
    int theBufferSize -> ch
    java.io.PrintStream myOut -> myOut
    java.io.PrintStream myErr -> myErr
    java.text.SimpleDateFormat gmtFrmt -> a
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response serve(java.lang.String,java.lang.String,java.util.Properties,java.util.Properties,java.util.Properties,java.net.Socket) -> serve
    void <init>(int,java.io.File) -> <init>
    void stop() -> stop
    void main(java.lang.String[]) -> main
    java.lang.String encodeUri(java.lang.String) -> j
    com.google.appinventor.components.runtime.util.NanoHTTPD$Response serveFile(java.lang.String,java.util.Properties,java.io.File,boolean) -> serveFile
    java.net.ServerSocket access$000(com.google.appinventor.components.runtime.util.NanoHTTPD) -> a
    java.util.concurrent.ThreadPoolExecutor access$200(com.google.appinventor.components.runtime.util.NanoHTTPD) -> a
    java.text.SimpleDateFormat access$300() -> a
    int access$400() -> e
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.NanoHTTPD$1 -> com.google.appinventor.components.runtime.util.ac:
    com.google.appinventor.components.runtime.util.NanoHTTPD this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.NanoHTTPD$2 -> com.google.appinventor.components.runtime.util.ad:
    long val$dataLen -> l
    com.google.appinventor.components.runtime.util.NanoHTTPD this$0 -> b
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD,java.io.File,long) -> <init>
    int available() -> available
com.google.appinventor.components.runtime.util.NanoHTTPD$HTTPSession -> com.google.appinventor.components.runtime.util.ae:
    java.net.Socket mySocket -> a
    com.google.appinventor.components.runtime.util.NanoHTTPD this$0 -> c
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD,java.net.Socket) -> <init>
    void run() -> run
    void decodeHeader(java.io.BufferedReader,java.util.Properties,java.util.Properties,java.util.Properties) -> a
    void decodeMultipartData(java.lang.String,byte[],java.io.BufferedReader,java.util.Properties,java.util.Properties) -> a
    int[] getBoundaryPositions(byte[],byte[]) -> a
    java.lang.String saveTmpFile(byte[],int,int) -> a
    int stripMultipartHeaders(byte[],int) -> a
    java.lang.String decodePercent(java.lang.String) -> k
    void decodeParms(java.lang.String,java.util.Properties) -> a
    void sendError(java.lang.String,java.lang.String) -> d
    void sendResponse(java.lang.String,java.lang.String,java.util.Properties,java.io.InputStream) -> a
com.google.appinventor.components.runtime.util.NanoHTTPD$Response -> com.google.appinventor.components.runtime.util.NanoHTTPD$Response:
    java.lang.String status -> status
    java.lang.String mimeType -> mimeType
    java.io.InputStream data -> data
    java.util.Properties header -> header
    com.google.appinventor.components.runtime.util.NanoHTTPD this$0 -> d
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD) -> <init>
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD,java.lang.String,java.lang.String,java.io.InputStream) -> <init>
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void addHeader(java.lang.String,java.lang.String) -> addHeader
com.google.appinventor.components.runtime.util.NanoHTTPD$myThreadFactory -> com.google.appinventor.components.runtime.util.af:
    com.google.appinventor.components.runtime.util.NanoHTTPD this$0 -> e
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    void <init>(com.google.appinventor.components.runtime.util.NanoHTTPD,com.google.appinventor.components.runtime.util.NanoHTTPD$1) -> <init>
com.google.appinventor.components.runtime.util.NougatUtil -> com.google.appinventor.components.runtime.util.NougatUtil:
    java.lang.String LOG_TAG -> dg
    void <init>() -> <init>
    android.net.Uri getPackageUri(com.google.appinventor.components.runtime.Form,java.io.File) -> getPackageUri
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.OAuth2Helper -> com.google.appinventor.components.runtime.util.OAuth2Helper:
    java.lang.String TAG -> TAG
    java.lang.String PREF_AUTH_TOKEN -> PREF_AUTH_TOKEN
    java.lang.String PREF_ACCOUNT_NAME -> PREF_ACCOUNT_NAME
    java.lang.String errorMessage -> dh
    void <init>() -> <init>
    java.lang.String getRefreshedAuthToken(android.app.Activity,java.lang.String) -> getRefreshedAuthToken
    android.accounts.AccountManagerFuture getAccountManagerResult(android.app.Activity,com.google.api.client.googleapis.auth.oauth2.GoogleCredential,java.lang.String,java.lang.String) -> a
    boolean isUiThread() -> m
    void persistCredentials(android.content.SharedPreferences,java.lang.String,java.lang.String) -> a
    void resetAccountCredential(android.app.Activity) -> resetAccountCredential
    java.lang.String getErrorMessage() -> getErrorMessage
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.OnInitializeListener -> com.google.appinventor.components.runtime.util.OnInitializeListener:
    void onInitialize() -> onInitialize
com.google.appinventor.components.runtime.util.OrientationSensorUtil -> com.google.appinventor.components.runtime.util.OrientationSensorUtil:
    void <init>() -> <init>
    float mod(float,float) -> b
    float normalizeAzimuth(float) -> normalizeAzimuth
    float normalizePitch(float) -> normalizePitch
    float normalizeRoll(float) -> normalizeRoll
com.google.appinventor.components.runtime.util.PaintUtil -> com.google.appinventor.components.runtime.util.PaintUtil:
    void <init>() -> <init>
    void changePaint(android.graphics.Paint,int) -> changePaint
    void changePaintTransparent(android.graphics.Paint) -> changePaintTransparent
    int hexStringToInt(java.lang.String) -> hexStringToInt
com.google.appinventor.components.runtime.util.PhoneCallUtil -> com.google.appinventor.components.runtime.util.PhoneCallUtil:
    void <init>() -> <init>
    void makePhoneCall(android.content.Context,java.lang.String) -> makePhoneCall
com.google.appinventor.components.runtime.util.PlayerListDelta -> com.google.appinventor.components.runtime.util.PlayerListDelta:
    java.util.List playersRemoved -> s
    java.util.List playersAdded -> t
    com.google.appinventor.components.runtime.util.PlayerListDelta NO_CHANGE -> NO_CHANGE
    void <init>(java.util.List,java.util.List) -> <init>
    java.util.List getPlayersAdded() -> getPlayersAdded
    java.util.List getPlayersRemoved() -> getPlayersRemoved
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.PropertyUtil -> com.google.appinventor.components.runtime.util.PropertyUtil:
    void <init>() -> <init>
    com.google.appinventor.components.runtime.Component copyComponentProperties(com.google.appinventor.components.runtime.Component,com.google.appinventor.components.runtime.Component) -> copyComponentProperties
    java.lang.reflect.Method getPropertyCopierMethod(java.lang.String,java.lang.Class) -> a
com.google.appinventor.components.runtime.util.QUtil -> com.google.appinventor.components.runtime.util.QUtil:
    void <init>() -> <init>
    java.lang.String getExternalStoragePath(android.content.Context,boolean,boolean) -> getExternalStoragePath
    java.lang.String getExternalStoragePath(android.content.Context,boolean) -> getExternalStoragePath
    java.lang.String getExternalStoragePath(android.content.Context) -> getExternalStoragePath
    java.io.File getExternalStorageDir(android.content.Context) -> getExternalStorageDir
    java.io.File getExternalStorageDir(android.content.Context,boolean) -> getExternalStorageDir
    java.io.File getExternalStorageDir(android.content.Context,boolean,boolean) -> getExternalStorageDir
    java.lang.String getReplAssetPath(android.content.Context,boolean) -> getReplAssetPath
    java.lang.String getReplAssetPath(android.content.Context) -> getReplAssetPath
    java.lang.String getReplDataPath(android.content.Context,boolean) -> getReplDataPath
    java.lang.String getReplDataPath(android.content.Context) -> getReplDataPath
com.google.appinventor.components.runtime.util.RetValManager -> com.google.appinventor.components.runtime.util.RetValManager:
    java.lang.Object semaphore -> u
    java.util.ArrayList currentArray -> c
    void <init>() -> <init>
    void appendReturnValue(java.lang.String,java.lang.String,java.lang.String) -> appendReturnValue
    void sendError(java.lang.String) -> sendError
    void pushScreen(java.lang.String,java.lang.Object) -> pushScreen
    void popScreen(java.lang.String) -> popScreen
    void assetTransferred(java.lang.String) -> assetTransferred
    void extensionsLoaded() -> extensionsLoaded
    java.lang.String fetch(boolean) -> fetch
    void webRTCsendCurrent() -> ae
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.RuntimeErrorAlert -> com.google.appinventor.components.runtime.util.RuntimeErrorAlert:
    void <init>() -> <init>
    void alert(java.lang.Object,java.lang.String,java.lang.String,java.lang.String) -> alert
com.google.appinventor.components.runtime.util.RuntimeErrorAlert$1 -> com.google.appinventor.components.runtime.util.ag:
    java.lang.Object val$context -> v
    void <init>(java.lang.Object) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.appinventor.components.runtime.util.ScreenDensityUtil -> com.google.appinventor.components.runtime.util.ScreenDensityUtil:
    int DEFAULT_NORMAL_SHORT_DIMENSION -> DEFAULT_NORMAL_SHORT_DIMENSION
    float MAXIMUM_ASPECT_RATIO -> MAXIMUM_ASPECT_RATIO
    void <init>() -> <init>
    float computeCompatibleScaling(android.content.Context) -> computeCompatibleScaling
    void getRawScreenDim(android.content.Context,android.graphics.Point) -> a
com.google.appinventor.components.runtime.util.SdkLevel -> com.google.appinventor.components.runtime.util.SdkLevel:
    int LEVEL_CUPCAKE -> LEVEL_CUPCAKE
    int LEVEL_DONUT -> LEVEL_DONUT
    int LEVEL_ECLAIR -> LEVEL_ECLAIR
    int LEVEL_ECLAIR_0_1 -> LEVEL_ECLAIR_0_1
    int LEVEL_ECLAIR_MR1 -> LEVEL_ECLAIR_MR1
    int LEVEL_FROYO -> LEVEL_FROYO
    int LEVEL_GINGERBREAD -> LEVEL_GINGERBREAD
    int LEVEL_GINGERBREAD_MR1 -> LEVEL_GINGERBREAD_MR1
    int LEVEL_HONEYCOMB -> LEVEL_HONEYCOMB
    int LEVEL_HONEYCOMB_MR1 -> LEVEL_HONEYCOMB_MR1
    int LEVEL_ICE_CREAM_SANDWICH -> LEVEL_ICE_CREAM_SANDWICH
    int LEVEL_JELLYBEAN -> LEVEL_JELLYBEAN
    int LEVEL_JELLYBEAN_MR1 -> LEVEL_JELLYBEAN_MR1
    int LEVEL_JELLYBEAN_MR2 -> LEVEL_JELLYBEAN_MR2
    int LEVEL_KITKAT -> LEVEL_KITKAT
    int LEVEL_LOLLIPOP -> LEVEL_LOLLIPOP
    int LEVEL_MARSHMALLOW -> LEVEL_MARSHMALLOW
    int LEVEL_NOUGAT -> LEVEL_NOUGAT
    void <init>() -> <init>
    int getLevel() -> getLevel
com.google.appinventor.components.runtime.util.SmsBroadcastReceiver -> com.google.appinventor.components.runtime.util.SmsBroadcastReceiver:
    java.lang.String TAG -> TAG
    int NOTIFICATION_ID -> NOTIFICATION_ID
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    java.lang.String getPhoneNumber(android.content.Intent) -> a
    java.lang.String getMessage(android.content.Intent) -> b
    void sendNotification(android.content.Context,java.lang.String,java.lang.String) -> b
    boolean isRepl(android.content.Context) -> a
com.google.appinventor.components.runtime.util.TelnetRepl -> com.google.appinventor.components.runtime.util.TelnetRepl:
    java.net.Socket socket -> b
    gnu.expr.Language language -> b
    void <init>(gnu.expr.Language,java.net.Socket) -> <init>
    java.lang.Object apply0() -> apply0
    java.lang.Thread serve(gnu.expr.Language,java.net.Socket) -> serve
com.google.appinventor.components.runtime.util.TextViewUtil -> com.google.appinventor.components.runtime.util.TextViewUtil:
    void <init>() -> <init>
    void setAlignment(android.widget.TextView,int,boolean) -> setAlignment
    void setBackgroundColor(android.widget.TextView,int) -> setBackgroundColor
    boolean isEnabled(android.widget.TextView) -> isEnabled
    void setEnabled(android.widget.TextView,boolean) -> setEnabled
    float getFontSize(android.widget.TextView,android.content.Context) -> getFontSize
    void setFontSize(android.widget.TextView,float) -> setFontSize
    void setFontTypeface(android.widget.TextView,int,boolean,boolean) -> setFontTypeface
    java.lang.String getText(android.widget.TextView) -> getText
    void setTextHTML(android.widget.TextView,java.lang.String) -> setTextHTML
    void setText(android.widget.TextView,java.lang.String) -> setText
    void setPadding(android.widget.TextView,int) -> setPadding
    void setTextColor(android.widget.TextView,int) -> setTextColor
    void setTextColors(android.widget.TextView,android.content.res.ColorStateList) -> setTextColors
    void setMinWidth(android.widget.TextView,int) -> setMinWidth
    void setMinHeight(android.widget.TextView,int) -> setMinHeight
    void setMinSize(android.widget.TextView,int,int) -> setMinSize
com.google.appinventor.components.runtime.util.TimerInternal -> com.google.appinventor.components.runtime.util.TimerInternal:
    android.os.Handler handler -> e
    boolean enabled -> enabled
    int interval -> interval
    com.google.appinventor.components.runtime.AlarmHandler component -> a
    void <init>(com.google.appinventor.components.runtime.AlarmHandler,boolean,int) -> <init>
    void <init>(com.google.appinventor.components.runtime.AlarmHandler,boolean,int,android.os.Handler) -> <init>
    int Interval() -> Interval
    void Interval(int) -> Interval
    boolean Enabled() -> Enabled
    void Enabled(boolean) -> Enabled
    void run() -> run
com.google.appinventor.components.runtime.util.TypeUtil -> com.google.appinventor.components.runtime.util.TypeUtil:
    void <init>() -> <init>
    java.lang.Object cast(java.lang.Object,java.lang.Class,java.lang.String) -> cast
    java.lang.Object castNotNull(java.lang.Object,java.lang.Class,java.lang.String) -> castNotNull
com.google.appinventor.components.runtime.util.ViewUtil -> com.google.appinventor.components.runtime.util.ViewUtil:
    void <init>() -> <init>
    int calculatePixels(android.view.View,int) -> b
    void setChildWidthForHorizontalLayout(android.view.View,int) -> setChildWidthForHorizontalLayout
    void setChildHeightForHorizontalLayout(android.view.View,int) -> setChildHeightForHorizontalLayout
    void setChildWidthForVerticalLayout(android.view.View,int) -> setChildWidthForVerticalLayout
    void setChildHeightForVerticalLayout(android.view.View,int) -> setChildHeightForVerticalLayout
    void setChildWidthForTableLayout(android.view.View,int) -> setChildWidthForTableLayout
    void setChildHeightForTableLayout(android.view.View,int) -> setChildHeightForTableLayout
    void setBackgroundImage(android.view.View,android.graphics.drawable.Drawable) -> setBackgroundImage
    void setImage(android.widget.ImageView,android.graphics.drawable.Drawable) -> setImage
    void setBackgroundDrawable(android.view.View,android.graphics.drawable.Drawable) -> setBackgroundDrawable
com.google.appinventor.components.runtime.util.WebRTCNativeMgr -> com.google.appinventor.components.runtime.util.WebRTCNativeMgr:
    java.nio.charset.CharsetDecoder utf8Decoder -> a
    com.google.appinventor.components.runtime.ReplForm form -> f
    org.webrtc.PeerConnection peerConnection -> a
    java.util.TreeSet seenNonces -> a
    boolean haveOffer -> bM
    java.lang.String rCode -> di
    boolean keepPolling -> bN
    boolean haveLocalDescription -> bO
    boolean first -> bP
    java.util.Random random -> b
    org.webrtc.DataChannel dataChannel -> a
    java.lang.String rendezvousServer -> dj
    java.lang.String rendezvousServer2 -> dk
    java.util.List iceServers -> u
    java.util.Timer timer -> a
    org.webrtc.SdpObserver sdpObserver -> a
    org.webrtc.PeerConnection$Observer observer -> a
    org.webrtc.DataChannel$Observer dataObserver -> a
    void <init>(java.lang.String,java.lang.String) -> <init>
    void initiate(com.google.appinventor.components.runtime.ReplForm,android.content.Context,java.lang.String) -> initiate
    void Poller() -> af
    void sendRendezvous(org.json.JSONObject) -> a
    void send(java.lang.String) -> send
    org.webrtc.PeerConnection access$000(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> a
    boolean access$102(com.google.appinventor.components.runtime.util.WebRTCNativeMgr,boolean) -> a
    void access$200(com.google.appinventor.components.runtime.util.WebRTCNativeMgr,org.json.JSONObject) -> a
    org.webrtc.DataChannel access$302(com.google.appinventor.components.runtime.util.WebRTCNativeMgr,org.webrtc.DataChannel) -> a
    boolean access$402(com.google.appinventor.components.runtime.util.WebRTCNativeMgr,boolean) -> b
    java.util.TreeSet access$500(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> a
    java.util.Random access$600(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> a
    java.nio.charset.CharsetDecoder access$700() -> a
    com.google.appinventor.components.runtime.ReplForm access$800(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> a
    void access$900(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> a
    boolean access$1000(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> a
    java.lang.String access$1100(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> a
    boolean access$1002(com.google.appinventor.components.runtime.util.WebRTCNativeMgr,boolean) -> c
    java.lang.String access$1200(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> b
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.WebRTCNativeMgr$1 -> com.google.appinventor.components.runtime.util.ah:
    com.google.appinventor.components.runtime.util.WebRTCNativeMgr this$0 -> b
    void <init>(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> <init>
    void onCreateFailure(java.lang.String) -> onCreateFailure
    void onCreateSuccess(org.webrtc.SessionDescription) -> onCreateSuccess
    void onSetFailure(java.lang.String) -> onSetFailure
    void onSetSuccess() -> onSetSuccess
com.google.appinventor.components.runtime.util.WebRTCNativeMgr$2 -> com.google.appinventor.components.runtime.util.ai:
    com.google.appinventor.components.runtime.util.WebRTCNativeMgr this$0 -> c
    void <init>(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> <init>
    void onAddStream(org.webrtc.MediaStream) -> onAddStream
    void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[]) -> onAddTrack
    void onDataChannel(org.webrtc.DataChannel) -> onDataChannel
    void onIceCandidate(org.webrtc.IceCandidate) -> onIceCandidate
    void onIceCandidatesRemoved(org.webrtc.IceCandidate[]) -> onIceCandidatesRemoved
    void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState) -> onIceConnectionChange
    void onIceConnectionReceivingChange(boolean) -> onIceConnectionReceivingChange
    void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState) -> onIceGatheringChange
    void onRemoveStream(org.webrtc.MediaStream) -> onRemoveStream
    void onRenegotiationNeeded() -> onRenegotiationNeeded
    void onSignalingChange(org.webrtc.PeerConnection$SignalingState) -> onSignalingChange
com.google.appinventor.components.runtime.util.WebRTCNativeMgr$3 -> com.google.appinventor.components.runtime.util.aj:
    com.google.appinventor.components.runtime.util.WebRTCNativeMgr this$0 -> d
    void <init>(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> <init>
    void onBufferedAmountChange(long) -> onBufferedAmountChange
    void onMessage(org.webrtc.DataChannel$Buffer) -> onMessage
    void onStateChange() -> onStateChange
com.google.appinventor.components.runtime.util.WebRTCNativeMgr$4 -> com.google.appinventor.components.runtime.util.ak:
    com.google.appinventor.components.runtime.util.WebRTCNativeMgr this$0 -> e
    void <init>(com.google.appinventor.components.runtime.util.WebRTCNativeMgr) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.WebRTCNativeMgr$5 -> com.google.appinventor.components.runtime.util.al:
    org.json.JSONObject val$data -> a
    com.google.appinventor.components.runtime.util.WebRTCNativeMgr this$0 -> f
    void <init>(com.google.appinventor.components.runtime.util.WebRTCNativeMgr,org.json.JSONObject) -> <init>
    void run() -> run
com.google.appinventor.components.runtime.util.WebServiceUtil -> com.google.appinventor.components.runtime.util.WebServiceUtil:
    void <init>() -> <init>
    void postCommandReturningArray(java.lang.String,java.lang.String,java.util.List,com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> postCommandReturningArray
    void postCommandReturningObject(java.lang.String,java.lang.String,java.util.List,com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> postCommandReturningObject
    void postCommand(java.lang.String,java.lang.String,java.util.List,com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> postCommand
com.google.appinventor.components.runtime.util.WebServiceUtil$1 -> com.google.appinventor.components.runtime.util.am:
    com.google.appinventor.components.runtime.util.AsyncCallbackPair val$callback -> b
    void <init>(com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> <init>
    void onSuccess(java.lang.String) -> p
    void onFailure(java.lang.String) -> onFailure
    void onSuccess(java.lang.Object) -> onSuccess
com.google.appinventor.components.runtime.util.WebServiceUtil$2 -> com.google.appinventor.components.runtime.util.an:
    com.google.appinventor.components.runtime.util.AsyncCallbackPair val$callback -> c
    com.google.appinventor.components.runtime.util.WebServiceUtil this$0 -> a
    void <init>(com.google.appinventor.components.runtime.util.WebServiceUtil,com.google.appinventor.components.runtime.util.AsyncCallbackPair) -> <init>
    void onSuccess(java.lang.String) -> p
    void onFailure(java.lang.String) -> onFailure
    void onSuccess(java.lang.Object) -> onSuccess
com.google.appinventor.components.runtime.util.XmlParser -> com.google.appinventor.components.runtime.util.XmlParser:
    com.google.appinventor.components.runtime.util.YailDictionary root -> c
    com.google.appinventor.components.runtime.util.YailDictionary currentElement -> d
    java.util.Deque stack -> a
    void <init>() -> <init>
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void characters(char[],int,int) -> characters
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    com.google.appinventor.components.runtime.util.YailDictionary getRoot() -> getRoot
com.google.appinventor.components.runtime.util.YailConstants -> com.google.appinventor.components.runtime.util.YailConstants:
    gnu.mapping.SimpleSymbol YAIL_HEADER -> YAIL_HEADER
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.YailDictionary -> com.google.appinventor.components.runtime.util.YailDictionary:
    java.lang.Object ALL -> ALL
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    com.google.appinventor.components.runtime.util.YailDictionary makeDictionary() -> makeDictionary
    com.google.appinventor.components.runtime.util.YailDictionary makeDictionary(java.util.Map) -> makeDictionary
    com.google.appinventor.components.runtime.util.YailDictionary makeDictionary(java.lang.Object[]) -> makeDictionary
    com.google.appinventor.components.runtime.util.YailDictionary makeDictionary(java.util.List) -> makeDictionary
    java.lang.Boolean isAlist(com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.util.YailDictionary alistToDict(com.google.appinventor.components.runtime.util.YailList) -> alistToDict
    com.google.appinventor.components.runtime.util.YailList checkList(com.google.appinventor.components.runtime.util.YailList) -> a
    com.google.appinventor.components.runtime.util.YailList dictToAlist(com.google.appinventor.components.runtime.util.YailDictionary) -> dictToAlist
    void setPair(com.google.appinventor.components.runtime.util.YailList) -> setPair
    java.lang.Object getFromList(java.util.List,java.lang.Object) -> a
    java.lang.Object getObjectAtKeyPath(java.util.List) -> getObjectAtKeyPath
    java.util.Collection allOf(java.util.Map) -> a
    java.util.Collection allOf(java.util.List) -> a
    java.util.Collection allOf(java.lang.Object) -> a
    java.lang.Object alistLookup(com.google.appinventor.components.runtime.util.YailList,java.lang.Object) -> a
    java.util.List walkKeyPath(java.lang.Object,java.util.List,java.util.List) -> a
    java.util.List walkKeyPath(com.google.appinventor.components.runtime.util.YailObject,java.util.List) -> walkKeyPath
    int keyToIndex(java.util.List,java.lang.Object) -> a
    java.lang.Object lookupTargetForKey(java.lang.Object,java.lang.Object) -> a
    void setValueForKeyPath(java.util.List,java.lang.Object) -> setValueForKeyPath
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.String toString() -> toString
    java.lang.Object getObject(int) -> getObject
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.YailDictionary$1 -> com.google.appinventor.components.runtime.util.ao:
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.google.appinventor.components.runtime.util.YailDictionary$DictIterator -> com.google.appinventor.components.runtime.util.ap:
    java.util.Iterator it -> b
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    com.google.appinventor.components.runtime.util.YailList next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.google.appinventor.components.runtime.util.YailList -> com.google.appinventor.components.runtime.util.YailList:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    com.google.appinventor.components.runtime.util.YailList makeEmptyList() -> makeEmptyList
    com.google.appinventor.components.runtime.util.YailList makeList(java.lang.Object[]) -> makeList
    com.google.appinventor.components.runtime.util.YailList makeList(java.util.List) -> makeList
    com.google.appinventor.components.runtime.util.YailList makeList(java.util.Collection) -> makeList
    com.google.appinventor.components.runtime.util.YailList makeList(java.util.Set) -> makeList
    java.lang.Object[] toArray() -> toArray
    java.lang.String[] toStringArray() -> toStringArray
    java.lang.String YailListElementToString(java.lang.Object) -> YailListElementToString
    java.lang.String toJSONString() -> toJSONString
    int size() -> size
    java.lang.String toString() -> toString
    java.lang.String getString(int) -> getString
    java.lang.Object getObject(int) -> getObject
com.google.appinventor.components.runtime.util.YailNumberToString -> com.google.appinventor.components.runtime.util.YailNumberToString:
    java.util.Locale locale -> b
    java.text.DecimalFormatSymbols symbols -> a
    java.text.DecimalFormat decimalFormat -> a
    java.text.DecimalFormat sciFormat -> b
    void <init>() -> <init>
    java.lang.String format(double) -> format
    void <clinit>() -> <clinit>
com.google.appinventor.components.runtime.util.YailObject -> com.google.appinventor.components.runtime.util.YailObject:
    java.lang.Object getObject(int) -> getObject
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
com.google.appinventor.components.runtime.util.theme.ClassicThemeHelper -> com.google.appinventor.components.runtime.util.theme.ClassicThemeHelper:
    void <init>() -> <init>
    void requestActionBar() -> requestActionBar
    boolean setActionBarVisible(boolean) -> setActionBarVisible
    boolean hasActionBar() -> hasActionBar
    void setTitle(java.lang.String) -> setTitle
    void setActionBarAnimation(boolean) -> setActionBarAnimation
    void setTitle(java.lang.String,boolean) -> setTitle
com.google.appinventor.components.runtime.util.theme.HoneycombThemeHelper -> com.google.appinventor.components.runtime.util.theme.HoneycombThemeHelper:
    com.google.appinventor.components.runtime.AppInventorCompatActivity activity -> a
    void <init>(com.google.appinventor.components.runtime.AppInventorCompatActivity) -> <init>
    void requestActionBar() -> requestActionBar
    boolean setActionBarVisible(boolean) -> setActionBarVisible
    boolean hasActionBar() -> hasActionBar
    void setTitle(java.lang.String) -> setTitle
    void setActionBarAnimation(boolean) -> setActionBarAnimation
    void setTitle(java.lang.String,boolean) -> setTitle
com.google.appinventor.components.runtime.util.theme.IceCreamSandwichThemeHelper -> com.google.appinventor.components.runtime.util.theme.IceCreamSandwichThemeHelper:
    com.google.appinventor.components.runtime.AppInventorCompatActivity activity -> b
    void <init>(com.google.appinventor.components.runtime.AppInventorCompatActivity) -> <init>
    void requestActionBar() -> requestActionBar
    boolean setActionBarVisible(boolean) -> setActionBarVisible
    boolean hasActionBar() -> hasActionBar
    void setTitle(java.lang.String) -> setTitle
    void setActionBarAnimation(boolean) -> setActionBarAnimation
    void setTitle(java.lang.String,boolean) -> setTitle
com.google.appinventor.components.runtime.util.theme.ThemeHelper -> com.google.appinventor.components.runtime.util.theme.ThemeHelper:
    void requestActionBar() -> requestActionBar
    boolean setActionBarVisible(boolean) -> setActionBarVisible
    boolean hasActionBar() -> hasActionBar
    void setTitle(java.lang.String) -> setTitle
    void setActionBarAnimation(boolean) -> setActionBarAnimation
    void setTitle(java.lang.String,boolean) -> setTitle
com.google.appinventor.components.runtime.view.ZoomControlView -> com.google.appinventor.components.runtime.view.ZoomControlView:
    org.osmdroid.views.MapView parent -> a
    android.widget.Button zoomIn -> b
    android.widget.Button zoomOut -> c
    float density -> F
    void <init>(org.osmdroid.views.MapView) -> <init>
    void updateButtons() -> updateButtons
    void initButton(android.widget.Button,java.lang.String) -> a
    android.graphics.drawable.Drawable getZoomInDrawable(float) -> a
    android.graphics.drawable.Drawable getZoomOutDrawable(float) -> b
    org.osmdroid.views.MapView access$000(com.google.appinventor.components.runtime.view.ZoomControlView) -> a
com.google.appinventor.components.runtime.view.ZoomControlView$1 -> com.google.appinventor.components.runtime.view.a:
    com.google.appinventor.components.runtime.view.ZoomControlView this$0 -> a
    void <init>(com.google.appinventor.components.runtime.view.ZoomControlView) -> <init>
    void onClick(android.view.View) -> onClick
com.google.appinventor.components.runtime.view.ZoomControlView$2 -> com.google.appinventor.components.runtime.view.b:
    com.google.appinventor.components.runtime.view.ZoomControlView this$0 -> b
    void <init>(com.google.appinventor.components.runtime.view.ZoomControlView) -> <init>
    void onClick(android.view.View) -> onClick
net.lingala.zip4j.ZipFile -> net.lingala.zip4j.ZipFile:
    java.io.File zipFile -> zipFile
    net.lingala.zip4j.model.ZipModel zipModel -> a
    boolean isEncrypted -> bQ
    net.lingala.zip4j.progress.ProgressMonitor progressMonitor -> a
    boolean runInThread -> bR
    char[] password -> b
    net.lingala.zip4j.headers.HeaderWriter headerWriter -> a
    java.nio.charset.Charset charset -> a
    java.util.concurrent.ThreadFactory threadFactory -> a
    java.util.concurrent.ExecutorService executorService -> b
    int bufferSize -> ci
    java.util.List openInputStreams -> v
    boolean useUtf8CharsetForPasswords -> bS
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,char[]) -> <init>
    void <init>(java.io.File) -> <init>
    void <init>(java.io.File,char[]) -> <init>
    void createSplitZipFile(java.util.List,net.lingala.zip4j.model.ZipParameters,boolean,long) -> createSplitZipFile
    void createSplitZipFileFromFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean,long) -> createSplitZipFileFromFolder
    void addFile(java.lang.String) -> addFile
    void addFile(java.lang.String,net.lingala.zip4j.model.ZipParameters) -> addFile
    void addFile(java.io.File) -> addFile
    void addFile(java.io.File,net.lingala.zip4j.model.ZipParameters) -> addFile
    void addFiles(java.util.List) -> addFiles
    void addFiles(java.util.List,net.lingala.zip4j.model.ZipParameters) -> addFiles
    void addFolder(java.io.File) -> addFolder
    void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters) -> addFolder
    void addFolder(java.io.File,net.lingala.zip4j.model.ZipParameters,boolean) -> a
    void addStream(java.io.InputStream,net.lingala.zip4j.model.ZipParameters) -> addStream
    void extractAll(java.lang.String) -> extractAll
    void extractAll(java.lang.String,net.lingala.zip4j.model.UnzipParameters) -> extractAll
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String) -> extractFile
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String,net.lingala.zip4j.model.UnzipParameters) -> extractFile
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String,java.lang.String,net.lingala.zip4j.model.UnzipParameters) -> extractFile
    void extractFile(java.lang.String,java.lang.String) -> extractFile
    void extractFile(java.lang.String,java.lang.String,net.lingala.zip4j.model.UnzipParameters) -> extractFile
    void extractFile(java.lang.String,java.lang.String,java.lang.String) -> extractFile
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String,java.lang.String) -> extractFile
    void extractFile(java.lang.String,java.lang.String,java.lang.String,net.lingala.zip4j.model.UnzipParameters) -> extractFile
    java.util.List getFileHeaders() -> getFileHeaders
    net.lingala.zip4j.model.FileHeader getFileHeader(java.lang.String) -> getFileHeader
    boolean isEncrypted() -> isEncrypted
    boolean isSplitArchive() -> isSplitArchive
    void removeFile(net.lingala.zip4j.model.FileHeader) -> removeFile
    void removeFile(java.lang.String) -> removeFile
    void removeFiles(java.util.List) -> removeFiles
    void renameFile(net.lingala.zip4j.model.FileHeader,java.lang.String) -> renameFile
    void renameFile(java.lang.String,java.lang.String) -> renameFile
    void renameFiles(java.util.Map) -> renameFiles
    void mergeSplitFiles(java.io.File) -> mergeSplitFiles
    void setComment(java.lang.String) -> setComment
    java.lang.String getComment() -> getComment
    net.lingala.zip4j.io.inputstream.ZipInputStream getInputStream(net.lingala.zip4j.model.FileHeader) -> getInputStream
    boolean isValidZipFile() -> isValidZipFile
    java.util.List getSplitZipFiles() -> getSplitZipFiles
    void close() -> close
    void setPassword(char[]) -> setPassword
    int getBufferSize() -> getBufferSize
    void setBufferSize(int) -> setBufferSize
    void readZipInfo() -> ag
    void createNewZipModel() -> ah
    java.io.RandomAccessFile initializeRandomAccessFileForHeaderReading() -> a
    net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters buildAsyncParameters() -> a
    boolean verifyAllSplitFilesOfZipExists(java.util.List) -> b
    net.lingala.zip4j.progress.ProgressMonitor getProgressMonitor() -> getProgressMonitor
    boolean isRunInThread() -> isRunInThread
    void setRunInThread(boolean) -> setRunInThread
    java.io.File getFile() -> getFile
    java.nio.charset.Charset getCharset() -> getCharset
    void setCharset(java.nio.charset.Charset) -> setCharset
    void setThreadFactory(java.util.concurrent.ThreadFactory) -> setThreadFactory
    java.util.concurrent.ExecutorService getExecutorService() -> getExecutorService
    java.lang.String toString() -> toString
    net.lingala.zip4j.model.Zip4jConfig buildConfig() -> a
    boolean isUseUtf8CharsetForPasswords() -> isUseUtf8CharsetForPasswords
    void setUseUtf8CharsetForPasswords(boolean) -> setUseUtf8CharsetForPasswords
net.lingala.zip4j.crypto.AESDecrypter -> net.lingala.zip4j.crypto.AESDecrypter:
    net.lingala.zip4j.crypto.engine.AESEngine aesEngine -> a
    net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF mac -> a
    int nonce -> cj
    byte[] iv -> c
    byte[] counterBlock -> d
    void <init>(net.lingala.zip4j.model.AESExtraDataRecord,char[],byte[],byte[],boolean) -> <init>
    void init(byte[],byte[],char[],net.lingala.zip4j.model.AESExtraDataRecord,boolean) -> a
    int decryptData(byte[],int,int) -> decryptData
    byte[] getCalculatedAuthenticationBytes(int) -> getCalculatedAuthenticationBytes
net.lingala.zip4j.crypto.AESEncrypter -> net.lingala.zip4j.crypto.AESEncrypter:
    net.lingala.zip4j.crypto.engine.AESEngine aesEngine -> a
    net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF mac -> a
    java.security.SecureRandom random -> a
    boolean finished -> bL
    int nonce -> cj
    int loopCount -> ck
    byte[] iv -> e
    byte[] counterBlock -> f
    byte[] derivedPasswordVerifier -> g
    byte[] saltBytes -> h
    void <init>(char[],net.lingala.zip4j.model.enums.AesKeyStrength,boolean) -> <init>
    void init(char[],net.lingala.zip4j.model.enums.AesKeyStrength,boolean) -> a
    int encryptData(byte[]) -> encryptData
    int encryptData(byte[],int,int) -> encryptData
    byte[] generateSalt(int) -> a
    byte[] getFinalMac() -> getFinalMac
    byte[] getDerivedPasswordVerifier() -> getDerivedPasswordVerifier
    byte[] getSaltBytes() -> getSaltBytes
net.lingala.zip4j.crypto.AesCipherUtil -> net.lingala.zip4j.crypto.AesCipherUtil:
    void <init>() -> <init>
    byte[] derivePasswordBasedKey(byte[],char[],net.lingala.zip4j.model.enums.AesKeyStrength,boolean) -> derivePasswordBasedKey
    byte[] derivePasswordVerifier(byte[],net.lingala.zip4j.model.enums.AesKeyStrength) -> derivePasswordVerifier
    net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF getMacBasedPRF(byte[],net.lingala.zip4j.model.enums.AesKeyStrength) -> getMacBasedPRF
    net.lingala.zip4j.crypto.engine.AESEngine getAESEngine(byte[],net.lingala.zip4j.model.enums.AesKeyStrength) -> getAESEngine
    void prepareBuffAESIVBytes(byte[],int) -> prepareBuffAESIVBytes
net.lingala.zip4j.crypto.Decrypter -> net.lingala.zip4j.crypto.Decrypter:
    int decryptData(byte[],int,int) -> decryptData
net.lingala.zip4j.crypto.Encrypter -> net.lingala.zip4j.crypto.Encrypter:
    int encryptData(byte[]) -> encryptData
    int encryptData(byte[],int,int) -> encryptData
net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF -> net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF:
    javax.crypto.Mac mac -> a
    int hLen -> cl
    java.lang.String macAlgorithm -> dl
    java.io.ByteArrayOutputStream macCache -> a
    void <init>(java.lang.String) -> <init>
    byte[] doFinal(byte[]) -> doFinal
    byte[] doFinal() -> doFinal
    byte[] doFinal(int) -> doFinal
    int getHLen() -> getHLen
    void init(byte[]) -> init
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    void doMacUpdate(int) -> d
net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine -> net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine:
    net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters parameters -> a
    net.lingala.zip4j.crypto.PBKDF2.PRF prf -> a
    void <init>(net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters) -> <init>
    void <init>(net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters,net.lingala.zip4j.crypto.PBKDF2.PRF) -> <init>
    byte[] deriveKey(char[],int,boolean) -> deriveKey
    void assertPRF(byte[]) -> a
    byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int) -> a
    int ceil(int,int) -> d
    void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int) -> a
    void xor(byte[],byte[]) -> a
    void INT(byte[],int,int) -> INT
    net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters getParameters() -> getParameters
    void setParameters(net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters) -> setParameters
    void setPseudoRandomFunction(net.lingala.zip4j.crypto.PBKDF2.PRF) -> setPseudoRandomFunction
net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters -> net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters:
    byte[] salt -> salt
    int iterationCount -> iterationCount
    java.lang.String hashAlgorithm -> hashAlgorithm
    java.lang.String hashCharset -> hashCharset
    byte[] derivedKey -> derivedKey
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,byte[],int) -> <init>
    void <init>(java.lang.String,java.lang.String,byte[],int,byte[]) -> <init>
    int getIterationCount() -> getIterationCount
    void setIterationCount(int) -> setIterationCount
    byte[] getSalt() -> getSalt
    void setSalt(byte[]) -> setSalt
    byte[] getDerivedKey() -> getDerivedKey
    void setDerivedKey(byte[]) -> setDerivedKey
    java.lang.String getHashAlgorithm() -> getHashAlgorithm
    void setHashAlgorithm(java.lang.String) -> setHashAlgorithm
    java.lang.String getHashCharset() -> getHashCharset
    void setHashCharset(java.lang.String) -> setHashCharset
net.lingala.zip4j.crypto.PBKDF2.PRF -> net.lingala.zip4j.crypto.PBKDF2.a:
    void init(byte[]) -> init
    byte[] doFinal(byte[]) -> doFinal
    int getHLen() -> getHLen
net.lingala.zip4j.crypto.StandardDecrypter -> net.lingala.zip4j.crypto.StandardDecrypter:
    net.lingala.zip4j.crypto.engine.ZipCryptoEngine zipCryptoEngine -> a
    void <init>(char[],long,long,byte[],boolean) -> <init>
    int decryptData(byte[],int,int) -> decryptData
    void init(byte[],char[],long,long,boolean) -> a
net.lingala.zip4j.crypto.StandardEncrypter -> net.lingala.zip4j.crypto.StandardEncrypter:
    net.lingala.zip4j.crypto.engine.ZipCryptoEngine zipCryptoEngine -> b
    byte[] headerBytes -> i
    void <init>(char[],long,boolean) -> <init>
    void init(char[],long,boolean) -> a
    int encryptData(byte[]) -> encryptData
    int encryptData(byte[],int,int) -> encryptData
    byte encryptByte(byte) -> encryptByte
    byte[] generateRandomBytes() -> generateRandomBytes
    byte[] getHeaderBytes() -> getHeaderBytes
net.lingala.zip4j.crypto.engine.AESEngine -> net.lingala.zip4j.crypto.engine.AESEngine:
    int rounds -> cm
    int[][] workingKey -> a
    int C0 -> cn
    int C1 -> co
    int C2 -> cp
    int C3 -> cq
    byte[] S -> j
    int[] rcon -> d
    int[] T0 -> e
    void <init>(byte[]) -> <init>
    void init(byte[]) -> init
    int[][] generateWorkingKey(byte[]) -> a
    int processBlock(byte[],byte[]) -> processBlock
    int processBlock(byte[],int,byte[],int) -> processBlock
    void stateIn(byte[],int) -> a
    void stateOut(byte[],int) -> b
    void encryptBlock(int[][]) -> a
    int shift(int,int) -> e
    int subWord(int) -> h
    void <clinit>() -> <clinit>
net.lingala.zip4j.crypto.engine.ZipCryptoEngine -> net.lingala.zip4j.crypto.engine.ZipCryptoEngine:
    int[] keys -> f
    int[] CRC_TABLE -> g
    void <init>() -> <init>
    void initKeys(char[],boolean) -> initKeys
    void updateKeys(byte) -> updateKeys
    int crc32(int,byte) -> a
    byte decryptByte() -> decryptByte
    void <clinit>() -> <clinit>
net.lingala.zip4j.exception.ZipException -> net.lingala.zip4j.exception.ZipException:
    net.lingala.zip4j.exception.ZipException$Type type -> a
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Exception) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
    void <init>(java.lang.String,net.lingala.zip4j.exception.ZipException$Type) -> <init>
    void <init>(java.lang.String,java.lang.Throwable,net.lingala.zip4j.exception.ZipException$Type) -> <init>
    net.lingala.zip4j.exception.ZipException$Type getType() -> getType
net.lingala.zip4j.exception.ZipException$Type -> net.lingala.zip4j.exception.ZipException$Type:
    net.lingala.zip4j.exception.ZipException$Type WRONG_PASSWORD -> WRONG_PASSWORD
    net.lingala.zip4j.exception.ZipException$Type TASK_CANCELLED_EXCEPTION -> TASK_CANCELLED_EXCEPTION
    net.lingala.zip4j.exception.ZipException$Type CHECKSUM_MISMATCH -> CHECKSUM_MISMATCH
    net.lingala.zip4j.exception.ZipException$Type UNKNOWN_COMPRESSION_METHOD -> UNKNOWN_COMPRESSION_METHOD
    net.lingala.zip4j.exception.ZipException$Type FILE_NOT_FOUND -> FILE_NOT_FOUND
    net.lingala.zip4j.exception.ZipException$Type UNSUPPORTED_ENCRYPTION -> UNSUPPORTED_ENCRYPTION
    net.lingala.zip4j.exception.ZipException$Type UNKNOWN -> UNKNOWN
    net.lingala.zip4j.exception.ZipException$Type[] $VALUES -> a
    net.lingala.zip4j.exception.ZipException$Type[] values() -> values
    net.lingala.zip4j.exception.ZipException$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
net.lingala.zip4j.headers.FileHeaderFactory -> net.lingala.zip4j.headers.FileHeaderFactory:
    void <init>() -> <init>
    net.lingala.zip4j.model.FileHeader generateFileHeader(net.lingala.zip4j.model.ZipParameters,boolean,int,java.nio.charset.Charset,net.lingala.zip4j.util.RawIO) -> generateFileHeader
    net.lingala.zip4j.model.LocalFileHeader generateLocalFileHeader(net.lingala.zip4j.model.FileHeader) -> generateLocalFileHeader
    byte[] determineGeneralPurposeBitFlag(boolean,net.lingala.zip4j.model.ZipParameters,java.nio.charset.Charset) -> a
    byte generateFirstGeneralPurposeByte(boolean,net.lingala.zip4j.model.ZipParameters) -> a
    java.lang.String validateAndGetFileName(java.lang.String) -> l
    net.lingala.zip4j.model.AESExtraDataRecord generateAESExtraDataRecord(net.lingala.zip4j.model.ZipParameters) -> a
    int determineFileNameLength(java.lang.String,java.nio.charset.Charset) -> a
net.lingala.zip4j.headers.HeaderReader -> net.lingala.zip4j.headers.HeaderReader:
    net.lingala.zip4j.model.ZipModel zipModel -> a
    net.lingala.zip4j.util.RawIO rawIO -> a
    byte[] intBuff -> k
    void <init>() -> <init>
    net.lingala.zip4j.model.ZipModel readAllHeaders(java.io.RandomAccessFile,net.lingala.zip4j.model.Zip4jConfig) -> readAllHeaders
    net.lingala.zip4j.model.EndOfCentralDirectoryRecord readEndOfCentralDirectoryRecord(java.io.RandomAccessFile,net.lingala.zip4j.util.RawIO,net.lingala.zip4j.model.Zip4jConfig) -> a
    net.lingala.zip4j.model.CentralDirectory readCentralDirectory(java.io.RandomAccessFile,net.lingala.zip4j.util.RawIO,java.nio.charset.Charset) -> a
    void readExtraDataRecords(java.io.RandomAccessFile,net.lingala.zip4j.model.FileHeader) -> a
    void readExtraDataRecords(java.io.InputStream,net.lingala.zip4j.model.LocalFileHeader) -> a
    java.util.List readExtraDataRecords(java.io.RandomAccessFile,int) -> a
    java.util.List readExtraDataRecords(java.io.InputStream,int) -> a
    java.util.List parseExtraDataRecords(byte[],int) -> a
    net.lingala.zip4j.model.Zip64EndOfCentralDirectoryLocator readZip64EndOfCentralDirectoryLocator(java.io.RandomAccessFile,net.lingala.zip4j.util.RawIO,long) -> a
    net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord readZip64EndCentralDirRec(java.io.RandomAccessFile,net.lingala.zip4j.util.RawIO) -> a
    void readZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.util.RawIO) -> a
    void readZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader,net.lingala.zip4j.util.RawIO) -> a
    net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.List,net.lingala.zip4j.util.RawIO,long,long,long,int) -> a
    void setFilePointerToReadZip64EndCentralDirLoc(java.io.RandomAccessFile,long) -> a
    net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(java.io.InputStream,java.nio.charset.Charset) -> readLocalFileHeader
    net.lingala.zip4j.model.DataDescriptor readDataDescriptor(java.io.InputStream,boolean) -> readDataDescriptor
    void readAesExtraDataRecord(net.lingala.zip4j.model.AbstractFileHeader,net.lingala.zip4j.util.RawIO) -> a
    net.lingala.zip4j.model.AESExtraDataRecord readAesExtraDataRecord(java.util.List,net.lingala.zip4j.util.RawIO) -> a
    long getNumberOfEntriesInCentralDirectory(net.lingala.zip4j.model.ZipModel) -> a
    long locateOffsetOfEndOfCentralDirectory(java.io.RandomAccessFile) -> a
    long locateOffsetOfEndOfCentralDirectoryByReverseSeek(java.io.RandomAccessFile) -> b
    void seekInCurrentPart(java.io.RandomAccessFile,long) -> b
    java.lang.String readZipComment(java.io.RandomAccessFile,int,java.nio.charset.Charset) -> a
    boolean isDirectory(byte[],java.lang.String) -> isDirectory
net.lingala.zip4j.headers.HeaderSignature -> net.lingala.zip4j.headers.HeaderSignature:
    net.lingala.zip4j.headers.HeaderSignature LOCAL_FILE_HEADER -> LOCAL_FILE_HEADER
    net.lingala.zip4j.headers.HeaderSignature EXTRA_DATA_RECORD -> EXTRA_DATA_RECORD
    net.lingala.zip4j.headers.HeaderSignature CENTRAL_DIRECTORY -> CENTRAL_DIRECTORY
    net.lingala.zip4j.headers.HeaderSignature END_OF_CENTRAL_DIRECTORY -> END_OF_CENTRAL_DIRECTORY
    net.lingala.zip4j.headers.HeaderSignature TEMPORARY_SPANNING_MARKER -> TEMPORARY_SPANNING_MARKER
    net.lingala.zip4j.headers.HeaderSignature DIGITAL_SIGNATURE -> DIGITAL_SIGNATURE
    net.lingala.zip4j.headers.HeaderSignature ARCEXTDATREC -> ARCEXTDATREC
    net.lingala.zip4j.headers.HeaderSignature SPLIT_ZIP -> SPLIT_ZIP
    net.lingala.zip4j.headers.HeaderSignature ZIP64_END_CENTRAL_DIRECTORY_LOCATOR -> ZIP64_END_CENTRAL_DIRECTORY_LOCATOR
    net.lingala.zip4j.headers.HeaderSignature ZIP64_END_CENTRAL_DIRECTORY_RECORD -> ZIP64_END_CENTRAL_DIRECTORY_RECORD
    net.lingala.zip4j.headers.HeaderSignature ZIP64_EXTRA_FIELD_SIGNATURE -> ZIP64_EXTRA_FIELD_SIGNATURE
    net.lingala.zip4j.headers.HeaderSignature AES_EXTRA_DATA_RECORD -> AES_EXTRA_DATA_RECORD
    long value -> m
    net.lingala.zip4j.headers.HeaderSignature[] $VALUES -> a
    net.lingala.zip4j.headers.HeaderSignature[] values() -> values
    net.lingala.zip4j.headers.HeaderSignature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,long) -> <init>
    long getValue() -> getValue
    void <clinit>() -> <clinit>
net.lingala.zip4j.headers.HeaderUtil -> net.lingala.zip4j.headers.HeaderUtil:
    void <init>() -> <init>
    net.lingala.zip4j.model.FileHeader getFileHeader(net.lingala.zip4j.model.ZipModel,java.lang.String) -> getFileHeader
    java.lang.String decodeStringWithCharset(byte[],boolean,java.nio.charset.Charset) -> decodeStringWithCharset
    byte[] getBytesFromString(java.lang.String,java.nio.charset.Charset) -> getBytesFromString
    long getOffsetStartOfCentralDirectory(net.lingala.zip4j.model.ZipModel) -> getOffsetStartOfCentralDirectory
    java.util.List getFileHeadersUnderDirectory(java.util.List,java.lang.String) -> getFileHeadersUnderDirectory
    long getTotalUncompressedSizeOfAllFileHeaders(java.util.List) -> getTotalUncompressedSizeOfAllFileHeaders
    net.lingala.zip4j.model.FileHeader getFileHeaderWithExactMatch(net.lingala.zip4j.model.ZipModel,java.lang.String) -> a
net.lingala.zip4j.headers.HeaderWriter -> net.lingala.zip4j.headers.HeaderWriter:
    net.lingala.zip4j.util.RawIO rawIO -> b
    byte[] longBuff -> l
    byte[] intBuff -> m
    void <init>() -> <init>
    void writeLocalFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream,java.nio.charset.Charset) -> writeLocalFileHeader
    void writeExtendedLocalHeader(net.lingala.zip4j.model.LocalFileHeader,java.io.OutputStream) -> writeExtendedLocalHeader
    void finalizeZipFile(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.nio.charset.Charset) -> finalizeZipFile
    void finalizeZipFileWithoutValidations(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,java.nio.charset.Charset) -> finalizeZipFileWithoutValidations
    void updateLocalFileHeader(net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.io.outputstream.SplitOutputStream) -> updateLocalFileHeader
    void updateFileSizesInLocalFileHeader(net.lingala.zip4j.io.outputstream.SplitOutputStream,net.lingala.zip4j.model.FileHeader) -> a
    boolean isSplitZipFile(java.io.OutputStream) -> a
    int getCurrentSplitFileCounter(java.io.OutputStream) -> a
    void writeZipHeaderBytes(net.lingala.zip4j.model.ZipModel,java.io.OutputStream,byte[],java.nio.charset.Charset) -> a
    void processHeaderData(net.lingala.zip4j.model.ZipModel,java.io.OutputStream) -> a
    void writeCentralDirectory(net.lingala.zip4j.model.ZipModel,java.io.ByteArrayOutputStream,net.lingala.zip4j.util.RawIO,java.nio.charset.Charset) -> a
    void writeFileHeader(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,java.io.ByteArrayOutputStream,net.lingala.zip4j.util.RawIO,java.nio.charset.Charset) -> a
    int calculateExtraDataRecordsSize(net.lingala.zip4j.model.FileHeader,boolean) -> a
    void writeRemainingExtraDataRecordsIfPresent(net.lingala.zip4j.model.FileHeader,java.io.OutputStream) -> a
    void writeZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord,java.io.ByteArrayOutputStream,net.lingala.zip4j.util.RawIO) -> a
    void writeZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.Zip64EndOfCentralDirectoryLocator,java.io.ByteArrayOutputStream,net.lingala.zip4j.util.RawIO) -> a
    void writeEndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,int,long,java.io.ByteArrayOutputStream,net.lingala.zip4j.util.RawIO,java.nio.charset.Charset) -> a
    long countNumberOfFileHeaderEntriesOnDisk(java.util.List,int) -> a
    boolean isZip64Entry(net.lingala.zip4j.model.FileHeader) -> a
    long getOffsetOfCentralDirectory(net.lingala.zip4j.model.ZipModel) -> b
    net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord buildZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.ZipModel,int,long) -> a
net.lingala.zip4j.headers.VersionMadeBy -> net.lingala.zip4j.headers.VersionMadeBy:
    net.lingala.zip4j.headers.VersionMadeBy SPECIFICATION_VERSION -> SPECIFICATION_VERSION
    net.lingala.zip4j.headers.VersionMadeBy WINDOWS -> WINDOWS
    net.lingala.zip4j.headers.VersionMadeBy UNIX -> UNIX
    byte code -> s
    net.lingala.zip4j.headers.VersionMadeBy[] $VALUES -> a
    net.lingala.zip4j.headers.VersionMadeBy[] values() -> values
    net.lingala.zip4j.headers.VersionMadeBy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,byte) -> <init>
    byte getCode() -> getCode
    void <clinit>() -> <clinit>
net.lingala.zip4j.headers.VersionNeededToExtract -> net.lingala.zip4j.headers.VersionNeededToExtract:
    net.lingala.zip4j.headers.VersionNeededToExtract DEFAULT -> DEFAULT
    net.lingala.zip4j.headers.VersionNeededToExtract DEFLATE_COMPRESSED -> DEFLATE_COMPRESSED
    net.lingala.zip4j.headers.VersionNeededToExtract ZIP_64_FORMAT -> ZIP_64_FORMAT
    net.lingala.zip4j.headers.VersionNeededToExtract AES_ENCRYPTED -> AES_ENCRYPTED
    int code -> cr
    net.lingala.zip4j.headers.VersionNeededToExtract[] $VALUES -> a
    net.lingala.zip4j.headers.VersionNeededToExtract[] values() -> values
    net.lingala.zip4j.headers.VersionNeededToExtract valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getCode() -> getCode
    void <clinit>() -> <clinit>
net.lingala.zip4j.io.inputstream.AesCipherInputStream -> net.lingala.zip4j.io.inputstream.a:
    byte[] singleByteBuffer -> n
    byte[] aes16ByteBlock -> o
    int aes16ByteBlockPointer -> cs
    int remainingAes16ByteBlockLength -> ct
    int lengthToRead -> cu
    int offsetWithAesBlock -> cv
    int bytesCopiedInThisIteration -> cw
    int lengthToCopyInThisIteration -> cx
    int aes16ByteBlockReadLength -> cy
    void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[],int,boolean) -> <init>
    net.lingala.zip4j.crypto.AESDecrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[],boolean) -> a
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void copyBytesFromBuffer(byte[],int) -> c
    void endOfEntryReached(java.io.InputStream,int) -> endOfEntryReached
    void verifyContent(byte[],int) -> d
    byte[] readStoredMac(java.io.InputStream) -> a
    byte[] getSalt(net.lingala.zip4j.model.LocalFileHeader) -> a
    byte[] getPasswordVerifier() -> a
    void incrementAesByteBlockPointer(int) -> e
    void decrementRemainingAesBytesLength(int) -> f
    net.lingala.zip4j.crypto.Decrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[],boolean) -> a
net.lingala.zip4j.io.inputstream.CipherInputStream -> net.lingala.zip4j.io.inputstream.b:
    net.lingala.zip4j.io.inputstream.ZipEntryInputStream zipEntryInputStream -> a
    net.lingala.zip4j.crypto.Decrypter decrypter -> a
    byte[] lastReadRawDataCache -> p
    byte[] singleByteBuffer -> n
    net.lingala.zip4j.model.LocalFileHeader localFileHeader -> a
    void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[],int,boolean) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void close() -> close
    byte[] getLastReadRawDataCache() -> getLastReadRawDataCache
    int readRaw(byte[]) -> a
    void cacheRawData(byte[],int) -> e
    net.lingala.zip4j.crypto.Decrypter getDecrypter() -> a
    void endOfEntryReached(java.io.InputStream,int) -> endOfEntryReached
    net.lingala.zip4j.crypto.Decrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[],boolean) -> a
net.lingala.zip4j.io.inputstream.DecompressedInputStream -> net.lingala.zip4j.io.inputstream.c:
    net.lingala.zip4j.io.inputstream.CipherInputStream cipherInputStream -> a
    byte[] oneByteBuffer -> oneByteBuffer
    void <init>(net.lingala.zip4j.io.inputstream.CipherInputStream) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void close() -> close
    void endOfEntryReached(java.io.InputStream,int) -> endOfEntryReached
    int pushBackInputStreamIfNecessary(java.io.PushbackInputStream) -> pushBackInputStreamIfNecessary
    byte[] getLastReadRawDataCache() -> getLastReadRawDataCache
net.lingala.zip4j.io.inputstream.InflaterInputStream -> net.lingala.zip4j.io.inputstream.InflaterInputStream:
    java.util.zip.Inflater inflater -> a
    byte[] buff -> q
    byte[] singleByteBuffer -> n
    int len -> cz
    void <init>(net.lingala.zip4j.io.inputstream.CipherInputStream,int) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void endOfEntryReached(java.io.InputStream,int) -> endOfEntryReached
    int pushBackInputStreamIfNecessary(java.io.PushbackInputStream) -> pushBackInputStreamIfNecessary
    void close() -> close
    void fill() -> aa
net.lingala.zip4j.io.inputstream.NoCipherInputStream -> net.lingala.zip4j.io.inputstream.d:
    void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[],int) -> <init>
    net.lingala.zip4j.io.inputstream.NoCipherInputStream$NoDecrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[],boolean) -> a
    net.lingala.zip4j.crypto.Decrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[],boolean) -> a
net.lingala.zip4j.io.inputstream.NoCipherInputStream$NoDecrypter -> net.lingala.zip4j.io.inputstream.e:
    void <init>() -> <init>
    int decryptData(byte[],int,int) -> decryptData
net.lingala.zip4j.io.inputstream.NumberedSplitFileInputStream -> net.lingala.zip4j.io.inputstream.NumberedSplitFileInputStream:
    java.io.RandomAccessFile randomAccessFile -> randomAccessFile
    void <init>(java.io.File) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void prepareExtractionForFileHeader(net.lingala.zip4j.model.FileHeader) -> prepareExtractionForFileHeader
    void close() -> close
net.lingala.zip4j.io.inputstream.NumberedSplitRandomAccessFile -> net.lingala.zip4j.io.inputstream.NumberedSplitRandomAccessFile:
    long splitLength -> n
    java.io.File[] allSortedSplitFiles -> a
    java.io.RandomAccessFile randomAccessFile -> randomAccessFile
    byte[] singleByteBuffer -> n
    int currentOpenSplitFileCounter -> cA
    java.lang.String rwMode -> dm
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.io.File,java.lang.String) -> <init>
    void <init>(java.io.File,java.lang.String,java.io.File[]) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void seek(long) -> seek
    long getFilePointer() -> getFilePointer
    long length() -> length
    void close() -> close
    void seekInCurrentPart(long) -> seekInCurrentPart
    void openLastSplitFileForReading() -> openLastSplitFileForReading
    void openRandomAccessFileForIndex(int) -> openRandomAccessFileForIndex
    void assertAllSplitFilesExist(java.io.File[]) -> a
net.lingala.zip4j.io.inputstream.SplitFileInputStream -> net.lingala.zip4j.io.inputstream.SplitFileInputStream:
    void <init>() -> <init>
    void prepareExtractionForFileHeader(net.lingala.zip4j.model.FileHeader) -> prepareExtractionForFileHeader
net.lingala.zip4j.io.inputstream.StoreInputStream -> net.lingala.zip4j.io.inputstream.f:
    void <init>(net.lingala.zip4j.io.inputstream.CipherInputStream) -> <init>
net.lingala.zip4j.io.inputstream.ZipEntryInputStream -> net.lingala.zip4j.io.inputstream.g:
    java.io.InputStream inputStream -> a
    long numberOfBytesRead -> o
    byte[] singleByteArray -> r
    long compressedSize -> p
    void <init>(java.io.InputStream,long) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    int readRawFully(byte[]) -> b
    int readUntilBufferIsFull(byte[],int) -> b
    void close() -> close
net.lingala.zip4j.io.inputstream.ZipInputStream -> net.lingala.zip4j.io.inputstream.ZipInputStream:
    java.io.PushbackInputStream inputStream -> a
    net.lingala.zip4j.io.inputstream.DecompressedInputStream decompressedInputStream -> a
    net.lingala.zip4j.headers.HeaderReader headerReader -> a
    char[] password -> b
    net.lingala.zip4j.util.PasswordCallback passwordCallback -> a
    net.lingala.zip4j.model.LocalFileHeader localFileHeader -> a
    java.util.zip.CRC32 crc32 -> a
    byte[] endOfEntryBuffer -> s
    boolean canSkipExtendedLocalFileHeader -> bT
    net.lingala.zip4j.model.Zip4jConfig zip4jConfig -> zip4jConfig
    boolean streamClosed -> bU
    boolean entryEOFReached -> bV
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,java.nio.charset.Charset) -> <init>
    void <init>(java.io.InputStream,char[]) -> <init>
    void <init>(java.io.InputStream,net.lingala.zip4j.util.PasswordCallback) -> <init>
    void <init>(java.io.InputStream,char[],java.nio.charset.Charset) -> <init>
    void <init>(java.io.InputStream,net.lingala.zip4j.util.PasswordCallback,java.nio.charset.Charset) -> <init>
    void <init>(java.io.InputStream,char[],net.lingala.zip4j.model.Zip4jConfig) -> <init>
    void <init>(java.io.InputStream,net.lingala.zip4j.util.PasswordCallback,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    void <init>(java.io.InputStream,char[],net.lingala.zip4j.util.PasswordCallback,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    net.lingala.zip4j.model.LocalFileHeader getNextEntry() -> getNextEntry
    net.lingala.zip4j.model.LocalFileHeader getNextEntry(net.lingala.zip4j.model.FileHeader,boolean) -> getNextEntry
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void close() -> close
    int available() -> available
    void setPassword(char[]) -> setPassword
    void endOfCompressedDataReached() -> ai
    net.lingala.zip4j.io.inputstream.DecompressedInputStream initializeEntryInputStream(net.lingala.zip4j.model.LocalFileHeader) -> a
    net.lingala.zip4j.io.inputstream.CipherInputStream initializeCipherInputStream(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader) -> a
    net.lingala.zip4j.io.inputstream.DecompressedInputStream initializeDecompressorForThisEntry(net.lingala.zip4j.io.inputstream.CipherInputStream,net.lingala.zip4j.model.LocalFileHeader) -> a
    void readExtendedLocalFileHeaderIfPresent() -> aj
    void verifyLocalFileHeader(net.lingala.zip4j.model.LocalFileHeader) -> a
    boolean checkIfZip64ExtraDataRecordPresentInLFH(java.util.List) -> c
    void verifyCrc() -> ak
    void resetFields() -> al
    boolean isEntryDirectory(java.lang.String) -> g
    long getCompressedSize(net.lingala.zip4j.model.LocalFileHeader) -> a
    int getEncryptionHeaderSize(net.lingala.zip4j.model.LocalFileHeader) -> a
    void readUntilEndOfEntry() -> am
    int getAesEncryptionHeaderSize(net.lingala.zip4j.model.AESExtraDataRecord) -> a
    boolean isEncryptionMethodZipStandard(net.lingala.zip4j.model.LocalFileHeader) -> a
    void assertStreamOpen() -> an
net.lingala.zip4j.io.inputstream.ZipStandardCipherInputStream -> net.lingala.zip4j.io.inputstream.h:
    void <init>(net.lingala.zip4j.io.inputstream.ZipEntryInputStream,net.lingala.zip4j.model.LocalFileHeader,char[],int,boolean) -> <init>
    net.lingala.zip4j.crypto.StandardDecrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[],boolean) -> a
    byte[] getStandardDecrypterHeaderBytes() -> b
    net.lingala.zip4j.crypto.Decrypter initializeDecrypter(net.lingala.zip4j.model.LocalFileHeader,char[],boolean) -> a
net.lingala.zip4j.io.inputstream.ZipStandardSplitFileInputStream -> net.lingala.zip4j.io.inputstream.ZipStandardSplitFileInputStream:
    java.io.RandomAccessFile randomAccessFile -> randomAccessFile
    java.io.File zipFile -> zipFile
    int lastSplitZipFileNumber -> cB
    boolean isSplitZipArchive -> bW
    int currentSplitFileCounter -> cC
    byte[] singleByteArray -> r
    void <init>(java.io.File,boolean,int) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void prepareExtractionForFileHeader(net.lingala.zip4j.model.FileHeader) -> prepareExtractionForFileHeader
    void close() -> close
    void openRandomAccessFileForIndex(int) -> openRandomAccessFileForIndex
    java.io.File getNextSplitFile(int) -> getNextSplitFile
net.lingala.zip4j.io.outputstream.AesCipherOutputStream -> net.lingala.zip4j.io.outputstream.a:
    byte[] pendingBuffer -> t
    int pendingBufferLength -> cD
    void <init>(net.lingala.zip4j.io.outputstream.ZipEntryOutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> <init>
    net.lingala.zip4j.crypto.AESEncrypter initializeEncrypter(java.io.OutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> a
    void writeAesEncryptionHeaderData(net.lingala.zip4j.crypto.AESEncrypter) -> a
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void closeEntry() -> ao
    net.lingala.zip4j.crypto.Encrypter initializeEncrypter(java.io.OutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> a
net.lingala.zip4j.io.outputstream.CipherOutputStream -> net.lingala.zip4j.io.outputstream.b:
    net.lingala.zip4j.io.outputstream.ZipEntryOutputStream zipEntryOutputStream -> a
    net.lingala.zip4j.crypto.Encrypter encrypter -> a
    void <init>(net.lingala.zip4j.io.outputstream.ZipEntryOutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeHeaders(byte[]) -> b
    void closeEntry() -> ao
    void close() -> close
    long getNumberOfBytesWrittenForThisEntry() -> a
    net.lingala.zip4j.crypto.Encrypter getEncrypter() -> a
    net.lingala.zip4j.crypto.Encrypter initializeEncrypter(java.io.OutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> a
net.lingala.zip4j.io.outputstream.CompressedOutputStream -> net.lingala.zip4j.io.outputstream.c:
    net.lingala.zip4j.io.outputstream.CipherOutputStream cipherOutputStream -> a
    void <init>(net.lingala.zip4j.io.outputstream.CipherOutputStream) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void closeEntry() -> ao
    void close() -> close
    long getCompressedSize() -> getCompressedSize
net.lingala.zip4j.io.outputstream.CountingOutputStream -> net.lingala.zip4j.io.outputstream.CountingOutputStream:
    java.io.OutputStream outputStream -> a
    long numberOfBytesWritten -> q
    void <init>(java.io.OutputStream) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    int getCurrentSplitFileCounter() -> getCurrentSplitFileCounter
    long getOffsetForNextEntry() -> getOffsetForNextEntry
    long getSplitLength() -> getSplitLength
    boolean isSplitZipFile() -> isSplitZipFile
    long getNumberOfBytesWritten() -> getNumberOfBytesWritten
    boolean checkBuffSizeAndStartNextSplitFile(int) -> checkBuffSizeAndStartNextSplitFile
    long getFilePointer() -> getFilePointer
    void close() -> close
net.lingala.zip4j.io.outputstream.DeflaterOutputStream -> net.lingala.zip4j.io.outputstream.d:
    byte[] buff -> q
    java.util.zip.Deflater deflater -> a
    void <init>(net.lingala.zip4j.io.outputstream.CipherOutputStream,net.lingala.zip4j.model.enums.CompressionLevel,int) -> <init>
    void write(byte[]) -> write
    void write(int) -> write
    void write(byte[],int,int) -> write
    void deflate() -> ap
    void closeEntry() -> ao
net.lingala.zip4j.io.outputstream.NoCipherOutputStream -> net.lingala.zip4j.io.outputstream.e:
    void <init>(net.lingala.zip4j.io.outputstream.ZipEntryOutputStream,net.lingala.zip4j.model.ZipParameters,char[]) -> <init>
    net.lingala.zip4j.io.outputstream.NoCipherOutputStream$NoEncrypter initializeEncrypter(java.io.OutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> a
    net.lingala.zip4j.crypto.Encrypter initializeEncrypter(java.io.OutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> a
net.lingala.zip4j.io.outputstream.NoCipherOutputStream$NoEncrypter -> net.lingala.zip4j.io.outputstream.f:
    void <init>() -> <init>
    int encryptData(byte[]) -> encryptData
    int encryptData(byte[],int,int) -> encryptData
net.lingala.zip4j.io.outputstream.OutputStreamWithSplitZipSupport -> net.lingala.zip4j.io.outputstream.OutputStreamWithSplitZipSupport:
    long getFilePointer() -> getFilePointer
    int getCurrentSplitFileCounter() -> getCurrentSplitFileCounter
net.lingala.zip4j.io.outputstream.SplitOutputStream -> net.lingala.zip4j.io.outputstream.SplitOutputStream:
    java.io.RandomAccessFile raf -> a
    long splitLength -> n
    java.io.File zipFile -> zipFile
    int currSplitFileCounter -> cE
    long bytesWrittenForThisPart -> r
    net.lingala.zip4j.util.RawIO rawIO -> a
    void <init>(java.io.File) -> <init>
    void <init>(java.io.File,long) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void startNextSplitFile() -> aq
    boolean isHeaderData(byte[]) -> a
    boolean checkBufferSizeAndStartNextSplitFile(int) -> checkBufferSizeAndStartNextSplitFile
    boolean isBufferSizeFitForCurrSplitFile(int) -> g
    void seek(long) -> seek
    int skipBytes(int) -> skipBytes
    void close() -> close
    long getFilePointer() -> getFilePointer
    boolean isSplitZipFile() -> isSplitZipFile
    long getSplitLength() -> getSplitLength
    int getCurrentSplitFileCounter() -> getCurrentSplitFileCounter
net.lingala.zip4j.io.outputstream.StoreOutputStream -> net.lingala.zip4j.io.outputstream.g:
    void <init>(net.lingala.zip4j.io.outputstream.CipherOutputStream) -> <init>
net.lingala.zip4j.io.outputstream.ZipEntryOutputStream -> net.lingala.zip4j.io.outputstream.h:
    long numberOfBytesWrittenForThisEntry -> s
    java.io.OutputStream outputStream -> a
    boolean entryClosed -> bX
    void <init>(java.io.OutputStream) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void closeEntry() -> ao
    long getNumberOfBytesWrittenForThisEntry() -> a
    void close() -> close
net.lingala.zip4j.io.outputstream.ZipOutputStream -> net.lingala.zip4j.io.outputstream.ZipOutputStream:
    net.lingala.zip4j.io.outputstream.CountingOutputStream countingOutputStream -> a
    char[] password -> b
    net.lingala.zip4j.model.ZipModel zipModel -> a
    net.lingala.zip4j.io.outputstream.CompressedOutputStream compressedOutputStream -> a
    net.lingala.zip4j.model.FileHeader fileHeader -> a
    net.lingala.zip4j.model.LocalFileHeader localFileHeader -> a
    net.lingala.zip4j.headers.FileHeaderFactory fileHeaderFactory -> a
    net.lingala.zip4j.headers.HeaderWriter headerWriter -> a
    java.util.zip.CRC32 crc32 -> a
    net.lingala.zip4j.util.RawIO rawIO -> a
    long uncompressedSizeForThisEntry -> t
    net.lingala.zip4j.model.Zip4jConfig zip4jConfig -> zip4jConfig
    boolean streamClosed -> bU
    boolean entryClosed -> bX
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,java.nio.charset.Charset) -> <init>
    void <init>(java.io.OutputStream,char[]) -> <init>
    void <init>(java.io.OutputStream,char[],java.nio.charset.Charset) -> <init>
    void <init>(java.io.OutputStream,char[],net.lingala.zip4j.model.Zip4jConfig,net.lingala.zip4j.model.ZipModel) -> <init>
    void putNextEntry(net.lingala.zip4j.model.ZipParameters) -> putNextEntry
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    net.lingala.zip4j.model.FileHeader closeEntry() -> closeEntry
    void close() -> close
    void setComment(java.lang.String) -> setComment
    void ensureStreamOpen() -> ar
    net.lingala.zip4j.model.ZipModel initializeZipModel(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.io.outputstream.CountingOutputStream) -> a
    void initializeAndWriteFileHeader(net.lingala.zip4j.model.ZipParameters) -> a
    void reset() -> as
    void writeSplitZipHeaderIfApplicable() -> at
    net.lingala.zip4j.io.outputstream.CompressedOutputStream initializeCompressedOutputStream(net.lingala.zip4j.model.ZipParameters) -> a
    net.lingala.zip4j.io.outputstream.CipherOutputStream initializeCipherOutputStream(net.lingala.zip4j.io.outputstream.ZipEntryOutputStream,net.lingala.zip4j.model.ZipParameters) -> a
    net.lingala.zip4j.io.outputstream.CompressedOutputStream initializeCompressedOutputStream(net.lingala.zip4j.io.outputstream.CipherOutputStream,net.lingala.zip4j.model.ZipParameters) -> a
    void verifyZipParameters(net.lingala.zip4j.model.ZipParameters) -> b
    boolean writeCrc(net.lingala.zip4j.model.FileHeader) -> b
    net.lingala.zip4j.model.ZipParameters cloneAndPrepareZipParameters(net.lingala.zip4j.model.ZipParameters) -> a
net.lingala.zip4j.io.outputstream.ZipStandardCipherOutputStream -> net.lingala.zip4j.io.outputstream.i:
    void <init>(net.lingala.zip4j.io.outputstream.ZipEntryOutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> <init>
    net.lingala.zip4j.crypto.StandardEncrypter initializeEncrypter(java.io.OutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> a
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    long getEncryptionKey(net.lingala.zip4j.model.ZipParameters) -> a
    net.lingala.zip4j.crypto.Encrypter initializeEncrypter(java.io.OutputStream,net.lingala.zip4j.model.ZipParameters,char[],boolean) -> a
net.lingala.zip4j.model.AESExtraDataRecord -> net.lingala.zip4j.model.AESExtraDataRecord:
    int dataSize -> cF
    net.lingala.zip4j.model.enums.AesVersion aesVersion -> a
    java.lang.String vendorID -> dn
    net.lingala.zip4j.model.enums.AesKeyStrength aesKeyStrength -> a
    net.lingala.zip4j.model.enums.CompressionMethod compressionMethod -> a
    void <init>() -> <init>
    int getDataSize() -> getDataSize
    void setDataSize(int) -> setDataSize
    net.lingala.zip4j.model.enums.AesVersion getAesVersion() -> getAesVersion
    void setAesVersion(net.lingala.zip4j.model.enums.AesVersion) -> setAesVersion
    java.lang.String getVendorID() -> getVendorID
    void setVendorID(java.lang.String) -> setVendorID
    net.lingala.zip4j.model.enums.AesKeyStrength getAesKeyStrength() -> getAesKeyStrength
    void setAesKeyStrength(net.lingala.zip4j.model.enums.AesKeyStrength) -> setAesKeyStrength
    net.lingala.zip4j.model.enums.CompressionMethod getCompressionMethod() -> getCompressionMethod
    void setCompressionMethod(net.lingala.zip4j.model.enums.CompressionMethod) -> setCompressionMethod
net.lingala.zip4j.model.AbstractFileHeader -> net.lingala.zip4j.model.AbstractFileHeader:
    int versionNeededToExtract -> cG
    byte[] generalPurposeFlag -> u
    net.lingala.zip4j.model.enums.CompressionMethod compressionMethod -> a
    long lastModifiedTime -> u
    long crc -> v
    long compressedSize -> p
    long uncompressedSize -> w
    int fileNameLength -> cH
    int extraFieldLength -> cI
    java.lang.String fileName -> do
    boolean isEncrypted -> bQ
    net.lingala.zip4j.model.enums.EncryptionMethod encryptionMethod -> a
    boolean dataDescriptorExists -> bY
    net.lingala.zip4j.model.Zip64ExtendedInfo zip64ExtendedInfo -> a
    net.lingala.zip4j.model.AESExtraDataRecord aesExtraDataRecord -> a
    boolean fileNameUTF8Encoded -> bZ
    java.util.List extraDataRecords -> w
    boolean isDirectory -> ca
    void <init>() -> <init>
    int getVersionNeededToExtract() -> getVersionNeededToExtract
    void setVersionNeededToExtract(int) -> setVersionNeededToExtract
    byte[] getGeneralPurposeFlag() -> getGeneralPurposeFlag
    void setGeneralPurposeFlag(byte[]) -> setGeneralPurposeFlag
    net.lingala.zip4j.model.enums.CompressionMethod getCompressionMethod() -> getCompressionMethod
    void setCompressionMethod(net.lingala.zip4j.model.enums.CompressionMethod) -> setCompressionMethod
    long getLastModifiedTime() -> getLastModifiedTime
    void setLastModifiedTime(long) -> setLastModifiedTime
    long getLastModifiedTimeEpoch() -> getLastModifiedTimeEpoch
    long getCrc() -> getCrc
    void setCrc(long) -> setCrc
    long getCompressedSize() -> getCompressedSize
    void setCompressedSize(long) -> setCompressedSize
    long getUncompressedSize() -> getUncompressedSize
    void setUncompressedSize(long) -> setUncompressedSize
    int getFileNameLength() -> getFileNameLength
    void setFileNameLength(int) -> setFileNameLength
    int getExtraFieldLength() -> getExtraFieldLength
    void setExtraFieldLength(int) -> setExtraFieldLength
    java.lang.String getFileName() -> getFileName
    void setFileName(java.lang.String) -> setFileName
    boolean isEncrypted() -> isEncrypted
    void setEncrypted(boolean) -> setEncrypted
    net.lingala.zip4j.model.enums.EncryptionMethod getEncryptionMethod() -> getEncryptionMethod
    void setEncryptionMethod(net.lingala.zip4j.model.enums.EncryptionMethod) -> setEncryptionMethod
    boolean isDataDescriptorExists() -> isDataDescriptorExists
    void setDataDescriptorExists(boolean) -> setDataDescriptorExists
    net.lingala.zip4j.model.Zip64ExtendedInfo getZip64ExtendedInfo() -> getZip64ExtendedInfo
    void setZip64ExtendedInfo(net.lingala.zip4j.model.Zip64ExtendedInfo) -> setZip64ExtendedInfo
    net.lingala.zip4j.model.AESExtraDataRecord getAesExtraDataRecord() -> getAesExtraDataRecord
    void setAesExtraDataRecord(net.lingala.zip4j.model.AESExtraDataRecord) -> setAesExtraDataRecord
    boolean isFileNameUTF8Encoded() -> isFileNameUTF8Encoded
    void setFileNameUTF8Encoded(boolean) -> setFileNameUTF8Encoded
    java.util.List getExtraDataRecords() -> getExtraDataRecords
    void setExtraDataRecords(java.util.List) -> setExtraDataRecords
    boolean isDirectory() -> isDirectory
    void setDirectory(boolean) -> setDirectory
    boolean equals(java.lang.Object) -> equals
net.lingala.zip4j.model.ArchiveExtraDataRecord -> net.lingala.zip4j.model.ArchiveExtraDataRecord:
    int extraFieldLength -> cI
    java.lang.String extraFieldData -> dp
    void <init>() -> <init>
    int getExtraFieldLength() -> getExtraFieldLength
    void setExtraFieldLength(int) -> setExtraFieldLength
    java.lang.String getExtraFieldData() -> getExtraFieldData
    void setExtraFieldData(java.lang.String) -> setExtraFieldData
net.lingala.zip4j.model.CentralDirectory -> net.lingala.zip4j.model.CentralDirectory:
    java.util.List fileHeaders -> x
    net.lingala.zip4j.model.DigitalSignature digitalSignature -> a
    void <init>() -> <init>
    java.util.List getFileHeaders() -> getFileHeaders
    void setFileHeaders(java.util.List) -> setFileHeaders
    net.lingala.zip4j.model.DigitalSignature getDigitalSignature() -> getDigitalSignature
    void setDigitalSignature(net.lingala.zip4j.model.DigitalSignature) -> setDigitalSignature
net.lingala.zip4j.model.DataDescriptor -> net.lingala.zip4j.model.DataDescriptor:
    long crc -> v
    long compressedSize -> p
    long uncompressedSize -> w
    void <init>() -> <init>
    long getCrc() -> getCrc
    void setCrc(long) -> setCrc
    long getCompressedSize() -> getCompressedSize
    void setCompressedSize(long) -> setCompressedSize
    long getUncompressedSize() -> getUncompressedSize
    void setUncompressedSize(long) -> setUncompressedSize
net.lingala.zip4j.model.DigitalSignature -> net.lingala.zip4j.model.DigitalSignature:
    int sizeOfData -> cJ
    java.lang.String signatureData -> dq
    void <init>() -> <init>
    int getSizeOfData() -> getSizeOfData
    void setSizeOfData(int) -> setSizeOfData
    java.lang.String getSignatureData() -> getSignatureData
    void setSignatureData(java.lang.String) -> setSignatureData
net.lingala.zip4j.model.EndOfCentralDirectoryRecord -> net.lingala.zip4j.model.EndOfCentralDirectoryRecord:
    int numberOfThisDisk -> cK
    int numberOfThisDiskStartOfCentralDir -> cL
    int totalNumberOfEntriesInCentralDirectoryOnThisDisk -> cM
    int totalNumberOfEntriesInCentralDirectory -> cN
    int sizeOfCentralDirectory -> cO
    long offsetOfStartOfCentralDirectory -> x
    long offsetOfEndOfCentralDirectory -> y
    java.lang.String comment -> dr
    void <init>() -> <init>
    int getNumberOfThisDisk() -> getNumberOfThisDisk
    void setNumberOfThisDisk(int) -> setNumberOfThisDisk
    int getNumberOfThisDiskStartOfCentralDir() -> getNumberOfThisDiskStartOfCentralDir
    void setNumberOfThisDiskStartOfCentralDir(int) -> setNumberOfThisDiskStartOfCentralDir
    int getTotalNumberOfEntriesInCentralDirectoryOnThisDisk() -> getTotalNumberOfEntriesInCentralDirectoryOnThisDisk
    void setTotalNumberOfEntriesInCentralDirectoryOnThisDisk(int) -> setTotalNumberOfEntriesInCentralDirectoryOnThisDisk
    int getTotalNumberOfEntriesInCentralDirectory() -> getTotalNumberOfEntriesInCentralDirectory
    void setTotalNumberOfEntriesInCentralDirectory(int) -> setTotalNumberOfEntriesInCentralDirectory
    int getSizeOfCentralDirectory() -> getSizeOfCentralDirectory
    void setSizeOfCentralDirectory(int) -> setSizeOfCentralDirectory
    long getOffsetOfStartOfCentralDirectory() -> getOffsetOfStartOfCentralDirectory
    void setOffsetOfStartOfCentralDirectory(long) -> setOffsetOfStartOfCentralDirectory
    long getOffsetOfEndOfCentralDirectory() -> getOffsetOfEndOfCentralDirectory
    void setOffsetOfEndOfCentralDirectory(long) -> setOffsetOfEndOfCentralDirectory
    java.lang.String getComment() -> getComment
    void setComment(java.lang.String) -> setComment
net.lingala.zip4j.model.ExcludeFileFilter -> net.lingala.zip4j.model.ExcludeFileFilter:
    boolean isExcluded(java.io.File) -> isExcluded
net.lingala.zip4j.model.ExtraDataRecord -> net.lingala.zip4j.model.ExtraDataRecord:
    long header -> z
    int sizeOfData -> cJ
    byte[] data -> v
    void <init>() -> <init>
    long getHeader() -> getHeader
    void setHeader(long) -> setHeader
    int getSizeOfData() -> getSizeOfData
    void setSizeOfData(int) -> setSizeOfData
    byte[] getData() -> getData
    void setData(byte[]) -> setData
net.lingala.zip4j.model.FileHeader -> net.lingala.zip4j.model.FileHeader:
    int versionMadeBy -> cP
    int fileCommentLength -> cQ
    int diskNumberStart -> cR
    byte[] internalFileAttributes -> w
    byte[] externalFileAttributes -> x
    long offsetLocalHeader -> A
    java.lang.String fileComment -> ds
    void <init>() -> <init>
    int getVersionMadeBy() -> getVersionMadeBy
    void setVersionMadeBy(int) -> setVersionMadeBy
    int getFileCommentLength() -> getFileCommentLength
    void setFileCommentLength(int) -> setFileCommentLength
    int getDiskNumberStart() -> getDiskNumberStart
    void setDiskNumberStart(int) -> setDiskNumberStart
    byte[] getInternalFileAttributes() -> getInternalFileAttributes
    void setInternalFileAttributes(byte[]) -> setInternalFileAttributes
    byte[] getExternalFileAttributes() -> getExternalFileAttributes
    void setExternalFileAttributes(byte[]) -> setExternalFileAttributes
    long getOffsetLocalHeader() -> getOffsetLocalHeader
    void setOffsetLocalHeader(long) -> setOffsetLocalHeader
    java.lang.String getFileComment() -> getFileComment
    void setFileComment(java.lang.String) -> setFileComment
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long determineOffsetOfLocalFileHeader(net.lingala.zip4j.model.FileHeader) -> a
net.lingala.zip4j.model.LocalFileHeader -> net.lingala.zip4j.model.LocalFileHeader:
    byte[] extraField -> y
    long offsetStartOfData -> B
    boolean writeCompressedSizeInZip64ExtraRecord -> cb
    void <init>() -> <init>
    byte[] getExtraField() -> getExtraField
    void setExtraField(byte[]) -> setExtraField
    long getOffsetStartOfData() -> getOffsetStartOfData
    void setOffsetStartOfData(long) -> setOffsetStartOfData
    boolean isWriteCompressedSizeInZip64ExtraRecord() -> isWriteCompressedSizeInZip64ExtraRecord
    void setWriteCompressedSizeInZip64ExtraRecord(boolean) -> setWriteCompressedSizeInZip64ExtraRecord
net.lingala.zip4j.model.UnzipParameters -> net.lingala.zip4j.model.UnzipParameters:
    boolean extractSymbolicLinks -> cc
    void <init>() -> <init>
    boolean isExtractSymbolicLinks() -> isExtractSymbolicLinks
    void setExtractSymbolicLinks(boolean) -> setExtractSymbolicLinks
net.lingala.zip4j.model.Zip4jConfig -> net.lingala.zip4j.model.Zip4jConfig:
    java.nio.charset.Charset charset -> b
    int bufferSize -> cS
    boolean useUtf8CharsetForPasswords -> cd
    void <init>(java.nio.charset.Charset,int,boolean) -> <init>
    java.nio.charset.Charset getCharset() -> getCharset
    int getBufferSize() -> getBufferSize
    boolean isUseUtf8CharsetForPasswords() -> isUseUtf8CharsetForPasswords
net.lingala.zip4j.model.Zip64EndOfCentralDirectoryLocator -> net.lingala.zip4j.model.Zip64EndOfCentralDirectoryLocator:
    int numberOfDiskStartOfZip64EndOfCentralDirectoryRecord -> cT
    long offsetZip64EndOfCentralDirectoryRecord -> C
    int totalNumberOfDiscs -> cU
    void <init>() -> <init>
    int getNumberOfDiskStartOfZip64EndOfCentralDirectoryRecord() -> getNumberOfDiskStartOfZip64EndOfCentralDirectoryRecord
    void setNumberOfDiskStartOfZip64EndOfCentralDirectoryRecord(int) -> setNumberOfDiskStartOfZip64EndOfCentralDirectoryRecord
    long getOffsetZip64EndOfCentralDirectoryRecord() -> getOffsetZip64EndOfCentralDirectoryRecord
    void setOffsetZip64EndOfCentralDirectoryRecord(long) -> setOffsetZip64EndOfCentralDirectoryRecord
    int getTotalNumberOfDiscs() -> getTotalNumberOfDiscs
    void setTotalNumberOfDiscs(int) -> setTotalNumberOfDiscs
net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord -> net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord:
    long sizeOfZip64EndCentralDirectoryRecord -> D
    int versionMadeBy -> cP
    int versionNeededToExtract -> cG
    int numberOfThisDisk -> cK
    int numberOfThisDiskStartOfCentralDirectory -> cV
    long totalNumberOfEntriesInCentralDirectoryOnThisDisk -> E
    long totalNumberOfEntriesInCentralDirectory -> F
    long sizeOfCentralDirectory -> G
    long offsetStartCentralDirectoryWRTStartDiskNumber -> H
    byte[] extensibleDataSector -> z
    void <init>() -> <init>
    long getSizeOfZip64EndCentralDirectoryRecord() -> getSizeOfZip64EndCentralDirectoryRecord
    void setSizeOfZip64EndCentralDirectoryRecord(long) -> setSizeOfZip64EndCentralDirectoryRecord
    int getVersionMadeBy() -> getVersionMadeBy
    void setVersionMadeBy(int) -> setVersionMadeBy
    int getVersionNeededToExtract() -> getVersionNeededToExtract
    void setVersionNeededToExtract(int) -> setVersionNeededToExtract
    int getNumberOfThisDisk() -> getNumberOfThisDisk
    void setNumberOfThisDisk(int) -> setNumberOfThisDisk
    int getNumberOfThisDiskStartOfCentralDirectory() -> getNumberOfThisDiskStartOfCentralDirectory
    void setNumberOfThisDiskStartOfCentralDirectory(int) -> setNumberOfThisDiskStartOfCentralDirectory
    long getTotalNumberOfEntriesInCentralDirectoryOnThisDisk() -> getTotalNumberOfEntriesInCentralDirectoryOnThisDisk
    void setTotalNumberOfEntriesInCentralDirectoryOnThisDisk(long) -> setTotalNumberOfEntriesInCentralDirectoryOnThisDisk
    long getTotalNumberOfEntriesInCentralDirectory() -> getTotalNumberOfEntriesInCentralDirectory
    void setTotalNumberOfEntriesInCentralDirectory(long) -> setTotalNumberOfEntriesInCentralDirectory
    long getSizeOfCentralDirectory() -> getSizeOfCentralDirectory
    void setSizeOfCentralDirectory(long) -> setSizeOfCentralDirectory
    long getOffsetStartCentralDirectoryWRTStartDiskNumber() -> getOffsetStartCentralDirectoryWRTStartDiskNumber
    void setOffsetStartCentralDirectoryWRTStartDiskNumber(long) -> setOffsetStartCentralDirectoryWRTStartDiskNumber
    byte[] getExtensibleDataSector() -> getExtensibleDataSector
    void setExtensibleDataSector(byte[]) -> setExtensibleDataSector
net.lingala.zip4j.model.Zip64ExtendedInfo -> net.lingala.zip4j.model.Zip64ExtendedInfo:
    int size -> bX
    long compressedSize -> p
    long uncompressedSize -> w
    long offsetLocalHeader -> A
    int diskNumberStart -> cR
    void <init>() -> <init>
    int getSize() -> getSize
    void setSize(int) -> setSize
    long getCompressedSize() -> getCompressedSize
    void setCompressedSize(long) -> setCompressedSize
    long getUncompressedSize() -> getUncompressedSize
    void setUncompressedSize(long) -> setUncompressedSize
    long getOffsetLocalHeader() -> getOffsetLocalHeader
    void setOffsetLocalHeader(long) -> setOffsetLocalHeader
    int getDiskNumberStart() -> getDiskNumberStart
    void setDiskNumberStart(int) -> setDiskNumberStart
net.lingala.zip4j.model.ZipHeader -> net.lingala.zip4j.model.ZipHeader:
    net.lingala.zip4j.headers.HeaderSignature signature -> a
    void <init>() -> <init>
    net.lingala.zip4j.headers.HeaderSignature getSignature() -> getSignature
    void setSignature(net.lingala.zip4j.headers.HeaderSignature) -> setSignature
net.lingala.zip4j.model.ZipModel -> net.lingala.zip4j.model.ZipModel:
    java.util.List localFileHeaders -> y
    java.util.List dataDescriptors -> z
    net.lingala.zip4j.model.ArchiveExtraDataRecord archiveExtraDataRecord -> a
    net.lingala.zip4j.model.CentralDirectory centralDirectory -> a
    net.lingala.zip4j.model.EndOfCentralDirectoryRecord endOfCentralDirectoryRecord -> a
    net.lingala.zip4j.model.Zip64EndOfCentralDirectoryLocator zip64EndOfCentralDirectoryLocator -> a
    net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord zip64EndOfCentralDirectoryRecord -> a
    boolean splitArchive -> ce
    long splitLength -> n
    java.io.File zipFile -> zipFile
    boolean isZip64Format -> cf
    boolean isNestedZipFile -> cg
    long start -> I
    long end -> J
    void <init>() -> <init>
    java.util.List getLocalFileHeaders() -> getLocalFileHeaders
    void setLocalFileHeaders(java.util.List) -> setLocalFileHeaders
    java.util.List getDataDescriptors() -> getDataDescriptors
    void setDataDescriptors(java.util.List) -> setDataDescriptors
    net.lingala.zip4j.model.CentralDirectory getCentralDirectory() -> getCentralDirectory
    void setCentralDirectory(net.lingala.zip4j.model.CentralDirectory) -> setCentralDirectory
    net.lingala.zip4j.model.EndOfCentralDirectoryRecord getEndOfCentralDirectoryRecord() -> getEndOfCentralDirectoryRecord
    void setEndOfCentralDirectoryRecord(net.lingala.zip4j.model.EndOfCentralDirectoryRecord) -> setEndOfCentralDirectoryRecord
    net.lingala.zip4j.model.ArchiveExtraDataRecord getArchiveExtraDataRecord() -> getArchiveExtraDataRecord
    void setArchiveExtraDataRecord(net.lingala.zip4j.model.ArchiveExtraDataRecord) -> setArchiveExtraDataRecord
    boolean isSplitArchive() -> isSplitArchive
    void setSplitArchive(boolean) -> setSplitArchive
    java.io.File getZipFile() -> getZipFile
    void setZipFile(java.io.File) -> setZipFile
    net.lingala.zip4j.model.Zip64EndOfCentralDirectoryLocator getZip64EndOfCentralDirectoryLocator() -> getZip64EndOfCentralDirectoryLocator
    void setZip64EndOfCentralDirectoryLocator(net.lingala.zip4j.model.Zip64EndOfCentralDirectoryLocator) -> setZip64EndOfCentralDirectoryLocator
    net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord getZip64EndOfCentralDirectoryRecord() -> getZip64EndOfCentralDirectoryRecord
    void setZip64EndOfCentralDirectoryRecord(net.lingala.zip4j.model.Zip64EndOfCentralDirectoryRecord) -> setZip64EndOfCentralDirectoryRecord
    boolean isZip64Format() -> isZip64Format
    void setZip64Format(boolean) -> setZip64Format
    boolean isNestedZipFile() -> isNestedZipFile
    void setNestedZipFile(boolean) -> setNestedZipFile
    long getStart() -> getStart
    void setStart(long) -> setStart
    long getEnd() -> getEnd
    void setEnd(long) -> setEnd
    long getSplitLength() -> getSplitLength
    void setSplitLength(long) -> setSplitLength
    java.lang.Object clone() -> clone
net.lingala.zip4j.model.ZipParameters -> net.lingala.zip4j.model.ZipParameters:
    net.lingala.zip4j.model.enums.CompressionMethod compressionMethod -> a
    net.lingala.zip4j.model.enums.CompressionLevel compressionLevel -> a
    boolean encryptFiles -> ch
    net.lingala.zip4j.model.enums.EncryptionMethod encryptionMethod -> a
    boolean readHiddenFiles -> ci
    boolean readHiddenFolders -> cj
    net.lingala.zip4j.model.enums.AesKeyStrength aesKeyStrength -> a
    net.lingala.zip4j.model.enums.AesVersion aesVersion -> a
    boolean includeRootFolder -> ck
    long entryCRC -> K
    java.lang.String defaultFolderPath -> dt
    java.lang.String fileNameInZip -> du
    long lastModifiedFileTime -> L
    long entrySize -> M
    boolean writeExtendedLocalFileHeader -> cl
    boolean overrideExistingFilesInZip -> cm
    java.lang.String rootFolderNameInZip -> dv
    java.lang.String fileComment -> ds
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction symbolicLinkAction -> a
    net.lingala.zip4j.model.ExcludeFileFilter excludeFileFilter -> a
    boolean unixMode -> cn
    void <init>() -> <init>
    void <init>(net.lingala.zip4j.model.ZipParameters) -> <init>
    net.lingala.zip4j.model.enums.CompressionMethod getCompressionMethod() -> getCompressionMethod
    void setCompressionMethod(net.lingala.zip4j.model.enums.CompressionMethod) -> setCompressionMethod
    boolean isEncryptFiles() -> isEncryptFiles
    void setEncryptFiles(boolean) -> setEncryptFiles
    net.lingala.zip4j.model.enums.EncryptionMethod getEncryptionMethod() -> getEncryptionMethod
    void setEncryptionMethod(net.lingala.zip4j.model.enums.EncryptionMethod) -> setEncryptionMethod
    net.lingala.zip4j.model.enums.CompressionLevel getCompressionLevel() -> getCompressionLevel
    void setCompressionLevel(net.lingala.zip4j.model.enums.CompressionLevel) -> setCompressionLevel
    boolean isReadHiddenFiles() -> isReadHiddenFiles
    void setReadHiddenFiles(boolean) -> setReadHiddenFiles
    boolean isReadHiddenFolders() -> isReadHiddenFolders
    void setReadHiddenFolders(boolean) -> setReadHiddenFolders
    net.lingala.zip4j.model.enums.AesKeyStrength getAesKeyStrength() -> getAesKeyStrength
    void setAesKeyStrength(net.lingala.zip4j.model.enums.AesKeyStrength) -> setAesKeyStrength
    net.lingala.zip4j.model.enums.AesVersion getAesVersion() -> getAesVersion
    void setAesVersion(net.lingala.zip4j.model.enums.AesVersion) -> setAesVersion
    boolean isIncludeRootFolder() -> isIncludeRootFolder
    void setIncludeRootFolder(boolean) -> setIncludeRootFolder
    long getEntryCRC() -> getEntryCRC
    void setEntryCRC(long) -> setEntryCRC
    java.lang.String getDefaultFolderPath() -> getDefaultFolderPath
    void setDefaultFolderPath(java.lang.String) -> setDefaultFolderPath
    java.lang.String getFileNameInZip() -> getFileNameInZip
    void setFileNameInZip(java.lang.String) -> setFileNameInZip
    long getLastModifiedFileTime() -> getLastModifiedFileTime
    void setLastModifiedFileTime(long) -> setLastModifiedFileTime
    long getEntrySize() -> getEntrySize
    void setEntrySize(long) -> setEntrySize
    boolean isWriteExtendedLocalFileHeader() -> isWriteExtendedLocalFileHeader
    void setWriteExtendedLocalFileHeader(boolean) -> setWriteExtendedLocalFileHeader
    boolean isOverrideExistingFilesInZip() -> isOverrideExistingFilesInZip
    void setOverrideExistingFilesInZip(boolean) -> setOverrideExistingFilesInZip
    java.lang.String getRootFolderNameInZip() -> getRootFolderNameInZip
    void setRootFolderNameInZip(java.lang.String) -> setRootFolderNameInZip
    java.lang.String getFileComment() -> getFileComment
    void setFileComment(java.lang.String) -> setFileComment
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction getSymbolicLinkAction() -> getSymbolicLinkAction
    void setSymbolicLinkAction(net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction) -> setSymbolicLinkAction
    net.lingala.zip4j.model.ExcludeFileFilter getExcludeFileFilter() -> getExcludeFileFilter
    void setExcludeFileFilter(net.lingala.zip4j.model.ExcludeFileFilter) -> setExcludeFileFilter
    boolean isUnixMode() -> isUnixMode
    void setUnixMode(boolean) -> setUnixMode
net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction -> net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction:
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction INCLUDE_LINK_ONLY -> INCLUDE_LINK_ONLY
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction INCLUDE_LINKED_FILE_ONLY -> INCLUDE_LINKED_FILE_ONLY
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction INCLUDE_LINK_AND_LINKED_FILE -> INCLUDE_LINK_AND_LINKED_FILE
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction[] $VALUES -> a
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction[] values() -> values
    net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
net.lingala.zip4j.model.enums.AesKeyStrength -> net.lingala.zip4j.model.enums.AesKeyStrength:
    net.lingala.zip4j.model.enums.AesKeyStrength KEY_STRENGTH_128 -> KEY_STRENGTH_128
    net.lingala.zip4j.model.enums.AesKeyStrength KEY_STRENGTH_192 -> KEY_STRENGTH_192
    net.lingala.zip4j.model.enums.AesKeyStrength KEY_STRENGTH_256 -> KEY_STRENGTH_256
    int rawCode -> cW
    int saltLength -> cX
    int macLength -> cY
    int keyLength -> cZ
    net.lingala.zip4j.model.enums.AesKeyStrength[] $VALUES -> a
    net.lingala.zip4j.model.enums.AesKeyStrength[] values() -> values
    net.lingala.zip4j.model.enums.AesKeyStrength valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int,int) -> <init>
    int getRawCode() -> getRawCode
    int getSaltLength() -> getSaltLength
    int getMacLength() -> getMacLength
    int getKeyLength() -> getKeyLength
    net.lingala.zip4j.model.enums.AesKeyStrength getAesKeyStrengthFromRawCode(int) -> getAesKeyStrengthFromRawCode
    void <clinit>() -> <clinit>
net.lingala.zip4j.model.enums.AesVersion -> net.lingala.zip4j.model.enums.AesVersion:
    net.lingala.zip4j.model.enums.AesVersion ONE -> ONE
    net.lingala.zip4j.model.enums.AesVersion TWO -> TWO
    int versionNumber -> da
    net.lingala.zip4j.model.enums.AesVersion[] $VALUES -> a
    net.lingala.zip4j.model.enums.AesVersion[] values() -> values
    net.lingala.zip4j.model.enums.AesVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getVersionNumber() -> getVersionNumber
    net.lingala.zip4j.model.enums.AesVersion getFromVersionNumber(int) -> getFromVersionNumber
    void <clinit>() -> <clinit>
net.lingala.zip4j.model.enums.CompressionLevel -> net.lingala.zip4j.model.enums.CompressionLevel:
    net.lingala.zip4j.model.enums.CompressionLevel NO_COMPRESSION -> NO_COMPRESSION
    net.lingala.zip4j.model.enums.CompressionLevel FASTEST -> FASTEST
    net.lingala.zip4j.model.enums.CompressionLevel FASTER -> FASTER
    net.lingala.zip4j.model.enums.CompressionLevel FAST -> FAST
    net.lingala.zip4j.model.enums.CompressionLevel MEDIUM_FAST -> MEDIUM_FAST
    net.lingala.zip4j.model.enums.CompressionLevel NORMAL -> NORMAL
    net.lingala.zip4j.model.enums.CompressionLevel HIGHER -> HIGHER
    net.lingala.zip4j.model.enums.CompressionLevel MAXIMUM -> MAXIMUM
    net.lingala.zip4j.model.enums.CompressionLevel PRE_ULTRA -> PRE_ULTRA
    net.lingala.zip4j.model.enums.CompressionLevel ULTRA -> ULTRA
    int level -> db
    net.lingala.zip4j.model.enums.CompressionLevel[] $VALUES -> a
    net.lingala.zip4j.model.enums.CompressionLevel[] values() -> values
    net.lingala.zip4j.model.enums.CompressionLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getLevel() -> getLevel
    void <clinit>() -> <clinit>
net.lingala.zip4j.model.enums.CompressionMethod -> net.lingala.zip4j.model.enums.CompressionMethod:
    net.lingala.zip4j.model.enums.CompressionMethod STORE -> STORE
    net.lingala.zip4j.model.enums.CompressionMethod DEFLATE -> DEFLATE
    net.lingala.zip4j.model.enums.CompressionMethod AES_INTERNAL_ONLY -> AES_INTERNAL_ONLY
    int code -> cr
    net.lingala.zip4j.model.enums.CompressionMethod[] $VALUES -> a
    net.lingala.zip4j.model.enums.CompressionMethod[] values() -> values
    net.lingala.zip4j.model.enums.CompressionMethod valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getCode() -> getCode
    net.lingala.zip4j.model.enums.CompressionMethod getCompressionMethodFromCode(int) -> getCompressionMethodFromCode
    void <clinit>() -> <clinit>
net.lingala.zip4j.model.enums.EncryptionMethod -> net.lingala.zip4j.model.enums.EncryptionMethod:
    net.lingala.zip4j.model.enums.EncryptionMethod NONE -> NONE
    net.lingala.zip4j.model.enums.EncryptionMethod ZIP_STANDARD -> ZIP_STANDARD
    net.lingala.zip4j.model.enums.EncryptionMethod ZIP_STANDARD_VARIANT_STRONG -> ZIP_STANDARD_VARIANT_STRONG
    net.lingala.zip4j.model.enums.EncryptionMethod AES -> AES
    net.lingala.zip4j.model.enums.EncryptionMethod[] $VALUES -> a
    net.lingala.zip4j.model.enums.EncryptionMethod[] values() -> values
    net.lingala.zip4j.model.enums.EncryptionMethod valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
net.lingala.zip4j.model.enums.RandomAccessFileMode -> net.lingala.zip4j.model.enums.RandomAccessFileMode:
    net.lingala.zip4j.model.enums.RandomAccessFileMode READ -> READ
    net.lingala.zip4j.model.enums.RandomAccessFileMode WRITE -> WRITE
    java.lang.String value -> dw
    net.lingala.zip4j.model.enums.RandomAccessFileMode[] $VALUES -> a
    net.lingala.zip4j.model.enums.RandomAccessFileMode[] values() -> values
    net.lingala.zip4j.model.enums.RandomAccessFileMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String getValue() -> getValue
    void <clinit>() -> <clinit>
net.lingala.zip4j.progress.ProgressMonitor -> net.lingala.zip4j.progress.ProgressMonitor:
    net.lingala.zip4j.progress.ProgressMonitor$State state -> a
    long totalWork -> N
    long workCompleted -> O
    int percentDone -> dc
    net.lingala.zip4j.progress.ProgressMonitor$Task currentTask -> a
    java.lang.String fileName -> do
    net.lingala.zip4j.progress.ProgressMonitor$Result result -> a
    java.lang.Exception exception -> b
    boolean cancelAllTasks -> co
    boolean pause -> cp
    void <init>() -> <init>
    void updateWorkCompleted(long) -> updateWorkCompleted
    void endProgressMonitor() -> endProgressMonitor
    void endProgressMonitor(java.lang.Exception) -> endProgressMonitor
    void fullReset() -> fullReset
    void reset() -> as
    net.lingala.zip4j.progress.ProgressMonitor$State getState() -> getState
    void setState(net.lingala.zip4j.progress.ProgressMonitor$State) -> setState
    long getTotalWork() -> getTotalWork
    void setTotalWork(long) -> setTotalWork
    long getWorkCompleted() -> getWorkCompleted
    int getPercentDone() -> getPercentDone
    void setPercentDone(int) -> setPercentDone
    net.lingala.zip4j.progress.ProgressMonitor$Task getCurrentTask() -> getCurrentTask
    void setCurrentTask(net.lingala.zip4j.progress.ProgressMonitor$Task) -> setCurrentTask
    java.lang.String getFileName() -> getFileName
    void setFileName(java.lang.String) -> setFileName
    net.lingala.zip4j.progress.ProgressMonitor$Result getResult() -> getResult
    void setResult(net.lingala.zip4j.progress.ProgressMonitor$Result) -> setResult
    java.lang.Exception getException() -> getException
    void setException(java.lang.Exception) -> setException
    boolean isCancelAllTasks() -> isCancelAllTasks
    void setCancelAllTasks(boolean) -> setCancelAllTasks
    boolean isPause() -> isPause
    void setPause(boolean) -> setPause
net.lingala.zip4j.progress.ProgressMonitor$Result -> net.lingala.zip4j.progress.ProgressMonitor$Result:
    net.lingala.zip4j.progress.ProgressMonitor$Result SUCCESS -> SUCCESS
    net.lingala.zip4j.progress.ProgressMonitor$Result WORK_IN_PROGRESS -> WORK_IN_PROGRESS
    net.lingala.zip4j.progress.ProgressMonitor$Result ERROR -> ERROR
    net.lingala.zip4j.progress.ProgressMonitor$Result CANCELLED -> CANCELLED
    net.lingala.zip4j.progress.ProgressMonitor$Result[] $VALUES -> a
    net.lingala.zip4j.progress.ProgressMonitor$Result[] values() -> values
    net.lingala.zip4j.progress.ProgressMonitor$Result valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
net.lingala.zip4j.progress.ProgressMonitor$State -> net.lingala.zip4j.progress.ProgressMonitor$State:
    net.lingala.zip4j.progress.ProgressMonitor$State READY -> READY
    net.lingala.zip4j.progress.ProgressMonitor$State BUSY -> BUSY
    net.lingala.zip4j.progress.ProgressMonitor$State[] $VALUES -> a
    net.lingala.zip4j.progress.ProgressMonitor$State[] values() -> values
    net.lingala.zip4j.progress.ProgressMonitor$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
net.lingala.zip4j.progress.ProgressMonitor$Task -> net.lingala.zip4j.progress.ProgressMonitor$Task:
    net.lingala.zip4j.progress.ProgressMonitor$Task NONE -> NONE
    net.lingala.zip4j.progress.ProgressMonitor$Task ADD_ENTRY -> ADD_ENTRY
    net.lingala.zip4j.progress.ProgressMonitor$Task REMOVE_ENTRY -> REMOVE_ENTRY
    net.lingala.zip4j.progress.ProgressMonitor$Task CALCULATE_CRC -> CALCULATE_CRC
    net.lingala.zip4j.progress.ProgressMonitor$Task EXTRACT_ENTRY -> EXTRACT_ENTRY
    net.lingala.zip4j.progress.ProgressMonitor$Task MERGE_ZIP_FILES -> MERGE_ZIP_FILES
    net.lingala.zip4j.progress.ProgressMonitor$Task SET_COMMENT -> SET_COMMENT
    net.lingala.zip4j.progress.ProgressMonitor$Task RENAME_FILE -> RENAME_FILE
    net.lingala.zip4j.progress.ProgressMonitor$Task[] $VALUES -> a
    net.lingala.zip4j.progress.ProgressMonitor$Task[] values() -> values
    net.lingala.zip4j.progress.ProgressMonitor$Task valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
net.lingala.zip4j.tasks.AbstractAddFileToZipTask -> net.lingala.zip4j.tasks.AbstractAddFileToZipTask:
    net.lingala.zip4j.model.ZipModel zipModel -> b
    char[] password -> c
    net.lingala.zip4j.headers.HeaderWriter headerWriter -> b
    void <init>(net.lingala.zip4j.model.ZipModel,char[],net.lingala.zip4j.headers.HeaderWriter,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void addFilesToZip(java.util.List,net.lingala.zip4j.progress.ProgressMonitor,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.model.Zip4jConfig) -> a
    void addSymlinkToZip(java.io.File,net.lingala.zip4j.io.outputstream.ZipOutputStream,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.io.outputstream.SplitOutputStream) -> a
    void addFileToZip(java.io.File,net.lingala.zip4j.io.outputstream.ZipOutputStream,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.io.outputstream.SplitOutputStream,net.lingala.zip4j.progress.ProgressMonitor,byte[]) -> a
    void closeEntry(net.lingala.zip4j.io.outputstream.ZipOutputStream,net.lingala.zip4j.io.outputstream.SplitOutputStream,java.io.File,boolean) -> a
    long calculateWorkForFiles(java.util.List,net.lingala.zip4j.model.ZipParameters) -> a
    net.lingala.zip4j.io.outputstream.ZipOutputStream initializeOutputStream(net.lingala.zip4j.io.outputstream.SplitOutputStream,net.lingala.zip4j.model.Zip4jConfig) -> a
    void verifyZipParameters(net.lingala.zip4j.model.ZipParameters) -> b
    void updateLocalFileHeader(net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.io.outputstream.SplitOutputStream) -> a
    net.lingala.zip4j.model.ZipParameters cloneAndAdjustZipParameters(net.lingala.zip4j.model.ZipParameters,java.io.File,net.lingala.zip4j.progress.ProgressMonitor) -> a
    java.util.List removeFilesIfExists(java.util.List,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.progress.ProgressMonitor,net.lingala.zip4j.model.Zip4jConfig) -> a
    void removeFile(net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor,net.lingala.zip4j.model.Zip4jConfig) -> a
    java.lang.String replaceFileNameInZip(java.lang.String,java.lang.String) -> a
    boolean addSymlink(net.lingala.zip4j.model.ZipParameters) -> a
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    net.lingala.zip4j.model.ZipModel getZipModel() -> getZipModel
net.lingala.zip4j.tasks.AbstractExtractFileTask -> net.lingala.zip4j.tasks.AbstractExtractFileTask:
    net.lingala.zip4j.model.ZipModel zipModel -> c
    net.lingala.zip4j.model.UnzipParameters unzipParameters -> a
    void <init>(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.UnzipParameters,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void extractFile(net.lingala.zip4j.io.inputstream.ZipInputStream,net.lingala.zip4j.model.FileHeader,java.lang.String,java.lang.String,net.lingala.zip4j.progress.ProgressMonitor,byte[]) -> extractFile
    void assertCanonicalPathsAreSame(java.io.File,java.lang.String,net.lingala.zip4j.model.FileHeader) -> a
    boolean isSymbolicLink(net.lingala.zip4j.model.FileHeader) -> c
    void unzipFile(net.lingala.zip4j.io.inputstream.ZipInputStream,java.io.File,net.lingala.zip4j.progress.ProgressMonitor,byte[]) -> a
    void createSymLink(net.lingala.zip4j.io.inputstream.ZipInputStream,net.lingala.zip4j.model.FileHeader,java.io.File,net.lingala.zip4j.progress.ProgressMonitor) -> a
    byte[] readCompleteEntry(net.lingala.zip4j.io.inputstream.ZipInputStream,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.progress.ProgressMonitor) -> a
    void verifyNextEntry(net.lingala.zip4j.io.inputstream.ZipInputStream,net.lingala.zip4j.model.FileHeader) -> a
    void checkOutputDirectoryStructure(java.io.File) -> b
    java.io.File determineOutputFile(net.lingala.zip4j.model.FileHeader,java.lang.String,java.lang.String) -> a
    java.lang.String getFileNameWithSystemFileSeparators(java.lang.String) -> m
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    net.lingala.zip4j.model.ZipModel getZipModel() -> getZipModel
net.lingala.zip4j.tasks.AbstractModifyFileTask -> net.lingala.zip4j.tasks.a:
    void <init>(net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    java.io.File getTemporaryFile(java.lang.String) -> a
    void updateOffsetsForAllSubsequentFileHeaders(java.util.List,net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,long) -> a
    void cleanupFile(boolean,java.io.File,java.io.File) -> a
    long copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor,int) -> a
    java.util.List cloneAndSortFileHeadersByOffset(java.util.List) -> a
    long getOffsetOfNextEntry(java.util.List,net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.model.ZipModel) -> a
    void restoreFileName(java.io.File,java.io.File) -> a
    int getIndexOfFileHeader(java.util.List,net.lingala.zip4j.model.FileHeader) -> a
net.lingala.zip4j.tasks.AbstractModifyFileTask$1 -> net.lingala.zip4j.tasks.b:
    net.lingala.zip4j.tasks.AbstractModifyFileTask this$0 -> a
    void <init>(net.lingala.zip4j.tasks.AbstractModifyFileTask) -> <init>
    int compare(net.lingala.zip4j.model.FileHeader,net.lingala.zip4j.model.FileHeader) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
net.lingala.zip4j.tasks.AbstractZipTaskParameters -> net.lingala.zip4j.tasks.AbstractZipTaskParameters:
    net.lingala.zip4j.model.Zip4jConfig zip4jConfig -> zip4jConfig
    void <init>(net.lingala.zip4j.model.Zip4jConfig) -> <init>
net.lingala.zip4j.tasks.AddFilesToZipTask -> net.lingala.zip4j.tasks.AddFilesToZipTask:
    void <init>(net.lingala.zip4j.model.ZipModel,char[],net.lingala.zip4j.headers.HeaderWriter,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.AddFilesToZipTask$AddFilesToZipTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.AddFilesToZipTask$AddFilesToZipTaskParameters) -> calculateTotalWork
    java.util.List determineActualFilesToAdd(net.lingala.zip4j.tasks.AddFilesToZipTask$AddFilesToZipTaskParameters) -> a
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.AddFilesToZipTask$AddFilesToZipTaskParameters -> net.lingala.zip4j.tasks.AddFilesToZipTask$AddFilesToZipTaskParameters:
    java.util.List filesToAdd -> A
    net.lingala.zip4j.model.ZipParameters zipParameters -> a
    void <init>(java.util.List,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    net.lingala.zip4j.model.ZipParameters access$000(net.lingala.zip4j.tasks.AddFilesToZipTask$AddFilesToZipTaskParameters) -> a
    java.util.List access$100(net.lingala.zip4j.tasks.AddFilesToZipTask$AddFilesToZipTaskParameters) -> b
net.lingala.zip4j.tasks.AddFolderToZipTask -> net.lingala.zip4j.tasks.AddFolderToZipTask:
    void <init>(net.lingala.zip4j.model.ZipModel,char[],net.lingala.zip4j.headers.HeaderWriter,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters) -> calculateTotalWork
    void setDefaultFolderPath(net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters) -> a
    java.util.List getFilesToAdd(net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters) -> a
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters -> net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters:
    java.io.File folderToAdd -> d
    net.lingala.zip4j.model.ZipParameters zipParameters -> b
    void <init>(java.io.File,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    net.lingala.zip4j.model.ZipParameters access$000(net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters) -> a
    java.io.File access$100(net.lingala.zip4j.tasks.AddFolderToZipTask$AddFolderToZipTaskParameters) -> a
net.lingala.zip4j.tasks.AddStreamToZipTask -> net.lingala.zip4j.tasks.AddStreamToZipTask:
    void <init>(net.lingala.zip4j.model.ZipModel,char[],net.lingala.zip4j.headers.HeaderWriter,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.AddStreamToZipTask$AddStreamToZipTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.AddStreamToZipTask$AddStreamToZipTaskParameters) -> calculateTotalWork
    void removeFileIfExists(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.Zip4jConfig,java.lang.String,net.lingala.zip4j.progress.ProgressMonitor) -> a
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.AddStreamToZipTask$AddStreamToZipTaskParameters -> net.lingala.zip4j.tasks.AddStreamToZipTask$AddStreamToZipTaskParameters:
    java.io.InputStream inputStream -> c
    net.lingala.zip4j.model.ZipParameters zipParameters -> c
    void <init>(java.io.InputStream,net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    net.lingala.zip4j.model.ZipParameters access$000(net.lingala.zip4j.tasks.AddStreamToZipTask$AddStreamToZipTaskParameters) -> a
    java.io.InputStream access$100(net.lingala.zip4j.tasks.AddStreamToZipTask$AddStreamToZipTaskParameters) -> a
net.lingala.zip4j.tasks.AsyncZipTask -> net.lingala.zip4j.tasks.AsyncZipTask:
    net.lingala.zip4j.progress.ProgressMonitor progressMonitor -> b
    boolean runInThread -> cq
    java.util.concurrent.ExecutorService executorService -> c
    void <init>(net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void execute(java.lang.Object) -> execute
    void performTaskWithErrorHandling(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> a
    void verifyIfTaskIsCancelled() -> verifyIfTaskIsCancelled
    void initProgressMonitor() -> au
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    net.lingala.zip4j.progress.ProgressMonitor access$300(net.lingala.zip4j.tasks.AsyncZipTask) -> a
    void access$400(net.lingala.zip4j.tasks.AsyncZipTask,java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> a
    java.util.concurrent.ExecutorService access$500(net.lingala.zip4j.tasks.AsyncZipTask) -> a
net.lingala.zip4j.tasks.AsyncZipTask$1 -> net.lingala.zip4j.tasks.c:
    java.lang.Object val$taskParameters -> w
    net.lingala.zip4j.tasks.AsyncZipTask this$0 -> a
    void <init>(net.lingala.zip4j.tasks.AsyncZipTask,java.lang.Object) -> <init>
    void run() -> run
net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters -> net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters:
    net.lingala.zip4j.progress.ProgressMonitor progressMonitor -> c
    boolean runInThread -> cr
    java.util.concurrent.ExecutorService executorService -> d
    void <init>(java.util.concurrent.ExecutorService,boolean,net.lingala.zip4j.progress.ProgressMonitor) -> <init>
    net.lingala.zip4j.progress.ProgressMonitor access$000(net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> a
    boolean access$100(net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> a
    java.util.concurrent.ExecutorService access$200(net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> a
net.lingala.zip4j.tasks.ExtractAllFilesTask -> net.lingala.zip4j.tasks.ExtractAllFilesTask:
    char[] password -> d
    net.lingala.zip4j.io.inputstream.SplitFileInputStream splitInputStream -> a
    void <init>(net.lingala.zip4j.model.ZipModel,char[],net.lingala.zip4j.model.UnzipParameters,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.ExtractAllFilesTask$ExtractAllFilesTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.ExtractAllFilesTask$ExtractAllFilesTaskParameters) -> calculateTotalWork
    net.lingala.zip4j.io.inputstream.ZipInputStream prepareZipInputStream(net.lingala.zip4j.model.Zip4jConfig) -> a
    net.lingala.zip4j.model.FileHeader getFirstFileHeader(net.lingala.zip4j.model.ZipModel) -> a
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.ExtractAllFilesTask$ExtractAllFilesTaskParameters -> net.lingala.zip4j.tasks.ExtractAllFilesTask$ExtractAllFilesTaskParameters:
    java.lang.String outputPath -> dx
    void <init>(java.lang.String,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    java.lang.String access$000(net.lingala.zip4j.tasks.ExtractAllFilesTask$ExtractAllFilesTaskParameters) -> a
net.lingala.zip4j.tasks.ExtractFileTask -> net.lingala.zip4j.tasks.ExtractFileTask:
    char[] password -> b
    net.lingala.zip4j.io.inputstream.SplitFileInputStream splitInputStream -> a
    void <init>(net.lingala.zip4j.model.ZipModel,char[],net.lingala.zip4j.model.UnzipParameters,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.ExtractFileTask$ExtractFileTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.ExtractFileTask$ExtractFileTaskParameters) -> calculateTotalWork
    java.util.List getFileHeadersToExtract(java.lang.String) -> a
    net.lingala.zip4j.io.inputstream.ZipInputStream createZipInputStream(net.lingala.zip4j.model.Zip4jConfig) -> b
    java.lang.String determineNewFileName(java.lang.String,java.lang.String,net.lingala.zip4j.model.FileHeader) -> a
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.ExtractFileTask$ExtractFileTaskParameters -> net.lingala.zip4j.tasks.ExtractFileTask$ExtractFileTaskParameters:
    java.lang.String outputPath -> dx
    java.lang.String fileToExtract -> dy
    java.lang.String newFileName -> dz
    void <init>(java.lang.String,java.lang.String,java.lang.String,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    java.lang.String access$000(net.lingala.zip4j.tasks.ExtractFileTask$ExtractFileTaskParameters) -> a
    java.lang.String access$100(net.lingala.zip4j.tasks.ExtractFileTask$ExtractFileTaskParameters) -> b
    java.lang.String access$200(net.lingala.zip4j.tasks.ExtractFileTask$ExtractFileTaskParameters) -> c
net.lingala.zip4j.tasks.MergeSplitZipFileTask -> net.lingala.zip4j.tasks.MergeSplitZipFileTask:
    net.lingala.zip4j.model.ZipModel zipModel -> d
    net.lingala.zip4j.util.RawIO rawIO -> c
    void <init>(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.MergeSplitZipFileTask$MergeSplitZipFileTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.MergeSplitZipFileTask$MergeSplitZipFileTaskParameters) -> calculateTotalWork
    void updateFileHeaderOffsetsForIndex(java.util.List,long,int,int) -> a
    java.io.File getNextSplitZipFile(net.lingala.zip4j.model.ZipModel,int) -> a
    java.io.RandomAccessFile createSplitZipFileStream(net.lingala.zip4j.model.ZipModel,int) -> a
    void updateHeadersForMergeSplitFileAction(net.lingala.zip4j.model.ZipModel,long,java.io.OutputStream,java.nio.charset.Charset) -> a
    void updateSplitZipModel(net.lingala.zip4j.model.ZipModel,long) -> a
    void updateSplitEndCentralDirectory(net.lingala.zip4j.model.ZipModel) -> a
    void updateSplitZip64EndCentralDirLocator(net.lingala.zip4j.model.ZipModel,long) -> b
    void updateSplitZip64EndCentralDirRec(net.lingala.zip4j.model.ZipModel,long) -> c
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.MergeSplitZipFileTask$MergeSplitZipFileTaskParameters -> net.lingala.zip4j.tasks.MergeSplitZipFileTask$MergeSplitZipFileTaskParameters:
    java.io.File outputZipFile -> e
    void <init>(java.io.File,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    java.io.File access$000(net.lingala.zip4j.tasks.MergeSplitZipFileTask$MergeSplitZipFileTaskParameters) -> a
net.lingala.zip4j.tasks.RemoveFilesFromZipTask -> net.lingala.zip4j.tasks.RemoveFilesFromZipTask:
    net.lingala.zip4j.model.ZipModel zipModel -> e
    net.lingala.zip4j.headers.HeaderWriter headerWriter -> c
    void <init>(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.headers.HeaderWriter,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.RemoveFilesFromZipTask$RemoveFilesFromZipTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.RemoveFilesFromZipTask$RemoveFilesFromZipTaskParameters) -> calculateTotalWork
    java.util.List filterNonExistingEntries(java.util.List) -> b
    boolean shouldEntryBeRemoved(net.lingala.zip4j.model.FileHeader,java.util.List) -> a
    void updateHeaders(java.util.List,net.lingala.zip4j.model.FileHeader,long) -> a
    long negate(long) -> a
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.RemoveFilesFromZipTask$RemoveFilesFromZipTaskParameters -> net.lingala.zip4j.tasks.RemoveFilesFromZipTask$RemoveFilesFromZipTaskParameters:
    java.util.List filesToRemove -> B
    void <init>(java.util.List,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    java.util.List access$000(net.lingala.zip4j.tasks.RemoveFilesFromZipTask$RemoveFilesFromZipTaskParameters) -> a
net.lingala.zip4j.tasks.RenameFilesTask -> net.lingala.zip4j.tasks.RenameFilesTask:
    net.lingala.zip4j.model.ZipModel zipModel -> f
    net.lingala.zip4j.headers.HeaderWriter headerWriter -> d
    net.lingala.zip4j.util.RawIO rawIO -> d
    void <init>(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.headers.HeaderWriter,net.lingala.zip4j.util.RawIO,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.RenameFilesTask$RenameFilesTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.RenameFilesTask$RenameFilesTaskParameters) -> calculateTotalWork
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    long copyEntryAndChangeFileName(byte[],net.lingala.zip4j.model.FileHeader,long,long,java.io.RandomAccessFile,java.io.OutputStream,net.lingala.zip4j.progress.ProgressMonitor,int) -> a
    java.util.Map$Entry getCorrespondingEntryFromMap(net.lingala.zip4j.model.FileHeader,java.util.Map) -> a
    void updateHeadersInZipModel(java.util.List,net.lingala.zip4j.model.FileHeader,java.lang.String,byte[],int) -> a
    java.util.Map filterNonExistingEntriesAndAddSeparatorIfNeeded(java.util.Map) -> a
    java.lang.String getNewFileName(java.lang.String,java.lang.String,java.lang.String) -> a
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.RenameFilesTask$RenameFilesTaskParameters -> net.lingala.zip4j.tasks.RenameFilesTask$RenameFilesTaskParameters:
    java.util.Map fileNamesMap -> s
    void <init>(java.util.Map,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    java.util.Map access$000(net.lingala.zip4j.tasks.RenameFilesTask$RenameFilesTaskParameters) -> a
net.lingala.zip4j.tasks.SetCommentTask -> net.lingala.zip4j.tasks.SetCommentTask:
    net.lingala.zip4j.model.ZipModel zipModel -> g
    void <init>(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.tasks.AsyncZipTask$AsyncTaskParameters) -> <init>
    void executeTask(net.lingala.zip4j.tasks.SetCommentTask$SetCommentTaskTaskParameters,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
    long calculateTotalWork(net.lingala.zip4j.tasks.SetCommentTask$SetCommentTaskTaskParameters) -> calculateTotalWork
    net.lingala.zip4j.progress.ProgressMonitor$Task getTask() -> getTask
    long calculateTotalWork(java.lang.Object) -> calculateTotalWork
    void executeTask(java.lang.Object,net.lingala.zip4j.progress.ProgressMonitor) -> executeTask
net.lingala.zip4j.tasks.SetCommentTask$SetCommentTaskTaskParameters -> net.lingala.zip4j.tasks.SetCommentTask$SetCommentTaskTaskParameters:
    java.lang.String comment -> dr
    void <init>(java.lang.String,net.lingala.zip4j.model.Zip4jConfig) -> <init>
    java.lang.String access$000(net.lingala.zip4j.tasks.SetCommentTask$SetCommentTaskTaskParameters) -> a
net.lingala.zip4j.util.BitUtils -> net.lingala.zip4j.util.BitUtils:
    void <init>() -> <init>
    boolean isBitSet(byte,int) -> isBitSet
    byte setBit(byte,int) -> setBit
    byte unsetBit(byte,int) -> unsetBit
net.lingala.zip4j.util.CrcUtil -> net.lingala.zip4j.util.CrcUtil:
    void <init>() -> <init>
    long computeFileCrc(java.io.File,net.lingala.zip4j.progress.ProgressMonitor) -> computeFileCrc
net.lingala.zip4j.util.FileUtils -> net.lingala.zip4j.util.FileUtils:
    byte[] DEFAULT_POSIX_FILE_ATTRIBUTES -> DEFAULT_POSIX_FILE_ATTRIBUTES
    byte[] DEFAULT_POSIX_FOLDER_ATTRIBUTES -> DEFAULT_POSIX_FOLDER_ATTRIBUTES
    void <init>() -> <init>
    void setFileAttributes(java.nio.file.Path,byte[]) -> setFileAttributes
    void setFileLastModifiedTime(java.nio.file.Path,long) -> setFileLastModifiedTime
    void setFileLastModifiedTimeWithoutNio(java.io.File,long) -> setFileLastModifiedTimeWithoutNio
    byte[] getFileAttributes(java.io.File) -> getFileAttributes
    java.util.List getFilesInDirectoryRecursive(java.io.File,net.lingala.zip4j.model.ZipParameters) -> getFilesInDirectoryRecursive
    java.lang.String getFileNameWithoutExtension(java.lang.String) -> getFileNameWithoutExtension
    java.lang.String getZipFileNameWithoutExtension(java.lang.String) -> getZipFileNameWithoutExtension
    java.util.List getSplitZipFiles(net.lingala.zip4j.model.ZipModel) -> getSplitZipFiles
    java.lang.String getRelativeFileName(java.io.File,net.lingala.zip4j.model.ZipParameters) -> getRelativeFileName
    java.lang.String getNameOfFileInZip(java.io.File,java.lang.String) -> a
    boolean isZipEntryDirectory(java.lang.String) -> isZipEntryDirectory
    void copyFile(java.io.RandomAccessFile,java.io.OutputStream,long,long,net.lingala.zip4j.progress.ProgressMonitor,int) -> copyFile
    void assertFilesExist(java.util.List,net.lingala.zip4j.model.ZipParameters$SymbolicLinkAction) -> assertFilesExist
    boolean isNumberedSplitFile(java.io.File) -> isNumberedSplitFile
    java.lang.String getFileExtension(java.io.File) -> getFileExtension
    java.io.File[] getAllSortedNumberedSplitFiles(java.io.File) -> getAllSortedNumberedSplitFiles
    java.lang.String getNextNumberedSplitFileCounterAsExtension(int) -> getNextNumberedSplitFileCounterAsExtension
    boolean isSymbolicLink(java.io.File) -> isSymbolicLink
    java.lang.String readSymbolicLink(java.io.File) -> readSymbolicLink
    byte[] getDefaultFileAttributes(boolean) -> getDefaultFileAttributes
    boolean isWindows() -> isWindows
    boolean isMac() -> isMac
    boolean isUnix() -> isUnix
    java.lang.String getExtensionZerosPrefix(int) -> b
    void applyWindowsFileAttributes(java.nio.file.Path,byte[]) -> a
    void applyPosixFileAttributes(java.nio.file.Path,byte[]) -> b
    byte[] getWindowsFileAttributes(java.nio.file.Path) -> a
    void assertFileExists(java.io.File) -> c
    void assertSymbolicLinkTargetExists(java.io.File) -> d
    byte[] getPosixFileAttributes(java.nio.file.Path) -> b
    byte setBitIfApplicable(boolean,byte,int) -> a
    void addIfBitSet(byte,int,java.util.Set,java.nio.file.attribute.PosixFilePermission) -> a
    void <clinit>() -> <clinit>
net.lingala.zip4j.util.FileUtils$1 -> net.lingala.zip4j.util.a:
    java.lang.String val$zipFileNameWithoutExtension -> dA
    void <init>(java.lang.String) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
net.lingala.zip4j.util.InternalZipConstants -> net.lingala.zip4j.util.InternalZipConstants:
    int ENDHDR -> ENDHDR
    int STD_DEC_HDR_SIZE -> STD_DEC_HDR_SIZE
    int MAX_COMMENT_SIZE -> MAX_COMMENT_SIZE
    int AES_AUTH_LENGTH -> AES_AUTH_LENGTH
    int AES_BLOCK_SIZE -> AES_BLOCK_SIZE
    int AES_EXTRA_DATA_RECORD_SIZE -> AES_EXTRA_DATA_RECORD_SIZE
    java.lang.String AES_MAC_ALGORITHM -> AES_MAC_ALGORITHM
    java.lang.String AES_HASH_CHARSET -> AES_HASH_CHARSET
    int AES_HASH_ITERATIONS -> AES_HASH_ITERATIONS
    int AES_PASSWORD_VERIFIER_LENGTH -> AES_PASSWORD_VERIFIER_LENGTH
    int MIN_SPLIT_LENGTH -> MIN_SPLIT_LENGTH
    long ZIP_64_SIZE_LIMIT -> ZIP_64_SIZE_LIMIT
    int ZIP_64_NUMBER_OF_ENTRIES_LIMIT -> ZIP_64_NUMBER_OF_ENTRIES_LIMIT
    int BUFF_SIZE -> BUFF_SIZE
    int MIN_BUFF_SIZE -> MIN_BUFF_SIZE
    int UPDATE_LFH_CRC -> UPDATE_LFH_CRC
    int UPDATE_LFH_COMP_SIZE -> UPDATE_LFH_COMP_SIZE
    int UPDATE_LFH_UNCOMP_SIZE -> UPDATE_LFH_UNCOMP_SIZE
    java.lang.String FILE_SEPARATOR -> FILE_SEPARATOR
    java.lang.String ZIP_FILE_SEPARATOR -> ZIP_FILE_SEPARATOR
    int MAX_ALLOWED_ZIP_COMMENT_LENGTH -> MAX_ALLOWED_ZIP_COMMENT_LENGTH
    java.lang.String ZIP_STANDARD_CHARSET_NAME -> ZIP_STANDARD_CHARSET_NAME
    java.nio.charset.Charset CHARSET_UTF_8 -> CHARSET_UTF_8
    java.nio.charset.Charset ZIP4J_DEFAULT_CHARSET -> ZIP4J_DEFAULT_CHARSET
    java.lang.String SEVEN_ZIP_SPLIT_FILE_EXTENSION_PATTERN -> SEVEN_ZIP_SPLIT_FILE_EXTENSION_PATTERN
    boolean USE_UTF8_FOR_PASSWORD_ENCODING_DECODING -> USE_UTF8_FOR_PASSWORD_ENCODING_DECODING
    void <init>() -> <init>
    void <clinit>() -> <clinit>
net.lingala.zip4j.util.PasswordCallback -> net.lingala.zip4j.util.PasswordCallback:
    char[] getPassword() -> getPassword
net.lingala.zip4j.util.RawIO -> net.lingala.zip4j.util.RawIO:
    byte[] shortBuff -> A
    byte[] intBuff -> B
    byte[] longBuff -> C
    void <init>() -> <init>
    long readLongLittleEndian(java.io.RandomAccessFile) -> readLongLittleEndian
    long readLongLittleEndian(java.io.RandomAccessFile,int) -> readLongLittleEndian
    long readLongLittleEndian(java.io.InputStream) -> readLongLittleEndian
    long readLongLittleEndian(java.io.InputStream,int) -> readLongLittleEndian
    long readLongLittleEndian(byte[],int) -> readLongLittleEndian
    int readIntLittleEndian(java.io.RandomAccessFile) -> readIntLittleEndian
    int readIntLittleEndian(java.io.InputStream) -> readIntLittleEndian
    int readIntLittleEndian(byte[]) -> readIntLittleEndian
    int readIntLittleEndian(byte[],int) -> readIntLittleEndian
    int readShortLittleEndian(java.io.RandomAccessFile) -> readShortLittleEndian
    int readShortLittleEndian(java.io.InputStream) -> readShortLittleEndian
    int readShortLittleEndian(byte[],int) -> readShortLittleEndian
    void writeShortLittleEndian(java.io.OutputStream,int) -> writeShortLittleEndian
    void writeShortLittleEndian(byte[],int,int) -> writeShortLittleEndian
    void writeIntLittleEndian(java.io.OutputStream,int) -> writeIntLittleEndian
    void writeIntLittleEndian(byte[],int,int) -> writeIntLittleEndian
    void writeLongLittleEndian(java.io.OutputStream,long) -> writeLongLittleEndian
    void writeLongLittleEndian(byte[],int,long) -> writeLongLittleEndian
    void readFully(java.io.InputStream,byte[],int) -> a
    void resetBytes(byte[]) -> c
net.lingala.zip4j.util.UnzipUtil -> net.lingala.zip4j.util.UnzipUtil:
    void <init>() -> <init>
    net.lingala.zip4j.io.inputstream.ZipInputStream createZipInputStream(net.lingala.zip4j.model.ZipModel,net.lingala.zip4j.model.FileHeader,char[]) -> createZipInputStream
    void applyFileAttributes(net.lingala.zip4j.model.FileHeader,java.io.File) -> applyFileAttributes
    net.lingala.zip4j.io.inputstream.SplitFileInputStream createSplitInputStream(net.lingala.zip4j.model.ZipModel) -> createSplitInputStream
net.lingala.zip4j.util.Zip4jUtil -> net.lingala.zip4j.util.Zip4jUtil:
    void <init>() -> <init>
    boolean isStringNullOrEmpty(java.lang.String) -> isStringNullOrEmpty
    boolean isStringNotNullAndNotEmpty(java.lang.String) -> isStringNotNullAndNotEmpty
    boolean createDirectoryIfNotExists(java.io.File) -> createDirectoryIfNotExists
    long epochToExtendedDosTime(long) -> epochToExtendedDosTime
    long epochToDosTime(long) -> b
    long dosToExtendedEpochTme(long) -> dosToExtendedEpochTme
    long dosToEpochTime(long) -> c
    byte[] convertCharArrayToByteArray(char[],boolean) -> convertCharArrayToByteArray
    net.lingala.zip4j.model.enums.CompressionMethod getCompressionMethod(net.lingala.zip4j.model.AbstractFileHeader) -> getCompressionMethod
    int readFully(java.io.InputStream,byte[]) -> readFully
    int readFully(java.io.InputStream,byte[],int,int) -> readFully
    int readUntilBufferIsFull(java.io.InputStream,byte[],int) -> a
    byte[] convertCharArrayToByteArrayUsingUtf8(char[]) -> a
    byte[] convertCharArrayToByteArrayUsingDefaultCharset(char[]) -> b
net.lingala.zip4j.util.ZipVersionUtils -> net.lingala.zip4j.util.ZipVersionUtils:
    void <init>() -> <init>
    int determineVersionMadeBy(net.lingala.zip4j.model.ZipParameters,net.lingala.zip4j.util.RawIO) -> determineVersionMadeBy
    net.lingala.zip4j.headers.VersionNeededToExtract determineVersionNeededToExtract(net.lingala.zip4j.model.ZipParameters) -> determineVersionNeededToExtract
