// THIS FILE IS AUTOMATICALLY GENERATED DURING COMPILATION.
// DO NOT EDIT THIS FILE. ANY CHANGES WILL BE OVERWRITTEN.

package com.google.appinventor.client;

import com.google.gwt.i18n.client.Messages;

public interface AutogeneratedOdeMessages extends Messages {

  /* Components */
  @DefaultMessage("BimaAix")
  @Description("")
  String bimaAixComponentPallette();

  @DefaultMessage("Simple BimaAix")
  @Description("")
  String BimaAixHelpStringComponentPallette();

  @DefaultMessage("exam")
  @Description("")
  String examComponentPallette();

  @DefaultMessage("Simple exam")
  @Description("")
  String examHelpStringComponentPallette();

  @DefaultMessage("Extension")
  @Description("")
  String extensionComponentPallette();

  @DefaultMessage("Simple Extension")
  @Description("")
  String ExtensionHelpStringComponentPallette();


  /* Properties */
  @DefaultMessage("AdHosts")
  @Description("")
  String AdHostsProperties();

  @DefaultMessage("AllowScreenshotsUser")
  @Description("")
  String AllowScreenshotsUserProperties();

  @DefaultMessage("AudioPathSource")
  @Description("")
  String AudioPathSourceProperties();

  @DefaultMessage("AutoLoadImages")
  @Description("")
  String AutoLoadImagesProperties();

  @DefaultMessage("AutoplayMedia")
  @Description("")
  String AutoplayMediaProperties();

  @DefaultMessage("BackgoundColor")
  @Description("")
  String BackgoundColorProperties();

  @DefaultMessage("BackgroundColor")
  @Description("")
  String BackgroundColorProperties();

  @DefaultMessage("BlockAds")
  @Description("")
  String BlockAdsProperties();

  @DefaultMessage("BlockNetworkLoads")
  @Description("")
  String BlockNetworkLoadsProperties();

  @DefaultMessage("Brightness")
  @Description("")
  String BrightnessProperties();

  @DefaultMessage("BrightnessMode")
  @Description("")
  String BrightnessModeProperties();

  @DefaultMessage("CacheMode")
  @Description("")
  String CacheModeProperties();

  @DefaultMessage("CurrentPageTitle")
  @Description("")
  String CurrentPageTitleProperties();

  @DefaultMessage("CurrentUrl")
  @Description("")
  String CurrentUrlProperties();

  @DefaultMessage("DeepLinks")
  @Description("")
  String DeepLinksProperties();

  @DefaultMessage("DesktopMode")
  @Description("")
  String DesktopModeProperties();

  @DefaultMessage("DisplayZoom")
  @Description("")
  String DisplayZoomProperties();

  @DefaultMessage("EnableJS")
  @Description("")
  String EnableJSProperties();

  @DefaultMessage("ExampleProperty")
  @Description("")
  String ExamplePropertyProperties();

  @DefaultMessage("FileAccess")
  @Description("")
  String FileAccessProperties();

  @DefaultMessage("FollowLinks")
  @Description("")
  String FollowLinksProperties();

  @DefaultMessage("FontScale")
  @Description("")
  String FontScaleProperties();

  @DefaultMessage("FontSize")
  @Description("")
  String FontSizeProperties();

  @DefaultMessage("GetClickable")
  @Description("")
  String GetClickableProperties();

  @DefaultMessage("GetFloatingViewVisible")
  @Description("")
  String GetFloatingViewVisibleProperties();

  @DefaultMessage("InitialScale")
  @Description("")
  String InitialScaleProperties();

  @DefaultMessage("LayerType")
  @Description("")
  String LayerTypeProperties();

  @DefaultMessage("LoadWithOverviewMode")
  @Description("")
  String LoadWithOverviewModeProperties();

  @DefaultMessage("LongClickable")
  @Description("")
  String LongClickableProperties();

  @DefaultMessage("OverScrollMode")
  @Description("")
  String OverScrollModeProperties();

  @DefaultMessage("PromptForPermission")
  @Description("")
  String PromptForPermissionProperties();

  @DefaultMessage("RotationAngle")
  @Description("")
  String RotationAngleProperties();

  @DefaultMessage("ScrollBar")
  @Description("")
  String ScrollBarProperties();

  @DefaultMessage("ScrollBarStyle")
  @Description("")
  String ScrollBarStyleProperties();

  @DefaultMessage("Scrollable")
  @Description("")
  String ScrollableProperties();

  @DefaultMessage("SetAudioPathSource")
  @Description("")
  String SetAudioPathSourceProperties();

  @DefaultMessage("SetClickable")
  @Description("")
  String SetClickableProperties();

  @DefaultMessage("ShowUI")
  @Description("")
  String ShowUIProperties();

  @DefaultMessage("SupportMultipleWindows")
  @Description("")
  String SupportMultipleWindowsProperties();

  @DefaultMessage("SuppressToast")
  @Description("")
  String SuppressToastProperties();

  @DefaultMessage("SuppressWarnings")
  @Description("")
  String SuppressWarningsProperties();

  @DefaultMessage("UseWideViewPort")
  @Description("")
  String UseWideViewPortProperties();

  @DefaultMessage("UserAgent")
  @Description("")
  String UserAgentProperties();

  @DefaultMessage("UsesLocation")
  @Description("")
  String UsesLocationProperties();

  @DefaultMessage("VibrationEnabled")
  @Description("")
  String VibrationEnabledProperties();

  @DefaultMessage("Visible")
  @Description("")
  String VisibleProperties();

  @DefaultMessage("VolumeAlarm")
  @Description("")
  String VolumeAlarmProperties();

  @DefaultMessage("VolumeMusic")
  @Description("")
  String VolumeMusicProperties();

  @DefaultMessage("VolumeRing")
  @Description("")
  String VolumeRingProperties();

  @DefaultMessage("WebViewString")
  @Description("")
  String WebViewStringProperties();

  @DefaultMessage("ZoomEnabled")
  @Description("")
  String ZoomEnabledProperties();

  @DefaultMessage("ZoomPercent")
  @Description("")
  String ZoomPercentProperties();

  @DefaultMessage("getSdkVersion")
  @Description("")
  String getSdkVersionProperties();


  /* Methods */
  @DefaultMessage("AllowGeolocationAccess")
  @Description("")
  String AllowGeolocationAccessMethods();

  @DefaultMessage("CanGoBack")
  @Description("")
  String CanGoBackMethods();

  @DefaultMessage("CanGoBackOrForward")
  @Description("")
  String CanGoBackOrForwardMethods();

  @DefaultMessage("CanGoForward")
  @Description("")
  String CanGoForwardMethods();

  @DefaultMessage("CancelPrinting")
  @Description("")
  String CancelPrintingMethods();

  @DefaultMessage("CheckDrawOverlayPermission")
  @Description("")
  String CheckDrawOverlayPermissionMethods();

  @DefaultMessage("CheckMyAppSignature")
  @Description("")
  String CheckMyAppSignatureMethods();

  @DefaultMessage("ClearCache")
  @Description("")
  String ClearCacheMethods();

  @DefaultMessage("ClearCookies")
  @Description("")
  String ClearCookiesMethods();

  @DefaultMessage("ClearFormData")
  @Description("")
  String ClearFormDataMethods();

  @DefaultMessage("ClearInternalHistory")
  @Description("")
  String ClearInternalHistoryMethods();

  @DefaultMessage("ClearLocation")
  @Description("")
  String ClearLocationMethods();

  @DefaultMessage("ClearMatches")
  @Description("")
  String ClearMatchesMethods();

  @DefaultMessage("CloseAppOnRecentPressed")
  @Description("")
  String CloseAppOnRecentPressedMethods();

  @DefaultMessage("ConfirmJs")
  @Description("")
  String ConfirmJsMethods();

  @DefaultMessage("ContentHeight")
  @Description("")
  String ContentHeightMethods();

  @DefaultMessage("ContinueJs")
  @Description("")
  String ContinueJsMethods();

  @DefaultMessage("CreateShortcut")
  @Description("")
  String CreateShortcutMethods();

  @DefaultMessage("CreateWebView")
  @Description("")
  String CreateWebViewMethods();

  @DefaultMessage("CurrentId")
  @Description("")
  String CurrentIdMethods();

  @DefaultMessage("DismissJsAlert")
  @Description("")
  String DismissJsAlertMethods();

  @DefaultMessage("DismissViewFloating")
  @Description("")
  String DismissViewFloatingMethods();

  @DefaultMessage("Dissmiss")
  @Description("")
  String DissmissMethods();

  @DefaultMessage("EvaluateJavaScript")
  @Description("")
  String EvaluateJavaScriptMethods();

  @DefaultMessage("ExampleFunction")
  @Description("")
  String ExampleFunctionMethods();

  @DefaultMessage("Find")
  @Description("")
  String FindMethods();

  @DefaultMessage("FindNext")
  @Description("")
  String FindNextMethods();

  @DefaultMessage("GetCookies")
  @Description("")
  String GetCookiesMethods();

  @DefaultMessage("GetIds")
  @Description("")
  String GetIdsMethods();

  @DefaultMessage("GetInternalHistory")
  @Description("")
  String GetInternalHistoryMethods();

  @DefaultMessage("GetPositionX")
  @Description("")
  String GetPositionXMethods();

  @DefaultMessage("GetPositionY")
  @Description("")
  String GetPositionYMethods();

  @DefaultMessage("GetProgress")
  @Description("")
  String GetProgressMethods();

  @DefaultMessage("GetScrollX")
  @Description("")
  String GetScrollXMethods();

  @DefaultMessage("GetScrollY")
  @Description("")
  String GetScrollYMethods();

  @DefaultMessage("GetSslCertificate")
  @Description("")
  String GetSslCertificateMethods();

  @DefaultMessage("GetTotalRAMHumanized")
  @Description("")
  String GetTotalRAMHumanizedMethods();

  @DefaultMessage("GetTotalRAMInBytes")
  @Description("")
  String GetTotalRAMInBytesMethods();

  @DefaultMessage("GetTotalRAMValue")
  @Description("")
  String GetTotalRAMValueMethods();

  @DefaultMessage("GetWebView")
  @Description("")
  String GetWebViewMethods();

  @DefaultMessage("GetWindowBrightness")
  @Description("")
  String GetWindowBrightnessMethods();

  @DefaultMessage("GoBack")
  @Description("")
  String GoBackMethods();

  @DefaultMessage("GoBackOrForward")
  @Description("")
  String GoBackOrForwardMethods();

  @DefaultMessage("GoForward")
  @Description("")
  String GoForwardMethods();

  @DefaultMessage("GoToUrl")
  @Description("")
  String GoToUrlMethods();

  @DefaultMessage("GrantPermission")
  @Description("")
  String GrantPermissionMethods();

  @DefaultMessage("HideCustomView")
  @Description("")
  String HideCustomViewMethods();

  @DefaultMessage("HideNavigationBarHP")
  @Description("")
  String HideNavigationBarHPMethods();

  @DefaultMessage("HideStatusBarHP")
  @Description("")
  String HideStatusBarHPMethods();

  @DefaultMessage("InvokeZoomPicker")
  @Description("")
  String InvokeZoomPickerMethods();

  @DefaultMessage("IsConnectedNetwork")
  @Description("")
  String IsConnectedNetworkMethods();

  @DefaultMessage("IsDeveloperModeEnabled")
  @Description("")
  String IsDeveloperModeEnabledMethods();

  @DefaultMessage("IsEmulator")
  @Description("")
  String IsEmulatorMethods();

  @DefaultMessage("IsRooted")
  @Description("")
  String IsRootedMethods();

  @DefaultMessage("LoadHtml")
  @Description("")
  String LoadHtmlMethods();

  @DefaultMessage("LoadInNewWindow")
  @Description("")
  String LoadInNewWindowMethods();

  @DefaultMessage("LoadWithHeaders")
  @Description("")
  String LoadWithHeadersMethods();

  @DefaultMessage("LoseFocusFloatingView")
  @Description("")
  String LoseFocusFloatingViewMethods();

  @DefaultMessage("Mode")
  @Description("")
  String ModeMethods();

  @DefaultMessage("OpenScreenName")
  @Description("")
  String OpenScreenNameMethods();

  @DefaultMessage("OverlapView")
  @Description("")
  String OverlapViewMethods();

  @DefaultMessage("PageDown")
  @Description("")
  String PageDownMethods();

  @DefaultMessage("PageUp")
  @Description("")
  String PageUpMethods();

  @DefaultMessage("PauseWebView")
  @Description("")
  String PauseWebViewMethods();

  @DefaultMessage("PlayAudioPath")
  @Description("")
  String PlayAudioPathMethods();

  @DefaultMessage("PostData")
  @Description("")
  String PostDataMethods();

  @DefaultMessage("PrintWebContent")
  @Description("")
  String PrintWebContentMethods();

  @DefaultMessage("ProceedHttpAuthRequest")
  @Description("")
  String ProceedHttpAuthRequestMethods();

  @DefaultMessage("ProceedSslError")
  @Description("")
  String ProceedSslErrorMethods();

  @DefaultMessage("RegisterDeepLink")
  @Description("")
  String RegisterDeepLinkMethods();

  @DefaultMessage("Reload")
  @Description("")
  String ReloadMethods();

  @DefaultMessage("RemoveWebView")
  @Description("")
  String RemoveWebViewMethods();

  @DefaultMessage("RequestDrawOverlayPermission")
  @Description("")
  String RequestDrawOverlayPermissionMethods();

  @DefaultMessage("RequestFocusFloatingView")
  @Description("")
  String RequestFocusFloatingViewMethods();

  @DefaultMessage("RestartPrinting")
  @Description("")
  String RestartPrintingMethods();

  @DefaultMessage("RestoreFloatingView")
  @Description("")
  String RestoreFloatingViewMethods();

  @DefaultMessage("ResubmitForm")
  @Description("")
  String ResubmitFormMethods();

  @DefaultMessage("ResumeWebView")
  @Description("")
  String ResumeWebViewMethods();

  @DefaultMessage("RingtoneGet")
  @Description("")
  String RingtoneGetMethods();

  @DefaultMessage("RingtonePlay")
  @Description("")
  String RingtonePlayMethods();

  @DefaultMessage("RingtoneStop")
  @Description("")
  String RingtoneStopMethods();

  @DefaultMessage("SaveArchive")
  @Description("")
  String SaveArchiveMethods();

  @DefaultMessage("ScrollTo")
  @Description("")
  String ScrollToMethods();

  @DefaultMessage("SearchViaAOL")
  @Description("")
  String SearchViaAOLMethods();

  @DefaultMessage("SearchViaASK")
  @Description("")
  String SearchViaASKMethods();

  @DefaultMessage("SearchViaAlibaba")
  @Description("")
  String SearchViaAlibabaMethods();

  @DefaultMessage("SearchViaAliexpress")
  @Description("")
  String SearchViaAliexpressMethods();

  @DefaultMessage("SearchViaAmazon")
  @Description("")
  String SearchViaAmazonMethods();

  @DefaultMessage("SearchViaBaidu")
  @Description("")
  String SearchViaBaiduMethods();

  @DefaultMessage("SearchViaBing")
  @Description("")
  String SearchViaBingMethods();

  @DefaultMessage("SearchViaDDG")
  @Description("")
  String SearchViaDDGMethods();

  @DefaultMessage("SearchViaEbay")
  @Description("")
  String SearchViaEbayMethods();

  @DefaultMessage("SearchViaGoogle")
  @Description("")
  String SearchViaGoogleMethods();

  @DefaultMessage("SearchViaWikipedia")
  @Description("")
  String SearchViaWikipediaMethods();

  @DefaultMessage("SearchViaYahoo")
  @Description("")
  String SearchViaYahooMethods();

  @DefaultMessage("SetCookies")
  @Description("")
  String SetCookiesMethods();

  @DefaultMessage("SetExpectedSignature")
  @Description("")
  String SetExpectedSignatureMethods();

  @DefaultMessage("SetPosition")
  @Description("")
  String SetPositionMethods();

  @DefaultMessage("SetVisibility")
  @Description("")
  String SetVisibilityMethods();

  @DefaultMessage("SetWebView")
  @Description("")
  String SetWebViewMethods();

  @DefaultMessage("SetWindowBrightness")
  @Description("")
  String SetWindowBrightnessMethods();

  @DefaultMessage("SetupView")
  @Description("")
  String SetupViewMethods();

  @DefaultMessage("ShowAlert")
  @Description("")
  String ShowAlertMethods();

  @DefaultMessage("ShowAlertAtCenter")
  @Description("")
  String ShowAlertAtCenterMethods();

  @DefaultMessage("ShowDialog")
  @Description("")
  String ShowDialogMethods();

  @DefaultMessage("ShowFloatingView")
  @Description("")
  String ShowFloatingViewMethods();

  @DefaultMessage("StartLockTask")
  @Description("")
  String StartLockTaskMethods();

  @DefaultMessage("StopLoading")
  @Description("")
  String StopLoadingMethods();

  @DefaultMessage("StopLockTask")
  @Description("")
  String StopLockTaskMethods();

  @DefaultMessage("UploadFile")
  @Description("")
  String UploadFileMethods();

  @DefaultMessage("ZoomBy")
  @Description("")
  String ZoomByMethods();

  @DefaultMessage("ZoomIn")
  @Description("")
  String ZoomInMethods();

  @DefaultMessage("ZoomOut")
  @Description("")
  String ZoomOutMethods();

  @DefaultMessage("addAppToRecent")
  @Description("")
  String addAppToRecentMethods();

  @DefaultMessage("forceStopAndClearData")
  @Description("")
  String forceStopAndClearDataMethods();

  @DefaultMessage("isKioskModeActive")
  @Description("")
  String isKioskModeActiveMethods();

  @DefaultMessage("isLowRAMDevice")
  @Description("")
  String isLowRAMDeviceMethods();

  @DefaultMessage("onBackPressed")
  @Description("")
  String onBackPressedMethods();

  @DefaultMessage("onWindowFocusChanged")
  @Description("")
  String onWindowFocusChangedMethods();

  @DefaultMessage("removeAppFromRecent")
  @Description("")
  String removeAppFromRecentMethods();

  @DefaultMessage("setHideFromRecent")
  @Description("")
  String setHideFromRecentMethods();


  /* Events */
  @DefaultMessage("AfterArchiveSaved")
  @Description("")
  String AfterArchiveSavedEvents();

  @DefaultMessage("AfterDismiss")
  @Description("")
  String AfterDismissEvents();

  @DefaultMessage("AfterJavaScriptEvaluated")
  @Description("")
  String AfterJavaScriptEvaluatedEvents();

  @DefaultMessage("ClickView")
  @Description("")
  String ClickViewEvents();

  @DefaultMessage("Completed")
  @Description("")
  String CompletedEvents();

  @DefaultMessage("CookiesRemoved")
  @Description("")
  String CookiesRemovedEvents();

  @DefaultMessage("ExampleEvent")
  @Description("")
  String ExampleEventEvents();

  @DefaultMessage("Failed")
  @Description("")
  String FailedEvents();

  @DefaultMessage("FileUploadNeeded")
  @Description("")
  String FileUploadNeededEvents();

  @DefaultMessage("FindResultReceived")
  @Description("")
  String FindResultReceivedEvents();

  @DefaultMessage("GotCertificate")
  @Description("")
  String GotCertificateEvents();

  @DefaultMessage("GotPrintResult")
  @Description("")
  String GotPrintResultEvents();

  @DefaultMessage("LongClicked")
  @Description("")
  String LongClickedEvents();

  @DefaultMessage("OnCloseWindowRequest")
  @Description("")
  String OnCloseWindowRequestEvents();

  @DefaultMessage("OnConsoleMessage")
  @Description("")
  String OnConsoleMessageEvents();

  @DefaultMessage("OnDownloadNeeded")
  @Description("")
  String OnDownloadNeededEvents();

  @DefaultMessage("OnErrorReceived")
  @Description("")
  String OnErrorReceivedEvents();

  @DefaultMessage("OnFormResubmission")
  @Description("")
  String OnFormResubmissionEvents();

  @DefaultMessage("OnGeolocationRequested")
  @Description("")
  String OnGeolocationRequestedEvents();

  @DefaultMessage("OnHideCustomView")
  @Description("")
  String OnHideCustomViewEvents();

  @DefaultMessage("OnJsAlert")
  @Description("")
  String OnJsAlertEvents();

  @DefaultMessage("OnJsConfirm")
  @Description("")
  String OnJsConfirmEvents();

  @DefaultMessage("OnJsPrompt")
  @Description("")
  String OnJsPromptEvents();

  @DefaultMessage("OnNewWindowRequest")
  @Description("")
  String OnNewWindowRequestEvents();

  @DefaultMessage("OnPermissionRequest")
  @Description("")
  String OnPermissionRequestEvents();

  @DefaultMessage("OnProgressChanged")
  @Description("")
  String OnProgressChangedEvents();

  @DefaultMessage("OnReceivedHttpAuthRequest")
  @Description("")
  String OnReceivedHttpAuthRequestEvents();

  @DefaultMessage("OnReceivedSslError")
  @Description("")
  String OnReceivedSslErrorEvents();

  @DefaultMessage("OnScrollChanged")
  @Description("")
  String OnScrollChangedEvents();

  @DefaultMessage("OnShowCustomView")
  @Description("")
  String OnShowCustomViewEvents();

  @DefaultMessage("PageLoaded")
  @Description("")
  String PageLoadedEvents();

  @DefaultMessage("PageStarted")
  @Description("")
  String PageStartedEvents();

  @DefaultMessage("PermissionDenied")
  @Description("")
  String PermissionDeniedEvents();

  @DefaultMessage("PositionMoved")
  @Description("")
  String PositionMovedEvents();

  @DefaultMessage("Progress")
  @Description("")
  String ProgressEvents();

  @DefaultMessage("Swiped")
  @Description("")
  String SwipedEvents();

  @DefaultMessage("WebViewStringChanged")
  @Description("")
  String WebViewStringChangedEvents();

  @DefaultMessage("onProgressChanged")
  @Description("")
  String onProgressChangedEvents();

  @DefaultMessage("Property for AdHosts")
  @Description("")
  String AdHostsPropertyDescriptions();

  @DefaultMessage("Event raised after ''SaveArchive'' method.If ''success'' is true then returns file path else empty string.")
  @Description("")
  String AfterArchiveSavedEventDescriptions();

  @DefaultMessage("Event for AfterDismiss")
  @Description("")
  String AfterDismissEventDescriptions();

  @DefaultMessage("Event raised after evaluating Js and returns result.")
  @Description("")
  String AfterJavaScriptEvaluatedEventDescriptions();

  @DefaultMessage("Method for AllowGeolocationAccess")
  @Description("")
  String AllowGeolocationAccessMethodDescriptions();

  @DefaultMessage("Property for AllowScreenshotsUser")
  @Description("")
  String AllowScreenshotsUserPropertyDescriptions();

  @DefaultMessage("Source of the audio path.")
  @Description("")
  String AudioPathSourcePropertyDescriptions();

  @DefaultMessage("Returnss whether the WebView should load image resources")
  @Description("")
  String AutoLoadImagesPropertyDescriptions();

  @DefaultMessage("Returns whether the WebView requires a user gesture to play media")
  @Description("")
  String AutoplayMediaPropertyDescriptions();

  @DefaultMessage("Property for BackgoundColor")
  @Description("")
  String BackgoundColorPropertyDescriptions();

  @DefaultMessage("Sets background color of webview")
  @Description("")
  String BackgroundColorPropertyDescriptions();

  @DefaultMessage("Method for Mode")
  @Description("")
  String BimaAix__ModeMethodDescriptions();

  @DefaultMessage("Method for StartLockTask")
  @Description("")
  String BimaAix__StartLockTaskMethodDescriptions();

  @DefaultMessage("Method for StopLockTask")
  @Description("")
  String BimaAix__StopLockTaskMethodDescriptions();

  @DefaultMessage("Method for addAppToRecent")
  @Description("")
  String BimaAix__addAppToRecentMethodDescriptions();

  @DefaultMessage("Method for removeAppFromRecent")
  @Description("")
  String BimaAix__removeAppFromRecentMethodDescriptions();

  @DefaultMessage("Method for setHideFromRecent")
  @Description("")
  String BimaAix__setHideFromRecentMethodDescriptions();

  @DefaultMessage("Property for BlockAds")
  @Description("")
  String BlockAdsPropertyDescriptions();

  @DefaultMessage("Sets whether the WebView should not load resources from the network.Use this to save data.")
  @Description("")
  String BlockNetworkLoadsPropertyDescriptions();

  @DefaultMessage("brightness mode (MANUAL or AUTO)")
  @Description("")
  String BrightnessModePropertyDescriptions();

  @DefaultMessage("brightness (a value between 0 and 255)")
  @Description("")
  String BrightnessPropertyDescriptions();

  @DefaultMessage("Sets cache mode for active webview")
  @Description("")
  String CacheModePropertyDescriptions();

  @DefaultMessage("Gets whether this WebView has a back history item")
  @Description("")
  String CanGoBackMethodDescriptions();

  @DefaultMessage("Gets whether the page can go back or forward the given number of steps.")
  @Description("")
  String CanGoBackOrForwardMethodDescriptions();

  @DefaultMessage("Gets whether this WebView has a forward history item.")
  @Description("")
  String CanGoForwardMethodDescriptions();

  @DefaultMessage("Cancels current print job. You can request cancellation of a queued, started, blocked, or failed print job.")
  @Description("")
  String CancelPrintingMethodDescriptions();

  @DefaultMessage("Checks whether the overlay permission is active.")
  @Description("")
  String CheckDrawOverlayPermissionMethodDescriptions();

  @DefaultMessage("Check if the app''s signature matches the expected signature.")
  @Description("")
  String CheckMyAppSignatureMethodDescriptions();

  @DefaultMessage("Clears the resource cache.")
  @Description("")
  String ClearCacheMethodDescriptions();

  @DefaultMessage("Removes all cookies and raises ''CookiesRemoved'' event")
  @Description("")
  String ClearCookiesMethodDescriptions();

  @DefaultMessage("Clears the form data of the webview <br> Added by Xoma")
  @Description("")
  String ClearFormDataMethodDescriptions();

  @DefaultMessage("Tells this WebView to clear its internal back/forward list.")
  @Description("")
  String ClearInternalHistoryMethodDescriptions();

  @DefaultMessage("Clear all location preferences.")
  @Description("")
  String ClearLocationMethodDescriptions();

  @DefaultMessage("Clears the highlighting surrounding text matches.")
  @Description("")
  String ClearMatchesMethodDescriptions();

  @DefaultMessage("Executes after clicking on the floating component.")
  @Description("")
  String ClickViewEventDescriptions();

  @DefaultMessage("Method for CloseAppOnRecentPressed")
  @Description("")
  String CloseAppOnRecentPressedMethodDescriptions();

  @DefaultMessage("Event for Completed")
  @Description("")
  String CompletedEventDescriptions();

  @DefaultMessage("Whether to proceed JavaScript originated request")
  @Description("")
  String ConfirmJsMethodDescriptions();

  @DefaultMessage("Gets height of HTML content")
  @Description("")
  String ContentHeightMethodDescriptions();

  @DefaultMessage("Inputs a confirmation response to Js")
  @Description("")
  String ContinueJsMethodDescriptions();

  @DefaultMessage("Event raised after ''ClearCokies'' method with result")
  @Description("")
  String CookiesRemovedEventDescriptions();

  @DefaultMessage("Creates a shortcut of given website on home screen")
  @Description("")
  String CreateShortcutMethodDescriptions();

  @DefaultMessage("Creates the webview in given arrangement with id")
  @Description("")
  String CreateWebViewMethodDescriptions();

  @DefaultMessage("Returns current id")
  @Description("")
  String CurrentIdMethodDescriptions();

  @DefaultMessage("Title of the page currently viewed")
  @Description("")
  String CurrentPageTitlePropertyDescriptions();

  @DefaultMessage("URL of the page currently viewed")
  @Description("")
  String CurrentUrlPropertyDescriptions();

  @DefaultMessage("Property for DeepLinks")
  @Description("")
  String DeepLinksPropertyDescriptions();

  @DefaultMessage("Returns whether to load content in desktop mode")
  @Description("")
  String DesktopModePropertyDescriptions();

  @DefaultMessage("Dismiss previously requested Js alert")
  @Description("")
  String DismissJsAlertMethodDescriptions();

  @DefaultMessage("Hides the floating component.")
  @Description("")
  String DismissViewFloatingMethodDescriptions();

  @DefaultMessage("Gets whether the WebView should display on-screen zoom controls")
  @Description("")
  String DisplayZoomPropertyDescriptions();

  @DefaultMessage("Dismiss latest dialog")
  @Description("")
  String DissmissMethodDescriptions();

  @DefaultMessage("Tells the WebView to enable JavaScript execution.")
  @Description("")
  String EnableJSPropertyDescriptions();

  @DefaultMessage("Asynchronously evaluates JavaScript in the context of the currently displayed page.")
  @Description("")
  String EvaluateJavaScriptMethodDescriptions();

  @DefaultMessage("Event for ExampleEvent")
  @Description("")
  String ExampleEventEventDescriptions();

  @DefaultMessage("Method for ExampleFunction")
  @Description("")
  String ExampleFunctionMethodDescriptions();

  @DefaultMessage("Property for ExampleProperty")
  @Description("")
  String ExamplePropertyPropertyDescriptions();

  @DefaultMessage("Event for Failed")
  @Description("")
  String FailedEventDescriptions();

  @DefaultMessage("Sets whether webview can access local files.Use this to enable file uploading and loading files using HTML")
  @Description("")
  String FileAccessPropertyDescriptions();

  @DefaultMessage("Event raised when file uploading is needed")
  @Description("")
  String FileUploadNeededEventDescriptions();

  @DefaultMessage("Finds all instances of find on the page and highlights them, asynchronously. Successive calls to this will cancel any pending searches.")
  @Description("")
  String FindMethodDescriptions();

  @DefaultMessage("Highlights and scrolls to the next match if ''forward'' is true else scrolls to previous match.")
  @Description("")
  String FindNextMethodDescriptions();

  @DefaultMessage("Event raised after ''Find'' method with int ''activeMatchOrdinal'',''numberOfMatches'' and ''isDoneCounting''")
  @Description("")
  String FindResultReceivedEventDescriptions();

  @DefaultMessage("Determines whether to follow links when they are tapped in the WebViewer.If you follow links, you can use GoBack and GoForward to navigate the browser history")
  @Description("")
  String FollowLinksPropertyDescriptions();

  @DefaultMessage("Property for FontScale")
  @Description("")
  String FontScalePropertyDescriptions();

  @DefaultMessage("Sets the default font size of text. The default is 16.")
  @Description("")
  String FontSizePropertyDescriptions();

  @DefaultMessage("Checks whether the floating view is clickable.")
  @Description("")
  String GetClickablePropertyDescriptions();

  @DefaultMessage("Get cookies for specific url")
  @Description("")
  String GetCookiesMethodDescriptions();

  @DefaultMessage("Checks if the floating is present on the screen.")
  @Description("")
  String GetFloatingViewVisiblePropertyDescriptions();

  @DefaultMessage("Returns a list of used ids")
  @Description("")
  String GetIdsMethodDescriptions();

  @DefaultMessage("Get internal history of given webview.")
  @Description("")
  String GetInternalHistoryMethodDescriptions();

  @DefaultMessage("Gets the X coordinate that the floating view is in.")
  @Description("")
  String GetPositionXMethodDescriptions();

  @DefaultMessage("Gets the Y coordinate that the floating view is in.")
  @Description("")
  String GetPositionYMethodDescriptions();

  @DefaultMessage("Gets the progress for the given webview")
  @Description("")
  String GetProgressMethodDescriptions();

  @DefaultMessage("Return the scrolled left position of the webview")
  @Description("")
  String GetScrollXMethodDescriptions();

  @DefaultMessage("Return the scrolled top position of the webview")
  @Description("")
  String GetScrollYMethodDescriptions();

  @DefaultMessage("Gets the SSL certificate for the main top-level page and raises ''GotCertificate'' event")
  @Description("")
  String GetSslCertificateMethodDescriptions();

  @DefaultMessage("Get total RAM in a human-readable format")
  @Description("")
  String GetTotalRAMHumanizedMethodDescriptions();

  @DefaultMessage("Get total RAM in bytes")
  @Description("")
  String GetTotalRAMInBytesMethodDescriptions();

  @DefaultMessage("Get total RAM value")
  @Description("")
  String GetTotalRAMValueMethodDescriptions();

  @DefaultMessage("Returns webview object from id")
  @Description("")
  String GetWebViewMethodDescriptions();

  @DefaultMessage("Method for GetWindowBrightness")
  @Description("")
  String GetWindowBrightnessMethodDescriptions();

  @DefaultMessage("Goes back in the history of this WebView.")
  @Description("")
  String GoBackMethodDescriptions();

  @DefaultMessage("Goes to the history item that is the number of steps away from the current item. Steps is negative if backward and positive if forward.")
  @Description("")
  String GoBackOrForwardMethodDescriptions();

  @DefaultMessage("Goes forward in the history of this WebView.")
  @Description("")
  String GoForwardMethodDescriptions();

  @DefaultMessage("Loads the given URL.")
  @Description("")
  String GoToUrlMethodDescriptions();

  @DefaultMessage("Event raised after getting SSL certificate of current displayed url/website with boolean ''isSecure'' and Strings ''issuedBy'',''issuedTo'' and ''validTill''.If ''isSecure'' is false and other values are empty then assume that website is not secure")
  @Description("")
  String GotCertificateEventDescriptions();

  @DefaultMessage("Event raised after getting previus print''s result.")
  @Description("")
  String GotPrintResultEventDescriptions();

  @DefaultMessage("Grants given permissions to webview.Use empty list to deny the request.")
  @Description("")
  String GrantPermissionMethodDescriptions();

  @DefaultMessage("Hides previously shown custom view")
  @Description("")
  String HideCustomViewMethodDescriptions();

  @DefaultMessage("Hide the navigation bar (including recent apps, home, and back buttons).")
  @Description("")
  String HideNavigationBarHPMethodDescriptions();

  @DefaultMessage("Hide the status bar at the top of the screen.")
  @Description("")
  String HideStatusBarHPMethodDescriptions();

  @DefaultMessage("Sets the initial scale for active WebView. 0 means default. If initial scale is greater than 0, WebView starts with this value as initial scale.")
  @Description("")
  String InitialScalePropertyDescriptions();

  @DefaultMessage("Invokes the graphical zoom picker widget for this WebView. This will result in the zoom widget appearing on the screen to control the zoom level of this WebView.Note that it does not checks whether zoom is enabled or not.")
  @Description("")
  String InvokeZoomPickerMethodDescriptions();

  @DefaultMessage("Method for IsConnectedNetwork")
  @Description("")
  String IsConnectedNetworkMethodDescriptions();

  @DefaultMessage("Check if developer mode is enabled.")
  @Description("")
  String IsDeveloperModeEnabledMethodDescriptions();

  @DefaultMessage("Method for IsEmulator")
  @Description("")
  String IsEmulatorMethodDescriptions();

  @DefaultMessage("Method for IsRooted")
  @Description("")
  String IsRootedMethodDescriptions();

  @DefaultMessage("Sets layer type")
  @Description("")
  String LayerTypePropertyDescriptions();

  @DefaultMessage("Loads the given data into this WebView using a ''data'' scheme URL.")
  @Description("")
  String LoadHtmlMethodDescriptions();

  @DefaultMessage("Loads requested url in given webview")
  @Description("")
  String LoadInNewWindowMethodDescriptions();

  @DefaultMessage("Loads the given URL with the specified additional HTTP headers defined is list of lists.")
  @Description("")
  String LoadWithHeadersMethodDescriptions();

  @DefaultMessage("Sets whether the WebView loads pages in overview mode, that is, zooms out the content to fit on screen by width. This setting is taken into account when the content width is greater than the width of the WebView control.")
  @Description("")
  String LoadWithOverviewModePropertyDescriptions();

  @DefaultMessage("Returns whether text selection and context menu are enabled or not")
  @Description("")
  String LongClickablePropertyDescriptions();

  @DefaultMessage("Event raised when something is long clicked in webview with item(image,string,empty,etc) and type(item type like 0,1,8,etc)")
  @Description("")
  String LongClickedEventDescriptions();

  @DefaultMessage("Loses focus on the floating window.")
  @Description("")
  String LoseFocusFloatingViewMethodDescriptions();

  @DefaultMessage("Event triggered when a window needs to be closed")
  @Description("")
  String OnCloseWindowRequestEventDescriptions();

  @DefaultMessage("Event raised after getting console message.")
  @Description("")
  String OnConsoleMessageEventDescriptions();

  @DefaultMessage("Event raised when downloading is needed.")
  @Description("")
  String OnDownloadNeededEventDescriptions();

  @DefaultMessage("Event raised when any error is received during loading url and returns message,error code and failing url")
  @Description("")
  String OnErrorReceivedEventDescriptions();

  @DefaultMessage("Event raised when resubmission of form is needed")
  @Description("")
  String OnFormResubmissionEventDescriptions();

  @DefaultMessage("Event raised when page asks for location access. Developer must handle/show dialog from him/herself.")
  @Description("")
  String OnGeolocationRequestedEventDescriptions();

  @DefaultMessage("Event raised when current page exits from full screen mode")
  @Description("")
  String OnHideCustomViewEventDescriptions();

  @DefaultMessage("Event raised when Js have to show an alert to user")
  @Description("")
  String OnJsAlertEventDescriptions();

  @DefaultMessage("Tells to display a confirm dialog to the user.")
  @Description("")
  String OnJsConfirmEventDescriptions();

  @DefaultMessage("Event raised when JavaScript needs input from user")
  @Description("")
  String OnJsPromptEventDescriptions();

  @DefaultMessage("Event raised when new window is requested by webview with boolean ''isDialog'' and ''isPopup''")
  @Description("")
  String OnNewWindowRequestEventDescriptions();

  @DefaultMessage("Event raised when a website asks for specific permission(s) in list format.")
  @Description("")
  String OnPermissionRequestEventDescriptions();

  @DefaultMessage("Fires when Progress changed.")
  @Description("")
  String OnProgressChangedEventDescriptions();

  @DefaultMessage("Notifies that the WebView received an HTTP authentication request.")
  @Description("")
  String OnReceivedHttpAuthRequestEventDescriptions();

  @DefaultMessage("Event for OnReceivedSslError")
  @Description("")
  String OnReceivedSslErrorEventDescriptions();

  @DefaultMessage("Event raised when webview gets scrolled")
  @Description("")
  String OnScrollChangedEventDescriptions();

  @DefaultMessage("Event raised when current page enters in full screen mode")
  @Description("")
  String OnShowCustomViewEventDescriptions();

  @DefaultMessage("Method for OpenScreenName")
  @Description("")
  String OpenScreenNameMethodDescriptions();

  @DefaultMessage("Sets over scroll mode")
  @Description("")
  String OverScrollModePropertyDescriptions();

  @DefaultMessage("Through this block it is possible to overlap any visible component on another.margins (list): index 1 -> margin left (number) index 2 -> margin top (number) index 3 -> margin right(number) index 4 -> margin bottom (number)gravity (number): 0 -> TOP-LEFT 1 -> TOP-CENTER 2 -> TOP-RIGHT 3 -> CENTER-LEFT 4 -> CENTER 5 -> CENTER-RIGHT 6 -> BOTTOM-LEFT 7 -> BOTTOM-CENTER 8 -> BOTTOM-RIGHT")
  @Description("")
  String OverlapViewMethodDescriptions();

  @DefaultMessage("Scrolls the contents of the WebView down by half the page size")
  @Description("")
  String PageDownMethodDescriptions();

  @DefaultMessage("Event raised when page loading has finished.")
  @Description("")
  String PageLoadedEventDescriptions();

  @DefaultMessage("Event indicating that page loading has started in web view.")
  @Description("")
  String PageStartedEventDescriptions();

  @DefaultMessage("Scrolls the contents of the WebView up by half the page size")
  @Description("")
  String PageUpMethodDescriptions();

  @DefaultMessage("Does a best-effort attempt to pause any processing that can be paused safely, such as animations and geolocation. Note that this call does not pause JavaScript.")
  @Description("")
  String PauseWebViewMethodDescriptions();

  @DefaultMessage("Permission has been denied.")
  @Description("")
  String PermissionDeniedEventDescriptions();

  @DefaultMessage("Play audio from a specified path.")
  @Description("")
  String PlayAudioPathMethodDescriptions();

  @DefaultMessage("View moved from position")
  @Description("")
  String PositionMovedEventDescriptions();

  @DefaultMessage("Loads the URL with postData using ''POST'' method into active WebView.")
  @Description("")
  String PostDataMethodDescriptions();

  @DefaultMessage("Prints the content of webview with given document name")
  @Description("")
  String PrintWebContentMethodDescriptions();

  @DefaultMessage("Instructs the WebView to proceed with the authentication with the given credentials.If both parameters are empty then it will cancel the request.")
  @Description("")
  String ProceedHttpAuthRequestMethodDescriptions();

  @DefaultMessage("Method for ProceedSslError")
  @Description("")
  String ProceedSslErrorMethodDescriptions();

  @DefaultMessage("Event for Progress")
  @Description("")
  String ProgressEventDescriptions();

  @DefaultMessage("Returns whether webview will prompt for permission and raise ''OnPermissionRequest'' event or not")
  @Description("")
  String PromptForPermissionPropertyDescriptions();

  @DefaultMessage("Registers to open specified link in associated external app(s)")
  @Description("")
  String RegisterDeepLinkMethodDescriptions();

  @DefaultMessage("Reloads the current URL.")
  @Description("")
  String ReloadMethodDescriptions();

  @DefaultMessage("Destroys the webview and removes it completely from view system")
  @Description("")
  String RemoveWebViewMethodDescriptions();

  @DefaultMessage("Redirects to application settings to allow overlay permission.")
  @Description("")
  String RequestDrawOverlayPermissionMethodDescriptions();

  @DefaultMessage("Prompts to focus on the floating window.")
  @Description("")
  String RequestFocusFloatingViewMethodDescriptions();

  @DefaultMessage("Restarts current/previous print job. You can request restart of a failed print job.")
  @Description("")
  String RestartPrintingMethodDescriptions();

  @DefaultMessage("Returns the floating window to the screen.")
  @Description("")
  String RestoreFloatingViewMethodDescriptions();

  @DefaultMessage("Whether to resubmit form or not.")
  @Description("")
  String ResubmitFormMethodDescriptions();

  @DefaultMessage("Resumes the previously paused WebView.")
  @Description("")
  String ResumeWebViewMethodDescriptions();

  @DefaultMessage("Get current ringtone. Type can be RINGTONE, NOTIFICATION or ALARM.")
  @Description("")
  String RingtoneGetMethodDescriptions();

  @DefaultMessage("Play ringtone. Type can be RINGTONE, NOTIFICATION or ALARM.")
  @Description("")
  String RingtonePlayMethodDescriptions();

  @DefaultMessage("Stop currently playing ringtone.")
  @Description("")
  String RingtoneStopMethodDescriptions();

  @DefaultMessage("Sets rotation angle")
  @Description("")
  String RotationAnglePropertyDescriptions();

  @DefaultMessage("Saves the current site as a web archive")
  @Description("")
  String SaveArchiveMethodDescriptions();

  @DefaultMessage("Whether to display horizonatal and vertical scrollbars or not")
  @Description("")
  String ScrollBarPropertyDescriptions();

  @DefaultMessage("Sets scroll bar style")
  @Description("")
  String ScrollBarStylePropertyDescriptions();

  @DefaultMessage("Scrolls the webview to given position")
  @Description("")
  String ScrollToMethodDescriptions();

  @DefaultMessage("Property for Scrollable")
  @Description("")
  String ScrollablePropertyDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via AOL.")
  @Description("")
  String SearchViaAOLMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via ASK.COM.")
  @Description("")
  String SearchViaASKMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Alibaba.")
  @Description("")
  String SearchViaAlibabaMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Aliexpress.")
  @Description("")
  String SearchViaAliexpressMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Amazon.")
  @Description("")
  String SearchViaAmazonMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Baidu (chinese).")
  @Description("")
  String SearchViaBaiduMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Bing.")
  @Description("")
  String SearchViaBingMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via DuckDuckGo.")
  @Description("")
  String SearchViaDDGMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Ebay.")
  @Description("")
  String SearchViaEbayMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Google.")
  @Description("")
  String SearchViaGoogleMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Wikipedia.")
  @Description("")
  String SearchViaWikipediaMethodDescriptions();

  @DefaultMessage("Returns a URL for searching a keyword via Yahoo.")
  @Description("")
  String SearchViaYahooMethodDescriptions();

  @DefaultMessage("Property for SetAudioPathSource")
  @Description("")
  String SetAudioPathSourcePropertyDescriptions();

  @DefaultMessage("Adjusts whether the floating view is clickable")
  @Description("")
  String SetClickablePropertyDescriptions();

  @DefaultMessage("Sets cookies for given url")
  @Description("")
  String SetCookiesMethodDescriptions();

  @DefaultMessage("Set the expected app signature.")
  @Description("")
  String SetExpectedSignatureMethodDescriptions();

  @DefaultMessage("Moves the floating view to the indicated coordinates.")
  @Description("")
  String SetPositionMethodDescriptions();

  @DefaultMessage("Sets the visibility of webview by id")
  @Description("")
  String SetVisibilityMethodDescriptions();

  @DefaultMessage("Set specific webview to current webview by id")
  @Description("")
  String SetWebViewMethodDescriptions();

  @DefaultMessage("Method for SetWindowBrightness")
  @Description("")
  String SetWindowBrightnessMethodDescriptions();

  @DefaultMessage("Initializes the component you want to float.")
  @Description("")
  String SetupViewMethodDescriptions();

  @DefaultMessage("Show a original toast of android at the center of the screen")
  @Description("")
  String ShowAlertAtCenterMethodDescriptions();

  @DefaultMessage("Show a original toast of android")
  @Description("")
  String ShowAlertMethodDescriptions();

  @DefaultMessage("Show a View dialog")
  @Description("")
  String ShowDialogMethodDescriptions();

  @DefaultMessage("Displays the floating component.")
  @Description("")
  String ShowFloatingViewMethodDescriptions();

  @DefaultMessage("whether User Interface shoud be showed while setting the volume.")
  @Description("")
  String ShowUIPropertyDescriptions();

  @DefaultMessage("Stops the current load.")
  @Description("")
  String StopLoadingMethodDescriptions();

  @DefaultMessage("Sets whether the WebView supports multiple windows")
  @Description("")
  String SupportMultipleWindowsPropertyDescriptions();

  @DefaultMessage("Property for SuppressToast")
  @Description("")
  String SuppressToastPropertyDescriptions();

  @DefaultMessage("Property for SuppressWarnings")
  @Description("")
  String SuppressWarningsPropertyDescriptions();

  @DefaultMessage("Event raised when webview is swiped")
  @Description("")
  String SwipedEventDescriptions();

  @DefaultMessage("Uploads the given file from content uri.Use empty string to cancel the upload request.")
  @Description("")
  String UploadFileMethodDescriptions();

  @DefaultMessage("Sets whether the WebView should enable support for the ''viewport'' HTML meta tag or should use a wide viewport.")
  @Description("")
  String UseWideViewPortPropertyDescriptions();

  @DefaultMessage("Get webview user agent")
  @Description("")
  String UserAgentPropertyDescriptions();

  @DefaultMessage("Whether or not to give the application permission to use the Javascript geolocation API")
  @Description("")
  String UsesLocationPropertyDescriptions();

  @DefaultMessage("Sets whether vibration feedback enabled on long click")
  @Description("")
  String VibrationEnabledPropertyDescriptions();

  @DefaultMessage("Returns the visibility of current webview")
  @Description("")
  String VisiblePropertyDescriptions();

  @DefaultMessage("notification volume in percent.")
  @Description("")
  String VolumeAlarmPropertyDescriptions();

  @DefaultMessage("media volume in percent.")
  @Description("")
  String VolumeMusicPropertyDescriptions();

  @DefaultMessage("ringtone volume in percent.")
  @Description("")
  String VolumeRingPropertyDescriptions();

  @DefaultMessage("When the JavaScript calls AppInventor.setWebViewString this event is run.")
  @Description("")
  String WebViewStringChangedEventDescriptions();

  @DefaultMessage("Set webview string")
  @Description("")
  String WebViewStringPropertyDescriptions();

  @DefaultMessage("Performs a zoom operation in the WebView by given zoom percent")
  @Description("")
  String ZoomByMethodDescriptions();

  @DefaultMessage("Gets whether the WebView should support zooming using its on-screen zoom controls and gestures")
  @Description("")
  String ZoomEnabledPropertyDescriptions();

  @DefaultMessage("Performs zoom in in the WebView")
  @Description("")
  String ZoomInMethodDescriptions();

  @DefaultMessage("Performs zoom out in the WebView")
  @Description("")
  String ZoomOutMethodDescriptions();

  @DefaultMessage("Sets the zoom of the page in percent. The default is 100")
  @Description("")
  String ZoomPercentPropertyDescriptions();

  @DefaultMessage("Uses String for mode Kiosk app None or Pinned")
  @Description("")
  String exam__ModeMethodDescriptions();

  @DefaultMessage("Enable Pinning Screen.")
  @Description("")
  String exam__StartLockTaskMethodDescriptions();

  @DefaultMessage("disable Pinning Screen.")
  @Description("")
  String exam__StopLockTaskMethodDescriptions();

  @DefaultMessage("add screen to background.")
  @Description("")
  String exam__addAppToRecentMethodDescriptions();

  @DefaultMessage("remove app from background")
  @Description("")
  String exam__removeAppFromRecentMethodDescriptions();

  @DefaultMessage("remove app from background with boolean")
  @Description("")
  String exam__setHideFromRecentMethodDescriptions();

  @DefaultMessage("Force stops the specified app and clears its data.")
  @Description("")
  String forceStopAndClearDataMethodDescriptions();

  @DefaultMessage("Property for getSdkVersion")
  @Description("")
  String getSdkVersionPropertyDescriptions();

  @DefaultMessage("Method for isKioskModeActive")
  @Description("")
  String isKioskModeActiveMethodDescriptions();

  @DefaultMessage("Method for isLowRAMDevice")
  @Description("")
  String isLowRAMDeviceMethodDescriptions();

  @DefaultMessage("Method for onBackPressed")
  @Description("")
  String onBackPressedMethodDescriptions();

  @DefaultMessage("Event raised when page loading progress has changed.")
  @Description("")
  String onProgressChangedEventDescriptions();

  @DefaultMessage("Method for onWindowFocusChanged")
  @Description("")
  String onWindowFocusChangedMethodDescriptions();


  /* Parameters */
  @DefaultMessage("activeMatchOrdinal")
  @Description("")
  String activeMatchOrdinalParams();

  @DefaultMessage("allow")
  @Description("")
  String allowParams();

  @DefaultMessage("audioPath")
  @Description("")
  String audioPathParams();

  @DefaultMessage("bottom")
  @Description("")
  String bottomParams();

  @DefaultMessage("canGoLeft")
  @Description("")
  String canGoLeftParams();

  @DefaultMessage("canGoRight")
  @Description("")
  String canGoRightParams();

  @DefaultMessage("canceltext")
  @Description("")
  String canceltextParams();

  @DefaultMessage("cancleable")
  @Description("")
  String cancleableParams();

  @DefaultMessage("childComponent")
  @Description("")
  String childComponentParams();

  @DefaultMessage("clickable")
  @Description("")
  String clickableParams();

  @DefaultMessage("component")
  @Description("")
  String componentParams();

  @DefaultMessage("confirm")
  @Description("")
  String confirmParams();

  @DefaultMessage("container")
  @Description("")
  String containerParams();

  @DefaultMessage("contentDisposition")
  @Description("")
  String contentDispositionParams();

  @DefaultMessage("contentUri")
  @Description("")
  String contentUriParams();

  @DefaultMessage("cookieString")
  @Description("")
  String cookieStringParams();

  @DefaultMessage("data")
  @Description("")
  String dataParams();

  @DefaultMessage("defaultValue")
  @Description("")
  String defaultValueParams();

  @DefaultMessage("dir")
  @Description("")
  String dirParams();

  @DefaultMessage("direction")
  @Description("")
  String directionParams();

  @DefaultMessage("documentName")
  @Description("")
  String documentNameParams();

  @DefaultMessage("domain")
  @Description("")
  String domainParams();

  @DefaultMessage("errorCode")
  @Description("")
  String errorCodeParams();

  @DefaultMessage("f")
  @Description("")
  String fParams();

  @DefaultMessage("filePath")
  @Description("")
  String filePathParams();

  @DefaultMessage("forward")
  @Description("")
  String forwardParams();

  @DefaultMessage("gravity")
  @Description("")
  String gravityParams();

  @DefaultMessage("headers")
  @Description("")
  String headersParams();

  @DefaultMessage("hide")
  @Description("")
  String hideParams();

  @DefaultMessage("host")
  @Description("")
  String hostParams();

  @DefaultMessage("html")
  @Description("")
  String htmlParams();

  @DefaultMessage("iconPath")
  @Description("")
  String iconPathParams();

  @DefaultMessage("id")
  @Description("")
  String idParams();

  @DefaultMessage("input")
  @Description("")
  String inputParams();

  @DefaultMessage("isBlocked")
  @Description("")
  String isBlockedParams();

  @DefaultMessage("isCaptureEnabled")
  @Description("")
  String isCaptureEnabledParams();

  @DefaultMessage("isCompleted")
  @Description("")
  String isCompletedParams();

  @DefaultMessage("isDialog")
  @Description("")
  String isDialogParams();

  @DefaultMessage("isDoneCounting")
  @Description("")
  String isDoneCountingParams();

  @DefaultMessage("isFailed")
  @Description("")
  String isFailedParams();

  @DefaultMessage("isPopup")
  @Description("")
  String isPopupParams();

  @DefaultMessage("isSecure")
  @Description("")
  String isSecureParams();

  @DefaultMessage("issuedBy")
  @Description("")
  String issuedByParams();

  @DefaultMessage("issuedTo")
  @Description("")
  String issuedToParams();

  @DefaultMessage("item")
  @Description("")
  String itemParams();

  @DefaultMessage("keyword")
  @Description("")
  String keywordParams();

  @DefaultMessage("language")
  @Description("")
  String languageParams();

  @DefaultMessage("level")
  @Description("")
  String levelParams();

  @DefaultMessage("lineNumber")
  @Description("")
  String lineNumberParams();

  @DefaultMessage("listbutton")
  @Description("")
  String listbuttonParams();

  @DefaultMessage("longNotification")
  @Description("")
  String longNotificationParams();

  @DefaultMessage("mainComponent")
  @Description("")
  String mainComponentParams();

  @DefaultMessage("margins")
  @Description("")
  String marginsParams();

  @DefaultMessage("message")
  @Description("")
  String messageParams();

  @DefaultMessage("mimeType")
  @Description("")
  String mimeTypeParams();

  @DefaultMessage("newProgress")
  @Description("")
  String newProgressParams();

  @DefaultMessage("notice")
  @Description("")
  String noticeParams();

  @DefaultMessage("numberOfMatches")
  @Description("")
  String numberOfMatchesParams();

  @DefaultMessage("oldScrollX")
  @Description("")
  String oldScrollXParams();

  @DefaultMessage("oldScrollY")
  @Description("")
  String oldScrollYParams();

  @DefaultMessage("origin")
  @Description("")
  String originParams();

  @DefaultMessage("packageName")
  @Description("")
  String packageNameParams();

  @DefaultMessage("password")
  @Description("")
  String passwordParams();

  @DefaultMessage("percentage")
  @Description("")
  String percentageParams();

  @DefaultMessage("permissionName")
  @Description("")
  String permissionNameParams();

  @DefaultMessage("permissions")
  @Description("")
  String permissionsParams();

  @DefaultMessage("permissionsList")
  @Description("")
  String permissionsListParams();

  @DefaultMessage("positionX")
  @Description("")
  String positionXParams();

  @DefaultMessage("positionY")
  @Description("")
  String positionYParams();

  @DefaultMessage("printId")
  @Description("")
  String printIdParams();

  @DefaultMessage("proceed")
  @Description("")
  String proceedParams();

  @DefaultMessage("progress")
  @Description("")
  String progressParams();

  @DefaultMessage("reSubmit")
  @Description("")
  String reSubmitParams();

  @DefaultMessage("realm")
  @Description("")
  String realmParams();

  @DefaultMessage("remember")
  @Description("")
  String rememberParams();

  @DefaultMessage("response")
  @Description("")
  String responseParams();

  @DefaultMessage("result")
  @Description("")
  String resultParams();

  @DefaultMessage("scheme")
  @Description("")
  String schemeParams();

  @DefaultMessage("screen")
  @Description("")
  String screenParams();

  @DefaultMessage("script")
  @Description("")
  String scriptParams();

  @DefaultMessage("scrollX")
  @Description("")
  String scrollXParams();

  @DefaultMessage("scrollY")
  @Description("")
  String scrollYParams();

  @DefaultMessage("secondaryUrl")
  @Description("")
  String secondaryUrlParams();

  @DefaultMessage("signature")
  @Description("")
  String signatureParams();

  @DefaultMessage("size")
  @Description("")
  String sizeParams();

  @DefaultMessage("sourceID")
  @Description("")
  String sourceIDParams();

  @DefaultMessage("steps")
  @Description("")
  String stepsParams();

  @DefaultMessage("string")
  @Description("")
  String stringParams();

  @DefaultMessage("success")
  @Description("")
  String successParams();

  @DefaultMessage("successful")
  @Description("")
  String successfulParams();

  @DefaultMessage("title")
  @Description("")
  String titleParams();

  @DefaultMessage("titletxt")
  @Description("")
  String titletxtParams();

  @DefaultMessage("top")
  @Description("")
  String topParams();

  @DefaultMessage("type")
  @Description("")
  String typeParams();

  @DefaultMessage("url")
  @Description("")
  String urlParams();

  @DefaultMessage("username")
  @Description("")
  String usernameParams();

  @DefaultMessage("validTill")
  @Description("")
  String validTillParams();

  @DefaultMessage("value")
  @Description("")
  String valueParams();

  @DefaultMessage("viewComponent")
  @Description("")
  String viewComponentParams();

  @DefaultMessage("visibility")
  @Description("")
  String visibilityParams();

  @DefaultMessage("x")
  @Description("")
  String xParams();

  @DefaultMessage("y")
  @Description("")
  String yParams();

  @DefaultMessage("z")
  @Description("")
  String zParams();

  @DefaultMessage("zoomP")
  @Description("")
  String zoomPParams();


  /* Component Categories */
  @DefaultMessage("Extension")
  @Description("")
  String extensionComponentPallette();


  /* Property Categories */
  @DefaultMessage("Appearance")
  @Description("")
  String AppearancePropertyCategory();

  @DefaultMessage("Behavior")
  @Description("")
  String BehaviorPropertyCategory();

  @DefaultMessage("Unspecified")
  @Description("")
  String UnspecifiedPropertyCategory();

}
